
D:/uni/5th semester/ecse324/labs/lab4/G53_Lab4/VGA.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 30 0c 00 00 34 0c 00 00 38 0c 00 00     @...0...4...8...
  30:	3c 0c 00 00 2c 0c 00 00 40 0c 00 00 44 0c 00 00     <...,...@...D...

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002bb 	bl	bc8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000d2c 	.word	0x00000d2c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001168 	.word	0x00001168

00000124 <__cs3_heap_start_ptr>:
 124:	00001190 	.word	0x00001190

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001170 	.word	0x00001170
 170:	00001173 	.word	0x00001173
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001170 	.word	0x00001170
 1bc:	00001170 	.word	0x00001170
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001170 	.word	0x00001170
 200:	00000000 	.word	0x00000000
 204:	00000cd0 	.word	0x00000cd0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000cd0 	.word	0x00000cd0
 250:	00001174 	.word	0x00001174
 254:	00000d30 	.word	0x00000d30
 258:	00000000 	.word	0x00000000

0000025c <VGA_clear_charbuff_ASM>:
			.global VGA_write_char_ASM
			.global VGA_write_byte_ASM
			.global VGA_draw_point_ASM

VGA_clear_charbuff_ASM:
			PUSH {R3, R4, R5, LR}				/* Callee save */	
 25c:	e92d4038 	push	{r3, r4, r5, lr}
			LDR R3, =CHAR_BASE   				/* Pointer to base char location */
 260:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
			LDR R4, =CHAR_LAST_ADRESS			/* Pointer to last char location */
 264:	e59f411c 	ldr	r4, [pc, #284]	; 388 <VGA_draw_point_ASM+0x48>
			MOV R5, #0							/* Constant for clear */
 268:	e3a05000 	mov	r5, #0

0000026c <LOOP_1>:
LOOP_1:	
			STRB R5, [R3], #1					/* Post-increment by 1 to visit all char buffer locations */
 26c:	e4c35001 	strb	r5, [r3], #1
			CMP R3, R4
 270:	e1530004 	cmp	r3, r4
			BNE LOOP_1							/* Not reached last location yet */
 274:	1afffffc 	bne	26c <LOOP_1>
			POP {R3, R4, R5, LR}
 278:	e8bd4038 	pop	{r3, r4, r5, lr}
			BX LR
 27c:	e12fff1e 	bx	lr

00000280 <VGA_clear_pixelbuff_ASM>:
			
VGA_clear_pixelbuff_ASM:
			PUSH {R3, R4, R5, LR}				/* Callee save */	
 280:	e92d4038 	push	{r3, r4, r5, lr}
			LDR R3, =PIXEL_BASE   				/* Pointer to base pixel location */
 284:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
			LDR R4, =PIXEL_LAST_ADRESS			/* Pointer to last pixel location */
 288:	e59f40fc 	ldr	r4, [pc, #252]	; 38c <VGA_draw_point_ASM+0x4c>
			MOV R5, #0						
 28c:	e3a05000 	mov	r5, #0

00000290 <LOOP_2>:
LOOP_2:	
			STRH R5, [R3], #2					/* Post-increment by 2 to visit all pixel buffer locations */
 290:	e0c350b2 	strh	r5, [r3], #2
			CMP R3, R4
 294:	e1530004 	cmp	r3, r4
			BNE LOOP_2							/* Not reached last location yet */
 298:	1afffffc 	bne	290 <LOOP_2>
			POP {R3, R4, R5, LR}
 29c:	e8bd4038 	pop	{r3, r4, r5, lr}
			BX LR
 2a0:	e12fff1e 	bx	lr

000002a4 <VGA_write_char_ASM>:

VGA_write_char_ASM:
			PUSH {R3, R4}
 2a4:	e92d0018 	push	{r3, r4}
			MOV R4, #0							
 2a8:	e3a04000 	mov	r4, #0
			CMP R0, R4							/* If x < 0, leave */
 2ac:	e1500004 	cmp	r0, r4
			BXLT LR		
 2b0:	b12fff1e 	bxlt	lr
			CMP R1, R4							/* If y < 0, leave */
 2b4:	e1510004 	cmp	r1, r4
			BXLT LR
 2b8:	b12fff1e 	bxlt	lr
			MOV R4, #79							
 2bc:	e3a0404f 	mov	r4, #79	; 0x4f
			CMP R0, R4							/* If x > 79, leave */
 2c0:	e1500004 	cmp	r0, r4
			BXGT LR	
 2c4:	c12fff1e 	bxgt	lr
			MOV R4, #59							
 2c8:	e3a0403b 	mov	r4, #59	; 0x3b
			CMP R1, R4							/* If y > 59, leave */
 2cc:	e1510004 	cmp	r1, r4
			BXGT LR			
 2d0:	c12fff1e 	bxgt	lr
	
			LDR R3, =CHAR_BASE					/* Pointer to base char location */
 2d4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
			ADD R3, R3, R0						/* Point to x coordinate */
 2d8:	e0833000 	add	r3, r3, r0
			ADD R3, R3, R1, LSL #7				/* Point to y coordinate */
 2dc:	e0833381 	add	r3, r3, r1, lsl #7
			STRB R2, [R3]						/* Store char */
 2e0:	e5c32000 	strb	r2, [r3]
			POP {R3, R4}
 2e4:	e8bd0018 	pop	{r3, r4}
			BX LR
 2e8:	e12fff1e 	bx	lr

000002ec <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
			PUSH {R3, R4, LR}
 2ec:	e92d4018 	push	{r3, r4, lr}
			MOV R4, #78						
 2f0:	e3a0404e 	mov	r4, #78	; 0x4e
			CMP R0, R4							/* If x > 78, leave, (x + 1 should be <= 79 ) */
 2f4:	e1500004 	cmp	r0, r4
			BXGT LR							
 2f8:	c12fff1e 	bxgt	lr
			
			LDR R4,=0xF						
 2fc:	e3a0400f 	mov	r4, #15
			AND R4, R4, R2						/* Move lower half (4 bits) of third parameter (R2) into R4 */
 300:	e0044002 	and	r4, r4, r2
			MOV R2, R2, LSR #4					/* R2 will hold upper half of its original value */
 304:	e1a02222 	lsr	r2, r2, #4
			
			CMP R2, #9							/* Display upper half first */
 308:	e3520009 	cmp	r2, #9
			SUBGT R2, R2, #10					/* If hex value to display is > 9, display A-F : ascii(A) = 65 */
 30c:	c242200a 	subgt	r2, r2, #10
			ADDGT R2, R2, #65
 310:	c2822041 	addgt	r2, r2, #65	; 0x41
			ADDLE R2, R2, #48						/* Otherwise display numbers 0-9: ascii(0) = 48 */
 314:	d2822030 	addle	r2, r2, #48	; 0x30
			BL VGA_write_char_ASM				/* R0 holds x, R1 holds y, R2 holds value char to display */
 318:	ebffffe1 	bl	2a4 <VGA_write_char_ASM>
			
			MOV R2, R4
 31c:	e1a02004 	mov	r2, r4
			CMP R2, #9							/* Display lower half */
 320:	e3520009 	cmp	r2, #9
			SUBGT R2, R2, #10					/* If hex value to display is > 9, display A-F : ascii(A) = 65 */
 324:	c242200a 	subgt	r2, r2, #10
			ADDGT R2, R2, #65
 328:	c2822041 	addgt	r2, r2, #65	; 0x41
			ADDLE R2, R2, #48					/* Otherwise display numbers 0-9: ascii(0) = 48 */
 32c:	d2822030 	addle	r2, r2, #48	; 0x30
			ADD R0, R0, #1
 330:	e2800001 	add	r0, r0, #1
			BL VGA_write_char_ASM				/* R0 holds x + 1, R1 holds y, R2 holds value char to display */
 334:	ebffffda 	bl	2a4 <VGA_write_char_ASM>

			POP {R3, R4, LR}
 338:	e8bd4018 	pop	{r3, r4, lr}
			BX LR
 33c:	e12fff1e 	bx	lr

00000340 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:	
			PUSH {R3, R4}
 340:	e92d0018 	push	{r3, r4}
			MOV R4, #0							
 344:	e3a04000 	mov	r4, #0
			CMP R0, R4							/* If x < 0, leave */
 348:	e1500004 	cmp	r0, r4
			BXLT LR		
 34c:	b12fff1e 	bxlt	lr
			CMP R1, R4							/* If y < 0, leave */
 350:	e1510004 	cmp	r1, r4
			BXLT LR
 354:	b12fff1e 	bxlt	lr
			LDR R4,=0x13F						/* 319 base 10 = 13F base 16 */
 358:	e59f4030 	ldr	r4, [pc, #48]	; 390 <VGA_draw_point_ASM+0x50>
			CMP R0, R4							/* If x > 319, leave */
 35c:	e1500004 	cmp	r0, r4
			BXGT LR	
 360:	c12fff1e 	bxgt	lr
			MOV R4, #239							
 364:	e3a040ef 	mov	r4, #239	; 0xef
			CMP R1, R4							/* If y > 239, leave */
 368:	e1510004 	cmp	r1, r4
			BXGT LR
 36c:	c12fff1e 	bxgt	lr
				
			LDR R3, =PIXEL_BASE					/* Pointer to base pixel location */
 370:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
			ADD R3, R3, R0, LSL #1				/* Point to x coordinate */
 374:	e0833080 	add	r3, r3, r0, lsl #1
			ADD R3, R3, R1, LSL #10				/* Point to y coordinate */
 378:	e0833501 	add	r3, r3, r1, lsl #10
			STRH R2, [R3]						/* Store color */
 37c:	e1c320b0 	strh	r2, [r3]
			POP {R3, R4}
 380:	e8bd0018 	pop	{r3, r4}
			BX LR
 384:	e12fff1e 	bx	lr
			.global VGA_draw_point_ASM

VGA_clear_charbuff_ASM:
			PUSH {R3, R4, R5, LR}				/* Callee save */	
			LDR R3, =CHAR_BASE   				/* Pointer to base char location */
			LDR R4, =CHAR_LAST_ADRESS			/* Pointer to last char location */
 388:	c9001dcf 	.word	0xc9001dcf
			BX LR
			
VGA_clear_pixelbuff_ASM:
			PUSH {R3, R4, R5, LR}				/* Callee save */	
			LDR R3, =PIXEL_BASE   				/* Pointer to base pixel location */
			LDR R4, =PIXEL_LAST_ADRESS			/* Pointer to last pixel location */
 38c:	c803be7e 	.word	0xc803be7e
			MOV R4, #0							
			CMP R0, R4							/* If x < 0, leave */
			BXLT LR		
			CMP R1, R4							/* If y < 0, leave */
			BXLT LR
			LDR R4,=0x13F						/* 319 base 10 = 13F base 16 */
 390:	0000013f 	.word	0x0000013f

00000394 <test_char>:

int vga();
int keyboard();
int audio();

void test_char(){
 394:	e92d4800 	push	{r11, lr}
 398:	e28db004 	add	r11, sp, #4
 39c:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 0;
 3a0:	e3a03000 	mov	r3, #0
 3a4:	e54b300d 	strb	r3, [r11, #-13]
	for(y=0; y<=59; y++){
 3a8:	e3a03000 	mov	r3, #0
 3ac:	e50b300c 	str	r3, [r11, #-12]
 3b0:	ea000013 	b	404 <test_char+0x70>
		for(x=0; x<=79;x++){
 3b4:	e3a03000 	mov	r3, #0
 3b8:	e50b3008 	str	r3, [r11, #-8]
 3bc:	ea00000a 	b	3ec <test_char+0x58>
			VGA_write_char_ASM(x,y,c++);
 3c0:	e55b300d 	ldrb	r3, [r11, #-13]
 3c4:	e55b200d 	ldrb	r2, [r11, #-13]
 3c8:	e2822001 	add	r2, r2, #1
 3cc:	e54b200d 	strb	r2, [r11, #-13]
 3d0:	e51b0008 	ldr	r0, [r11, #-8]
 3d4:	e51b100c 	ldr	r1, [r11, #-12]
 3d8:	e1a02003 	mov	r2, r3
 3dc:	ebffffb0 	bl	2a4 <VGA_write_char_ASM>

void test_char(){
	int x,y;
	char c = 0;
	for(y=0; y<=59; y++){
		for(x=0; x<=79;x++){
 3e0:	e51b3008 	ldr	r3, [r11, #-8]
 3e4:	e2833001 	add	r3, r3, #1
 3e8:	e50b3008 	str	r3, [r11, #-8]
 3ec:	e51b3008 	ldr	r3, [r11, #-8]
 3f0:	e353004f 	cmp	r3, #79	; 0x4f
 3f4:	dafffff1 	ble	3c0 <test_char+0x2c>
int audio();

void test_char(){
	int x,y;
	char c = 0;
	for(y=0; y<=59; y++){
 3f8:	e51b300c 	ldr	r3, [r11, #-12]
 3fc:	e2833001 	add	r3, r3, #1
 400:	e50b300c 	str	r3, [r11, #-12]
 404:	e51b300c 	ldr	r3, [r11, #-12]
 408:	e353003b 	cmp	r3, #59	; 0x3b
 40c:	daffffe8 	ble	3b4 <test_char+0x20>
		for(x=0; x<=79;x++){
			VGA_write_char_ASM(x,y,c++);
		}	
	}
}
 410:	e24bd004 	sub	sp, r11, #4
 414:	e8bd8800 	pop	{r11, pc}

00000418 <test_byte>:

void test_byte(){
 418:	e92d4800 	push	{r11, lr}
 41c:	e28db004 	add	r11, sp, #4
 420:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c=0;
 424:	e3a03000 	mov	r3, #0
 428:	e54b300d 	strb	r3, [r11, #-13]
	
	for(y=0; y<=59; y++){
 42c:	e3a03000 	mov	r3, #0
 430:	e50b300c 	str	r3, [r11, #-12]
 434:	ea000013 	b	488 <test_byte+0x70>
		for(x=0;x<=79;x +=3){
 438:	e3a03000 	mov	r3, #0
 43c:	e50b3008 	str	r3, [r11, #-8]
 440:	ea00000a 	b	470 <test_byte+0x58>
			VGA_write_byte_ASM(x,y,c++);
 444:	e55b300d 	ldrb	r3, [r11, #-13]
 448:	e55b200d 	ldrb	r2, [r11, #-13]
 44c:	e2822001 	add	r2, r2, #1
 450:	e54b200d 	strb	r2, [r11, #-13]
 454:	e51b0008 	ldr	r0, [r11, #-8]
 458:	e51b100c 	ldr	r1, [r11, #-12]
 45c:	e1a02003 	mov	r2, r3
 460:	ebffffa1 	bl	2ec <VGA_write_byte_ASM>
void test_byte(){
	int x,y;
	char c=0;
	
	for(y=0; y<=59; y++){
		for(x=0;x<=79;x +=3){
 464:	e51b3008 	ldr	r3, [r11, #-8]
 468:	e2833003 	add	r3, r3, #3
 46c:	e50b3008 	str	r3, [r11, #-8]
 470:	e51b3008 	ldr	r3, [r11, #-8]
 474:	e353004f 	cmp	r3, #79	; 0x4f
 478:	dafffff1 	ble	444 <test_byte+0x2c>

void test_byte(){
	int x,y;
	char c=0;
	
	for(y=0; y<=59; y++){
 47c:	e51b300c 	ldr	r3, [r11, #-12]
 480:	e2833001 	add	r3, r3, #1
 484:	e50b300c 	str	r3, [r11, #-12]
 488:	e51b300c 	ldr	r3, [r11, #-12]
 48c:	e353003b 	cmp	r3, #59	; 0x3b
 490:	daffffe8 	ble	438 <test_byte+0x20>
		for(x=0;x<=79;x +=3){
			VGA_write_byte_ASM(x,y,c++);
		}
	}
} 
 494:	e24bd004 	sub	sp, r11, #4
 498:	e8bd8800 	pop	{r11, pc}

0000049c <test_pixel>:

void test_pixel(){
 49c:	e92d4800 	push	{r11, lr}
 4a0:	e28db004 	add	r11, sp, #4
 4a4:	e24dd010 	sub	sp, sp, #16
	int x,y;
	unsigned short color = 0;
 4a8:	e3a03000 	mov	r3, #0
 4ac:	e14b30be 	strh	r3, [r11, #-14]
	
	for(y=0; y<=239; y++){
 4b0:	e3a03000 	mov	r3, #0
 4b4:	e50b300c 	str	r3, [r11, #-12]
 4b8:	ea000015 	b	514 <test_pixel+0x78>
		for(x=0;x<=319;x++){
 4bc:	e3a03000 	mov	r3, #0
 4c0:	e50b3008 	str	r3, [r11, #-8]
 4c4:	ea00000b 	b	4f8 <test_pixel+0x5c>
			VGA_draw_point_ASM(x,y,color++);
 4c8:	e15b30be 	ldrh	r3, [r11, #-14]
 4cc:	e15b20be 	ldrh	r2, [r11, #-14]
 4d0:	e2822001 	add	r2, r2, #1
 4d4:	e14b20be 	strh	r2, [r11, #-14]
 4d8:	e6bf3073 	sxth	r3, r3
 4dc:	e51b0008 	ldr	r0, [r11, #-8]
 4e0:	e51b100c 	ldr	r1, [r11, #-12]
 4e4:	e1a02003 	mov	r2, r3
 4e8:	ebffff94 	bl	340 <VGA_draw_point_ASM>
void test_pixel(){
	int x,y;
	unsigned short color = 0;
	
	for(y=0; y<=239; y++){
		for(x=0;x<=319;x++){
 4ec:	e51b3008 	ldr	r3, [r11, #-8]
 4f0:	e2833001 	add	r3, r3, #1
 4f4:	e50b3008 	str	r3, [r11, #-8]
 4f8:	e51b2008 	ldr	r2, [r11, #-8]
 4fc:	e300313f 	movw	r3, #319	; 0x13f
 500:	e1520003 	cmp	r2, r3
 504:	daffffef 	ble	4c8 <test_pixel+0x2c>

void test_pixel(){
	int x,y;
	unsigned short color = 0;
	
	for(y=0; y<=239; y++){
 508:	e51b300c 	ldr	r3, [r11, #-12]
 50c:	e2833001 	add	r3, r3, #1
 510:	e50b300c 	str	r3, [r11, #-12]
 514:	e51b300c 	ldr	r3, [r11, #-12]
 518:	e35300ef 	cmp	r3, #239	; 0xef
 51c:	daffffe6 	ble	4bc <test_pixel+0x20>
		for(x=0;x<=319;x++){
			VGA_draw_point_ASM(x,y,color++);
		}
	}
}
 520:	e24bd004 	sub	sp, r11, #4
 524:	e8bd8800 	pop	{r11, pc}

00000528 <main>:

int main(){
 528:	e92d4800 	push	{r11, lr}
 52c:	e28db004 	add	r11, sp, #4
	//vga();
	keyboard();
 530:	eb000022 	bl	5c0 <keyboard>
	//audio();
	return 0;
 534:	e3a03000 	mov	r3, #0
}
 538:	e1a00003 	mov	r0, r3
 53c:	e8bd8800 	pop	{r11, pc}

00000540 <vga>:

int vga(){
 540:	e92d4800 	push	{r11, lr}
 544:	e28db004 	add	r11, sp, #4
 548:	ea000000 	b	550 <vga+0x10>
				break;
			case 3:			//Button 3
				VGA_clear_pixelbuff_ASM();
				break;
		};
	}
 54c:	e1a00000 	nop			; (mov r0, r0)
}

int vga(){
	
	while (1){
		switch (PB_data_is_pressed_ASM(read_PB_data_ASM())){
 550:	eb000094 	bl	7a8 <read_PB_data_ASM>
 554:	e1a03000 	mov	r3, r0
 558:	e6ef3073 	uxtb	r3, r3
 55c:	e1a00003 	mov	r0, r3
 560:	eb000093 	bl	7b4 <PB_data_is_pressed_ASM>
 564:	e1a03000 	mov	r3, r0
 568:	e3530003 	cmp	r3, #3
 56c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 570:	eafffff5 	b	54c <vga+0xc>
 574:	00000584 	.word	0x00000584
 578:	000005a4 	.word	0x000005a4
 57c:	000005ac 	.word	0x000005ac
 580:	000005b4 	.word	0x000005b4
			case 0:			//Button 0
				if (read_slider_switches_ASM() == 0)
 584:	eb0000c0 	bl	88c <read_slider_switches_ASM>
 588:	e1a03000 	mov	r3, r0
 58c:	e3530000 	cmp	r3, #0
 590:	1a000001 	bne	59c <vga+0x5c>
					test_char();
 594:	ebffff7e 	bl	394 <test_char>
				else
					test_byte();			//If any slider is on
				break;
 598:	ea000007 	b	5bc <vga+0x7c>
		switch (PB_data_is_pressed_ASM(read_PB_data_ASM())){
			case 0:			//Button 0
				if (read_slider_switches_ASM() == 0)
					test_char();
				else
					test_byte();			//If any slider is on
 59c:	ebffff9d 	bl	418 <test_byte>
				break;
 5a0:	ea000005 	b	5bc <vga+0x7c>
			case 1:			//Button 1
				test_pixel();
 5a4:	ebffffbc 	bl	49c <test_pixel>
				break;
 5a8:	ea000003 	b	5bc <vga+0x7c>
			case 2:			//Button 2
				VGA_clear_charbuff_ASM();
 5ac:	ebffff2a 	bl	25c <VGA_clear_charbuff_ASM>
				break;
 5b0:	ea000001 	b	5bc <vga+0x7c>
			case 3:			//Button 3
				VGA_clear_pixelbuff_ASM();
 5b4:	ebffff31 	bl	280 <VGA_clear_pixelbuff_ASM>
				break;
 5b8:	e1a00000 	nop			; (mov r0, r0)
		};
	}
 5bc:	eaffffe2 	b	54c <vga+0xc>

000005c0 <keyboard>:
	return 0;
} 

int keyboard(){
 5c0:	e92d4800 	push	{r11, lr}
 5c4:	e28db004 	add	r11, sp, #4
 5c8:	e24dd010 	sub	sp, sp, #16
	int x = 0; //x coord
 5cc:	e3a03000 	mov	r3, #0
 5d0:	e50b3008 	str	r3, [r11, #-8]
	int y = 0; //y coord
 5d4:	e3a03000 	mov	r3, #0
 5d8:	e50b300c 	str	r3, [r11, #-12]
	char c; //data held

	VGA_clear_charbuff_ASM();
 5dc:	ebffff1e 	bl	25c <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
 5e0:	ebffff26 	bl	280 <VGA_clear_pixelbuff_ASM>
 5e4:	ea000000 	b	5ec <keyboard+0x2c>
			}	
		
		}


	}
 5e8:	e1a00000 	nop			; (mov r0, r0)

	VGA_clear_charbuff_ASM();
	VGA_clear_pixelbuff_ASM();

	while(1){
		int isValid = read_PS2_data_ASM(&c);
 5ec:	e24b3011 	sub	r3, r11, #17
 5f0:	e1a00003 	mov	r0, r3
 5f4:	eb00005d 	bl	770 <read_PS2_data_ASM>
 5f8:	e50b0010 	str	r0, [r11, #-16]

		if(isValid){
 5fc:	e51b3010 	ldr	r3, [r11, #-16]
 600:	e3530000 	cmp	r3, #0
 604:	0afffff7 	beq	5e8 <keyboard+0x28>
			VGA_write_byte_ASM(x,y,c); //write to screen
 608:	e55b3011 	ldrb	r3, [r11, #-17]	; 0xffffffef
 60c:	e51b0008 	ldr	r0, [r11, #-8]
 610:	e51b100c 	ldr	r1, [r11, #-12]
 614:	e1a02003 	mov	r2, r3
 618:	ebffff33 	bl	2ec <VGA_write_byte_ASM>
			x+=3; //increment by 3 since a byte displays 2 chars and we need a 3rd one for a space
 61c:	e51b3008 	ldr	r3, [r11, #-8]
 620:	e2833003 	add	r3, r3, #3
 624:	e50b3008 	str	r3, [r11, #-8]

			if(x>79){ //if at the end of the screen horizontally
 628:	e51b3008 	ldr	r3, [r11, #-8]
 62c:	e353004f 	cmp	r3, #79	; 0x4f
 630:	da000004 	ble	648 <keyboard+0x88>
				x=0;
 634:	e3a03000 	mov	r3, #0
 638:	e50b3008 	str	r3, [r11, #-8]
				y+=1;
 63c:	e51b300c 	ldr	r3, [r11, #-12]
 640:	e2833001 	add	r3, r3, #1
 644:	e50b300c 	str	r3, [r11, #-12]
			}	
			if(y>59){ //check if vertically end of screen
 648:	e51b300c 	ldr	r3, [r11, #-12]
 64c:	e353003b 	cmp	r3, #59	; 0x3b
 650:	daffffe4 	ble	5e8 <keyboard+0x28>
				x=0;
 654:	e3a03000 	mov	r3, #0
 658:	e50b3008 	str	r3, [r11, #-8]
				y=0;
 65c:	e3a03000 	mov	r3, #0
 660:	e50b300c 	str	r3, [r11, #-12]
				VGA_clear_charbuff_ASM();
 664:	ebfffefc 	bl	25c <VGA_clear_charbuff_ASM>
			}	
		
		}


	}
 668:	eaffffde 	b	5e8 <keyboard+0x28>

0000066c <audio>:
}

int audio(){
 66c:	e92d4800 	push	{r11, lr}
 670:	e28db004 	add	r11, sp, #4
 674:	e24dd008 	sub	sp, sp, #8
	int s =0; //default sample rate = 48000samples/sec. We want 100Hz so 480 samples, split in half for 240 zeros and 1's 
 678:	e3a03000 	mov	r3, #0
 67c:	e50b3008 	str	r3, [r11, #-8]

	while(1){
		for(s = 0 ; s< 240; s++){ //write all 1s to audio
 680:	e3a03000 	mov	r3, #0
 684:	e50b3008 	str	r3, [r11, #-8]
 688:	ea00000a 	b	6b8 <audio+0x4c>
			if(write_int_audio_ASM(0x00FFFFFF) != 1){
 68c:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
 690:	eb00001d 	bl	70c <write_int_audio_ASM>
 694:	e1a03000 	mov	r3, r0
 698:	e3530001 	cmp	r3, #1
 69c:	0a000002 	beq	6ac <audio+0x40>
				s--; //decrement if empty
 6a0:	e51b3008 	ldr	r3, [r11, #-8]
 6a4:	e2433001 	sub	r3, r3, #1
 6a8:	e50b3008 	str	r3, [r11, #-8]

int audio(){
	int s =0; //default sample rate = 48000samples/sec. We want 100Hz so 480 samples, split in half for 240 zeros and 1's 

	while(1){
		for(s = 0 ; s< 240; s++){ //write all 1s to audio
 6ac:	e51b3008 	ldr	r3, [r11, #-8]
 6b0:	e2833001 	add	r3, r3, #1
 6b4:	e50b3008 	str	r3, [r11, #-8]
 6b8:	e51b3008 	ldr	r3, [r11, #-8]
 6bc:	e35300ef 	cmp	r3, #239	; 0xef
 6c0:	dafffff1 	ble	68c <audio+0x20>
			if(write_int_audio_ASM(0x00FFFFFF) != 1){
				s--; //decrement if empty
			}
		}
		
		for(s=0; s<240; s++){
 6c4:	e3a03000 	mov	r3, #0
 6c8:	e50b3008 	str	r3, [r11, #-8]
 6cc:	ea00000a 	b	6fc <audio+0x90>
			if(write_int_audio_ASM(0x00000000) != 1){ //write 0s to audio
 6d0:	e3a00000 	mov	r0, #0
 6d4:	eb00000c 	bl	70c <write_int_audio_ASM>
 6d8:	e1a03000 	mov	r3, r0
 6dc:	e3530001 	cmp	r3, #1
 6e0:	0a000002 	beq	6f0 <audio+0x84>
				s--; 
 6e4:	e51b3008 	ldr	r3, [r11, #-8]
 6e8:	e2433001 	sub	r3, r3, #1
 6ec:	e50b3008 	str	r3, [r11, #-8]
			if(write_int_audio_ASM(0x00FFFFFF) != 1){
				s--; //decrement if empty
			}
		}
		
		for(s=0; s<240; s++){
 6f0:	e51b3008 	ldr	r3, [r11, #-8]
 6f4:	e2833001 	add	r3, r3, #1
 6f8:	e50b3008 	str	r3, [r11, #-8]
 6fc:	e51b3008 	ldr	r3, [r11, #-8]
 700:	e35300ef 	cmp	r3, #239	; 0xef
 704:	dafffff1 	ble	6d0 <audio+0x64>
			if(write_int_audio_ASM(0x00000000) != 1){ //write 0s to audio
				s--; 
			}
		}
	}
 708:	eaffffdc 	b	680 <audio+0x14>

0000070c <write_int_audio_ASM>:
			.equ LEFT, 0xFF203048
			.equ RIGHT, 0xFF20304C
			.global write_int_audio_ASM

write_int_audio_ASM:
		PUSH {R1-R6, LR}
 70c:	e92d407e 	push	{r1, r2, r3, r4, r5, r6, lr}
		LDR R1, = FIFO //fifo location
 710:	e59f104c 	ldr	r1, [pc, #76]	; 764 <DONE+0x10>
		LDR R1, [R1] //get the value
 714:	e5911000 	ldr	r1, [r1]
		LSR R1, #16		//get wsrc by right shifting by 2^16 for the 16th bit
 718:	e1a01821 	lsr	r1, r1, #16
		LDRB R2, [R1]  //R2 holds the wsrc
 71c:	e5d12000 	ldrb	r2, [r1]
		LSR R1, #8		//get wlsc with a right shift of 2^8 to read the bits located at the bits 24-31
 720:	e1a01421 	lsr	r1, r1, #8
		LDRB R3, [R1]	//r3 has wlsc
 724:	e5d13000 	ldrb	r3, [r1]
		CMP R2, #0
 728:	e3520000 	cmp	r2, #0
		BEQ DONE 	//exit if there is no more space in wsrc
 72c:	0a000008 	beq	754 <DONE>
		CMP R3, #0
 730:	e3530000 	cmp	r3, #0
		BEQ DONE   //exit if no more space in wlsc
 734:	0a000006 	beq	754 <DONE>
		LDR R4, =LEFT	//left data
 738:	e59f4028 	ldr	r4, [pc, #40]	; 768 <DONE+0x14>
		LDR R5, =RIGHT //right data
 73c:	e59f5028 	ldr	r5, [pc, #40]	; 76c <DONE+0x18>
		STR R0, [R5]  //store r0 in right
 740:	e5850000 	str	r0, [r5]
		STR R0, [R4]  //store r0 in left
 744:	e5840000 	str	r0, [r4]
	
		MOV R0, #1	//set to 1 for the change
 748:	e3a00001 	mov	r0, #1
		POP {R1-R6, LR}
 74c:	e8bd407e 	pop	{r1, r2, r3, r4, r5, r6, lr}
		BX LR
 750:	e12fff1e 	bx	lr

00000754 <DONE>:

DONE:	MOV R0, #0	//there is no more space so set change to 0
 754:	e3a00000 	mov	r0, #0
		BX LR
 758:	e12fff1e 	bx	lr

		POP {R1-R6, LR}
 75c:	e8bd407e 	pop	{r1, r2, r3, r4, r5, r6, lr}
		BX LR
 760:	e12fff1e 	bx	lr
			.equ RIGHT, 0xFF20304C
			.global write_int_audio_ASM

write_int_audio_ASM:
		PUSH {R1-R6, LR}
		LDR R1, = FIFO //fifo location
 764:	ff203044 	.word	0xff203044
		LDRB R3, [R1]	//r3 has wlsc
		CMP R2, #0
		BEQ DONE 	//exit if there is no more space in wsrc
		CMP R3, #0
		BEQ DONE   //exit if no more space in wlsc
		LDR R4, =LEFT	//left data
 768:	ff203048 	.word	0xff203048
		LDR R5, =RIGHT //right data
 76c:	ff20304c 	.word	0xff20304c

00000770 <read_PS2_data_ASM>:
			.text
			.equ PS2DATA, 0xFF200100
			.global read_PS2_data_ASM

read_PS2_data_ASM:
		LDR R1, =PS2DATA 			//the data location
 770:	e59f102c 	ldr	r1, [pc, #44]	; 7a4 <INVALID+0x8>
		LDR R2, [R1]				//this puts the string of the data
 774:	e5912000 	ldr	r2, [r1]
		AND R4, R2, #0x8000 		//get rvalid by anding
 778:	e2024902 	and	r4, r2, #32768	; 0x8000
		CMP R4, #0					//check if the rvalid will be 0 or 1
 77c:	e3540000 	cmp	r4, #0
		BEQ INVALID  				//if 0 invalid branch
 780:	0a000005 	beq	79c <INVALID>
		B VALID						//if 1 valid branch
 784:	eaffffff 	b	788 <VALID>

00000788 <VALID>:

VALID:	
		MOV R4, #255				//Consider only 8 rightmost bits
 788:	e3a040ff 	mov	r4, #255	; 0xff
		AND R4, R2, R4 				//and ps2data 
 78c:	e0024004 	and	r4, r2, r4
		STRB R4, [R0]  				//data is stored 
 790:	e5c04000 	strb	r4, [r0]
		MOV R0, #1					//return 1
 794:	e3a00001 	mov	r0, #1
		BX LR
 798:	e12fff1e 	bx	lr

0000079c <INVALID>:

INVALID:
		MOV R0, #0 					//return 0
 79c:	e3a00000 	mov	r0, #0
		BX LR
 7a0:	e12fff1e 	bx	lr
			.text
			.equ PS2DATA, 0xFF200100
			.global read_PS2_data_ASM

read_PS2_data_ASM:
		LDR R1, =PS2DATA 			//the data location
 7a4:	ff200100 	.word	0xff200100

000007a8 <read_PB_data_ASM>:
			.global PB_edgecap_is_pressed_ASM
			.global	PB_clear_edgecp_ASM
			.global	enable_PB_INT_ASM
			.global disable_PB_INT_ASM //names and order from header files

read_PB_data_ASM:		LDR R1, =DATA
 7a8:	e59f10d0 	ldr	r1, [pc, #208]	; 880 <disable_PB_INT_ASM+0x18>
						LDR R0, [R1]
 7ac:	e5910000 	ldr	r0, [r1]
						BX LR
 7b0:	e12fff1e 	bx	lr

000007b4 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:	CMP R0, #8 //if pushbutton data is 8 branch
 7b4:	e3500008 	cmp	r0, #8
						BGE P3
 7b8:	aa000007 	bge	7dc <P3>
						CMP R0, #4 //if 4 branch
 7bc:	e3500004 	cmp	r0, #4
						BGE P2
 7c0:	aa000007 	bge	7e4 <P2>
						CMP R0, #2	//if 2 branch
 7c4:	e3500002 	cmp	r0, #2
						BGE P1
 7c8:	aa000007 	bge	7ec <P1>
						CMP R0, #1 //if 1 branch
 7cc:	e3500001 	cmp	r0, #1
						BGE P0
 7d0:	aa000007 	bge	7f4 <P0>
	
						MOV R0, #4 //else set to none
 7d4:	e3a00004 	mov	r0, #4
						BX LR
 7d8:	e12fff1e 	bx	lr

000007dc <P3>:

P3:						MOV R0, #3 //button 3
 7dc:	e3a00003 	mov	r0, #3
						BX LR
 7e0:	e12fff1e 	bx	lr

000007e4 <P2>:

P2:						MOV R0, #2 //button 2
 7e4:	e3a00002 	mov	r0, #2
						BX LR
 7e8:	e12fff1e 	bx	lr

000007ec <P1>:

P1:						MOV R0, #1 //button 1
 7ec:	e3a00001 	mov	r0, #1
						BX LR
 7f0:	e12fff1e 	bx	lr

000007f4 <P0>:

P0:						MOV R0, #0 //button 0
 7f4:	e3a00000 	mov	r0, #0
						BX LR
 7f8:	e12fff1e 	bx	lr

000007fc <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:	LDR R1, =EDGECAPTURE
 7fc:	e59f1080 	ldr	r1, [pc, #128]	; 884 <disable_PB_INT_ASM+0x1c>
						LDR R0, [R1]
 800:	e5910000 	ldr	r0, [r1]
						BX LR
 804:	e12fff1e 	bx	lr

00000808 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:	MOV R1, #4
 808:	e3a01004 	mov	r1, #4
							TST R0, #8
 80c:	e3100008 	tst	r0, #8
							MOVNE R1, #3
 810:	13a01003 	movne	r1, #3
							TST R0, #4
 814:	e3100004 	tst	r0, #4
							MOVNE R1, #2
 818:	13a01002 	movne	r1, #2
							TST R0, #2
 81c:	e3100002 	tst	r0, #2
							MOVNE R1, #1
 820:	13a01001 	movne	r1, #1
							TST R0, #1
 824:	e3100001 	tst	r0, #1
							MOVNE R1, #0
 828:	13a01000 	movne	r1, #0
							MOV R0, R1
 82c:	e1a00001 	mov	r0, r1
							BX LR
 830:	e12fff1e 	bx	lr

00000834 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:		LDR R1, =EDGECAPTURE
 834:	e59f1048 	ldr	r1, [pc, #72]	; 884 <disable_PB_INT_ASM+0x1c>
							MOV R2, #0xFFFFFFFF //clear all
 838:	e3e02000 	mvn	r2, #0
							STR R2, [R1]
 83c:	e5812000 	str	r2, [r1]
							BX LR
 840:	e12fff1e 	bx	lr

00000844 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:			LDR R1, =INTERRUPT
 844:	e59f103c 	ldr	r1, [pc, #60]	; 888 <disable_PB_INT_ASM+0x20>
							LDR R3, [R1]
 848:	e5913000 	ldr	r3, [r1]
							CMP R1, #0 			//if r1 is equal to 0 branch to store r0
 84c:	e3510000 	cmp	r1, #0
							BEQ STORE
 850:	0a000002 	beq	860 <STORE>
							ORR R2, R0, R3 //otherwise use orr to not change the values
 854:	e1802003 	orr	r2, r0, r3
							STR R2, [R1]	//and then store the result
 858:	e5812000 	str	r2, [r1]
							BX LR
 85c:	e12fff1e 	bx	lr

00000860 <STORE>:

STORE:						STR R0, [R1]
 860:	e5810000 	str	r0, [r1]
							BX LR
 864:	e12fff1e 	bx	lr

00000868 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:			LDR R1, =INTERRUPT
 868:	e59f1018 	ldr	r1, [pc, #24]	; 888 <disable_PB_INT_ASM+0x20>
							LDR R1, [R1]
 86c:	e5911000 	ldr	r1, [r1]
							MVN R0, R0  //complement r0
 870:	e1e00000 	mvn	r0, r0
							AND R0, R0, R1		//and it with r1 to remove the values which dont match
 874:	e0000001 	and	r0, r0, r1
							STR R0, [R1]
 878:	e5810000 	str	r0, [r1]
							BX LR
 87c:	e12fff1e 	bx	lr
			.global PB_edgecap_is_pressed_ASM
			.global	PB_clear_edgecp_ASM
			.global	enable_PB_INT_ASM
			.global disable_PB_INT_ASM //names and order from header files

read_PB_data_ASM:		LDR R1, =DATA
 880:	ff200050 	.word	0xff200050
						BX LR

P0:						MOV R0, #0 //button 0
						BX LR

read_PB_edgecap_ASM:	LDR R1, =EDGECAPTURE
 884:	ff20005c 	.word	0xff20005c
PB_clear_edgecp_ASM:		LDR R1, =EDGECAPTURE
							MOV R2, #0xFFFFFFFF //clear all
							STR R2, [R1]
							BX LR

enable_PB_INT_ASM:			LDR R1, =INTERRUPT
 888:	ff200058 	.word	0xff200058

0000088c <read_slider_switches_ASM>:
			.text
			.equ SW_BASE, 0xFF200040
			.global read_slider_switches_ASM

read_slider_switches_ASM:	LDR R1, =SW_BASE
 88c:	e59f1004 	ldr	r1, [pc, #4]	; 898 <read_slider_switches_ASM+0xc>
							LDR R0, [R1]
 890:	e5910000 	ldr	r0, [r1]
							BX LR
 894:	e12fff1e 	bx	lr
			.text
			.equ SW_BASE, 0xFF200040
			.global read_slider_switches_ASM

read_slider_switches_ASM:	LDR R1, =SW_BASE
 898:	ff200040 	.word	0xff200040

0000089c <atexit>:
 89c:	e1a01000 	mov	r1, r0
 8a0:	e3a00000 	mov	r0, #0
 8a4:	e92d4008 	push	{r3, lr}
 8a8:	e1a02000 	mov	r2, r0
 8ac:	e1a03000 	mov	r3, r0
 8b0:	eb00000e 	bl	8f0 <__register_exitproc>
 8b4:	e8bd4008 	pop	{r3, lr}
 8b8:	e12fff1e 	bx	lr

000008bc <exit>:
 8bc:	e92d4008 	push	{r3, lr}
 8c0:	e3a01000 	mov	r1, #0
 8c4:	e1a04000 	mov	r4, r0
 8c8:	eb000045 	bl	9e4 <__call_exitprocs>
 8cc:	e59f3018 	ldr	r3, [pc, #24]	; 8ec <exit+0x30>
 8d0:	e5930000 	ldr	r0, [r3]
 8d4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 8d8:	e3530000 	cmp	r3, #0
 8dc:	11a0e00f 	movne	lr, pc
 8e0:	112fff13 	bxne	r3
 8e4:	e1a00004 	mov	r0, r4
 8e8:	eb0000c9 	bl	c14 <_exit>
 8ec:	00000cd4 	.word	0x00000cd4

000008f0 <__register_exitproc>:
 8f0:	e59fc0e4 	ldr	r12, [pc, #228]	; 9dc <__register_exitproc+0xec>
 8f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8f8:	e59c4000 	ldr	r4, [r12]
 8fc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 900:	e35c0000 	cmp	r12, #0
 904:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 908:	e59c5004 	ldr	r5, [r12, #4]
 90c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 910:	e355001f 	cmp	r5, #31
 914:	e24dd010 	sub	sp, sp, #16
 918:	e1a06000 	mov	r6, r0
 91c:	da000015 	ble	978 <__register_exitproc+0x88>
 920:	e59f00b8 	ldr	r0, [pc, #184]	; 9e0 <__register_exitproc+0xf0>
 924:	e3500000 	cmp	r0, #0
 928:	1a000001 	bne	934 <__register_exitproc+0x44>
 92c:	e3e00000 	mvn	r0, #0
 930:	ea000018 	b	998 <__register_exitproc+0xa8>
 934:	e3a00e19 	mov	r0, #400	; 0x190
 938:	e58d100c 	str	r1, [sp, #12]
 93c:	e58d2008 	str	r2, [sp, #8]
 940:	e58d3004 	str	r3, [sp, #4]
 944:	e320f000 	nop	{0}
 948:	e250c000 	subs	r12, r0, #0
 94c:	e59d100c 	ldr	r1, [sp, #12]
 950:	e59d2008 	ldr	r2, [sp, #8]
 954:	e59d3004 	ldr	r3, [sp, #4]
 958:	0afffff3 	beq	92c <__register_exitproc+0x3c>
 95c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 960:	e3a00000 	mov	r0, #0
 964:	e58c0004 	str	r0, [r12, #4]
 968:	e58c5000 	str	r5, [r12]
 96c:	e584c148 	str	r12, [r4, #328]	; 0x148
 970:	e58c0188 	str	r0, [r12, #392]	; 0x188
 974:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 978:	e3560000 	cmp	r6, #0
 97c:	e59c4004 	ldr	r4, [r12, #4]
 980:	1a000007 	bne	9a4 <__register_exitproc+0xb4>
 984:	e2843002 	add	r3, r4, #2
 988:	e2844001 	add	r4, r4, #1
 98c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 990:	e58c4004 	str	r4, [r12, #4]
 994:	e3a00000 	mov	r0, #0
 998:	e28dd010 	add	sp, sp, #16
 99c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 9a0:	e12fff1e 	bx	lr
 9a4:	e3a00001 	mov	r0, #1
 9a8:	e1a00410 	lsl	r0, r0, r4
 9ac:	e08c8104 	add	r8, r12, r4, lsl #2
 9b0:	e3560002 	cmp	r6, #2
 9b4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 9b8:	e5883108 	str	r3, [r8, #264]	; 0x108
 9bc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 9c0:	e1877000 	orr	r7, r7, r0
 9c4:	01830000 	orreq	r0, r3, r0
 9c8:	e1a05008 	mov	r5, r8
 9cc:	e5882088 	str	r2, [r8, #136]	; 0x88
 9d0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 9d4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 9d8:	eaffffe9 	b	984 <__register_exitproc+0x94>
 9dc:	00000cd4 	.word	0x00000cd4
 9e0:	00000000 	.word	0x00000000

000009e4 <__call_exitprocs>:
 9e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 9e8:	e59f3168 	ldr	r3, [pc, #360]	; b58 <__call_exitprocs+0x174>
 9ec:	e5933000 	ldr	r3, [r3]
 9f0:	e24dd014 	sub	sp, sp, #20
 9f4:	e58d3004 	str	r3, [sp, #4]
 9f8:	e2833f52 	add	r3, r3, #328	; 0x148
 9fc:	e58d0008 	str	r0, [sp, #8]
 a00:	e58d300c 	str	r3, [sp, #12]
 a04:	e1a07001 	mov	r7, r1
 a08:	e3a08001 	mov	r8, #1
 a0c:	e59d3004 	ldr	r3, [sp, #4]
 a10:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 a14:	e3560000 	cmp	r6, #0
 a18:	e59db00c 	ldr	r11, [sp, #12]
 a1c:	0a000033 	beq	af0 <__call_exitprocs+0x10c>
 a20:	e5965004 	ldr	r5, [r6, #4]
 a24:	e2554001 	subs	r4, r5, #1
 a28:	5286a088 	addpl	r10, r6, #136	; 0x88
 a2c:	5285501f 	addpl	r5, r5, #31
 a30:	508a5105 	addpl	r5, r10, r5, lsl #2
 a34:	5a000007 	bpl	a58 <__call_exitprocs+0x74>
 a38:	ea000029 	b	ae4 <__call_exitprocs+0x100>
 a3c:	e5953000 	ldr	r3, [r5]
 a40:	e1530007 	cmp	r3, r7
 a44:	0a000005 	beq	a60 <__call_exitprocs+0x7c>
 a48:	e2444001 	sub	r4, r4, #1
 a4c:	e3740001 	cmn	r4, #1
 a50:	e2455004 	sub	r5, r5, #4
 a54:	0a000022 	beq	ae4 <__call_exitprocs+0x100>
 a58:	e3570000 	cmp	r7, #0
 a5c:	1afffff6 	bne	a3c <__call_exitprocs+0x58>
 a60:	e5963004 	ldr	r3, [r6, #4]
 a64:	e06a2005 	rsb	r2, r10, r5
 a68:	e2433001 	sub	r3, r3, #1
 a6c:	e0862002 	add	r2, r6, r2
 a70:	e1530004 	cmp	r3, r4
 a74:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 a78:	13a01000 	movne	r1, #0
 a7c:	05864004 	streq	r4, [r6, #4]
 a80:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 a84:	e3530000 	cmp	r3, #0
 a88:	0affffee 	beq	a48 <__call_exitprocs+0x64>
 a8c:	e1a02418 	lsl	r2, r8, r4
 a90:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a94:	e1120001 	tst	r2, r1
 a98:	e5969004 	ldr	r9, [r6, #4]
 a9c:	0a000016 	beq	afc <__call_exitprocs+0x118>
 aa0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 aa4:	e1120001 	tst	r2, r1
 aa8:	1a000016 	bne	b08 <__call_exitprocs+0x124>
 aac:	e59d0008 	ldr	r0, [sp, #8]
 ab0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 ab4:	e1a0e00f 	mov	lr, pc
 ab8:	e12fff13 	bx	r3
 abc:	e5963004 	ldr	r3, [r6, #4]
 ac0:	e1530009 	cmp	r3, r9
 ac4:	1affffd0 	bne	a0c <__call_exitprocs+0x28>
 ac8:	e59b3000 	ldr	r3, [r11]
 acc:	e1530006 	cmp	r3, r6
 ad0:	1affffcd 	bne	a0c <__call_exitprocs+0x28>
 ad4:	e2444001 	sub	r4, r4, #1
 ad8:	e3740001 	cmn	r4, #1
 adc:	e2455004 	sub	r5, r5, #4
 ae0:	1affffdc 	bne	a58 <__call_exitprocs+0x74>
 ae4:	e59f1070 	ldr	r1, [pc, #112]	; b5c <__call_exitprocs+0x178>
 ae8:	e3510000 	cmp	r1, #0
 aec:	1a000009 	bne	b18 <__call_exitprocs+0x134>
 af0:	e28dd014 	add	sp, sp, #20
 af4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 af8:	e12fff1e 	bx	lr
 afc:	e1a0e00f 	mov	lr, pc
 b00:	e12fff13 	bx	r3
 b04:	eaffffec 	b	abc <__call_exitprocs+0xd8>
 b08:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 b0c:	e1a0e00f 	mov	lr, pc
 b10:	e12fff13 	bx	r3
 b14:	eaffffe8 	b	abc <__call_exitprocs+0xd8>
 b18:	e5963004 	ldr	r3, [r6, #4]
 b1c:	e3530000 	cmp	r3, #0
 b20:	e5963000 	ldr	r3, [r6]
 b24:	1a000008 	bne	b4c <__call_exitprocs+0x168>
 b28:	e3530000 	cmp	r3, #0
 b2c:	0a000006 	beq	b4c <__call_exitprocs+0x168>
 b30:	e1a00006 	mov	r0, r6
 b34:	e58b3000 	str	r3, [r11]
 b38:	e320f000 	nop	{0}
 b3c:	e59b6000 	ldr	r6, [r11]
 b40:	e3560000 	cmp	r6, #0
 b44:	1affffb5 	bne	a20 <__call_exitprocs+0x3c>
 b48:	eaffffe8 	b	af0 <__call_exitprocs+0x10c>
 b4c:	e1a0b006 	mov	r11, r6
 b50:	e1a06003 	mov	r6, r3
 b54:	eafffff9 	b	b40 <__call_exitprocs+0x15c>
 b58:	00000cd4 	.word	0x00000cd4
 b5c:	00000000 	.word	0x00000000

00000b60 <register_fini>:
 b60:	e92d4008 	push	{r3, lr}
 b64:	e59f3010 	ldr	r3, [pc, #16]	; b7c <register_fini+0x1c>
 b68:	e3530000 	cmp	r3, #0
 b6c:	159f000c 	ldrne	r0, [pc, #12]	; b80 <register_fini+0x20>
 b70:	1bffff49 	blne	89c <atexit>
 b74:	e8bd4008 	pop	{r3, lr}
 b78:	e12fff1e 	bx	lr
 b7c:	00000cfc 	.word	0x00000cfc
 b80:	00000b84 	.word	0x00000b84

00000b84 <__libc_fini_array>:
 b84:	e92d4038 	push	{r3, r4, r5, lr}
 b88:	e59f5030 	ldr	r5, [pc, #48]	; bc0 <__libc_fini_array+0x3c>
 b8c:	e59f4030 	ldr	r4, [pc, #48]	; bc4 <__libc_fini_array+0x40>
 b90:	e0654004 	rsb	r4, r5, r4
 b94:	e1b04144 	asrs	r4, r4, #2
 b98:	10855104 	addne	r5, r5, r4, lsl #2
 b9c:	0a000004 	beq	bb4 <__libc_fini_array+0x30>
 ba0:	e5353004 	ldr	r3, [r5, #-4]!
 ba4:	e1a0e00f 	mov	lr, pc
 ba8:	e12fff13 	bx	r3
 bac:	e2544001 	subs	r4, r4, #1
 bb0:	1afffffa 	bne	ba0 <__libc_fini_array+0x1c>
 bb4:	eb000050 	bl	cfc <__libc_fini>
 bb8:	e8bd4038 	pop	{r3, r4, r5, lr}
 bbc:	e12fff1e 	bx	lr
 bc0:	00000d14 	.word	0x00000d14
 bc4:	00000d18 	.word	0x00000d18

00000bc8 <__cs3_premain>:
 bc8:	e92d4008 	push	{r3, lr}
 bcc:	eb00001d 	bl	c48 <__libc_init_array>
 bd0:	e59f3030 	ldr	r3, [pc, #48]	; c08 <__cs3_premain+0x40>
 bd4:	e3530000 	cmp	r3, #0
 bd8:	15930000 	ldrne	r0, [r3]
 bdc:	01a00003 	moveq	r0, r3
 be0:	e59f3024 	ldr	r3, [pc, #36]	; c0c <__cs3_premain+0x44>
 be4:	e3530000 	cmp	r3, #0
 be8:	15931000 	ldrne	r1, [r3]
 bec:	01a01003 	moveq	r1, r3
 bf0:	e3a02000 	mov	r2, #0
 bf4:	ebfffe4b 	bl	528 <main>
 bf8:	e59f3010 	ldr	r3, [pc, #16]	; c10 <__cs3_premain+0x48>
 bfc:	e3530000 	cmp	r3, #0
 c00:	1bffff2d 	blne	8bc <exit>
 c04:	eafffffe 	b	c04 <__cs3_premain+0x3c>
	...
 c10:	000008bc 	.word	0x000008bc

00000c14 <_exit>:
 c14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 c18:	e3a00018 	mov	r0, #24
 c1c:	e59f1004 	ldr	r1, [pc, #4]	; c28 <_exit+0x14>
 c20:	ef123456 	svc	0x00123456
 c24:	eafffffe 	b	c24 <_exit+0x10>
 c28:	00020026 	.word	0x00020026

00000c2c <__cs3_isr_interrupt>:
 c2c:	eafffffe 	b	c2c <__cs3_isr_interrupt>

00000c30 <__cs3_isr_undef>:
 c30:	eafffffe 	b	c30 <__cs3_isr_undef>

00000c34 <__cs3_isr_swi>:
 c34:	eafffffe 	b	c34 <__cs3_isr_swi>

00000c38 <__cs3_isr_pabort>:
 c38:	eafffffe 	b	c38 <__cs3_isr_pabort>

00000c3c <__cs3_isr_dabort>:
 c3c:	eafffffe 	b	c3c <__cs3_isr_dabort>

00000c40 <__cs3_isr_irq>:
 c40:	eafffffe 	b	c40 <__cs3_isr_irq>

00000c44 <__cs3_isr_fiq>:
 c44:	eafffffe 	b	c44 <__cs3_isr_fiq>

00000c48 <__libc_init_array>:
 c48:	e92d4070 	push	{r4, r5, r6, lr}
 c4c:	e59f506c 	ldr	r5, [pc, #108]	; cc0 <__libc_init_array+0x78>
 c50:	e59f606c 	ldr	r6, [pc, #108]	; cc4 <__libc_init_array+0x7c>
 c54:	e0656006 	rsb	r6, r5, r6
 c58:	e1b06146 	asrs	r6, r6, #2
 c5c:	12455004 	subne	r5, r5, #4
 c60:	13a04000 	movne	r4, #0
 c64:	0a000005 	beq	c80 <__libc_init_array+0x38>
 c68:	e5b53004 	ldr	r3, [r5, #4]!
 c6c:	e2844001 	add	r4, r4, #1
 c70:	e1a0e00f 	mov	lr, pc
 c74:	e12fff13 	bx	r3
 c78:	e1560004 	cmp	r6, r4
 c7c:	1afffff9 	bne	c68 <__libc_init_array+0x20>
 c80:	e59f5040 	ldr	r5, [pc, #64]	; cc8 <__libc_init_array+0x80>
 c84:	e59f6040 	ldr	r6, [pc, #64]	; ccc <__libc_init_array+0x84>
 c88:	e0656006 	rsb	r6, r5, r6
 c8c:	eb000012 	bl	cdc <_init>
 c90:	e1b06146 	asrs	r6, r6, #2
 c94:	12455004 	subne	r5, r5, #4
 c98:	13a04000 	movne	r4, #0
 c9c:	0a000005 	beq	cb8 <__libc_init_array+0x70>
 ca0:	e5b53004 	ldr	r3, [r5, #4]!
 ca4:	e2844001 	add	r4, r4, #1
 ca8:	e1a0e00f 	mov	lr, pc
 cac:	e12fff13 	bx	r3
 cb0:	e1560004 	cmp	r6, r4
 cb4:	1afffff9 	bne	ca0 <__libc_init_array+0x58>
 cb8:	e8bd4070 	pop	{r4, r5, r6, lr}
 cbc:	e12fff1e 	bx	lr
 cc0:	00000cf4 	.word	0x00000cf4
 cc4:	00000cf4 	.word	0x00000cf4
 cc8:	00000cf4 	.word	0x00000cf4
 ccc:	00000cfc 	.word	0x00000cfc

Disassembly of section .rodata:

00000cd4 <_global_impure_ptr>:
 cd4:	00000d40 00000043                       @...C...

00000cdc <_init>:
 cdc:	e1a0c00d 	mov	r12, sp
 ce0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ce4:	e24cb004 	sub	r11, r12, #4
 ce8:	e24bd028 	sub	sp, r11, #40	; 0x28
 cec:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 cf0:	e12fff1e 	bx	lr

00000cf4 <__init_array_start>:
 cf4:	00000b60 	.word	0x00000b60

00000cf8 <__frame_dummy_init_array_entry>:
 cf8:	00000208                                ....

00000cfc <__libc_fini>:
 cfc:	e1a0c00d 	mov	r12, sp
 d00:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d04:	e24cb004 	sub	r11, r12, #4
 d08:	e24bd028 	sub	sp, r11, #40	; 0x28
 d0c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 d10:	e12fff1e 	bx	lr

00000d14 <__fini_array_start>:
 d14:	000001c4 	.word	0x000001c4

00000d18 <__cs3_regions>:
 d18:	00000000 	.word	0x00000000
 d1c:	00000040 	.word	0x00000040
 d20:	00000040 	.word	0x00000040
 d24:	00001130 	.word	0x00001130
 d28:	00000020 	.word	0x00000020

00000d2c <__cs3_regions_end>:
 d2c:	00000000 	.word	0x00000000
