
D:/uni/5th semester/ecse324/labs/lab5/G53_Lab5/HEX_displays.s.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	c8 0d 00 00 d4 0d 00 00 e0 0d 00 00 ec 0d 00 00     ................
  30:	f8 0d 00 00 68 3f 00 00 70 0c 00 00 04 0e 00 00     ....h?..p.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x80>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x7c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x84>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x4c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x4c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x34>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x6c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x5c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0xc>
      d4:	eb000f6e 	bl	3e94 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00004080 	.word	0x00004080

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000336c8 	.word	0x000336c8

00000124 <__cs3_heap_start_ptr>:
     124:	00033728 	.word	0x00033728

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000336d0 	.word	0x000336d0
     170:	000336d3 	.word	0x000336d3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	000336d0 	.word	0x000336d0
     1bc:	000336d0 	.word	0x000336d0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000336d0 	.word	0x000336d0
     200:	00000000 	.word	0x00000000
     204:	00004004 	.word	0x00004004

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00004004 	.word	0x00004004
     250:	000336d4 	.word	0x000336d4
     254:	00004080 	.word	0x00004080
     258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
     25c:	e3a01000 	mov	r1, #0
     260:	ea000004 	b	278 <WRITE>

00000264 <HEX_flood_ASM>:
     264:	e3a0107f 	mov	r1, #127	; 0x7f
     268:	ea000002 	b	278 <WRITE>

0000026c <HEX_write_ASM>:
     26c:	e59f2064 	ldr	r2, [pc, #100]	; 2d8 <PATTERNS+0x14>
     270:	e7d21001 	ldrb	r1, [r2, r1]
     274:	eaffffff 	b	278 <WRITE>

00000278 <WRITE>:
     278:	e92d0030 	push	{r4, r5}
     27c:	e59f2058 	ldr	r2, [pc, #88]	; 2dc <PATTERNS+0x18>
     280:	e3a03000 	mov	r3, #0
     284:	e3e050ff 	mvn	r5, #255	; 0xff

00000288 <LOOP>:
     288:	e3100001 	tst	r0, #1
     28c:	0a000003 	beq	2a0 <CONTINUE>
     290:	e5924000 	ldr	r4, [r2]
     294:	e0044005 	and	r4, r4, r5
     298:	e1844001 	orr	r4, r4, r1
     29c:	e5824000 	str	r4, [r2]

000002a0 <CONTINUE>:
     2a0:	e1a05c65 	ror	r5, r5, #24
     2a4:	e1a01c61 	ror	r1, r1, #24
     2a8:	e2833001 	add	r3, r3, #1
     2ac:	e3530004 	cmp	r3, #4
     2b0:	059f2028 	ldreq	r2, [pc, #40]	; 2e0 <PATTERNS+0x1c>
     2b4:	e1b000a0 	lsrs	r0, r0, #1
     2b8:	1afffff2 	bne	288 <LOOP>
     2bc:	e8bd0030 	pop	{r4, r5}
     2c0:	e12fff1e 	bx	lr

000002c4 <PATTERNS>:
     2c4:	4f5b063f 	.word	0x4f5b063f
     2c8:	077d6d66 	.word	0x077d6d66
     2cc:	7c776f7f 	.word	0x7c776f7f
     2d0:	71795e39 	.word	0x71795e39
     2d4:	000000ff 	.word	0x000000ff
     2d8:	000002c4 	.word	0x000002c4
     2dc:	ff200020 	.word	0xff200020
     2e0:	ff200030 	.word	0xff200030

000002e4 <HPS_TIM_config_ASM>:
     2e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     2e8:	e3a01000 	mov	r1, #0
     2ec:	e3a02001 	mov	r2, #1
     2f0:	e5907000 	ldr	r7, [r0]
     2f4:	eaffffff 	b	2f8 <LOOP>

000002f8 <LOOP>:
     2f8:	e1170112 	tst	r7, r2, lsl r1
     2fc:	0a000000 	beq	304 <CONTINUE>
     300:	eb000004 	bl	318 <CONFIG>

00000304 <CONTINUE>:
     304:	e2811001 	add	r1, r1, #1
     308:	e3510004 	cmp	r1, #4
     30c:	bafffff9 	blt	2f8 <LOOP>

00000310 <DONE>:
     310:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     314:	e12fff1e 	bx	lr

00000318 <CONFIG>:
     318:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     31c:	e59f30e4 	ldr	r3, [pc, #228]	; 408 <HPS_TIM_BASE+0x10>
     320:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     324:	eb000005 	bl	340 <DISABLE>
     328:	eb000008 	bl	350 <SET_LOAD_VAL>
     32c:	eb00000e 	bl	36c <SET_LOAD_BIT>
     330:	eb000013 	bl	384 <SET_INT_BIT>
     334:	eb000019 	bl	3a0 <SET_EN_BIT>
     338:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     33c:	e12fff1e 	bx	lr

00000340 <DISABLE>:
     340:	e5945008 	ldr	r5, [r4, #8]
     344:	e3c55001 	bic	r5, r5, #1
     348:	e5845008 	str	r5, [r4, #8]
     34c:	e12fff1e 	bx	lr

00000350 <SET_LOAD_VAL>:
     350:	e5905004 	ldr	r5, [r0, #4]
     354:	e3a06019 	mov	r6, #25
     358:	e0050695 	mul	r5, r5, r6
     35c:	e3510002 	cmp	r1, #2
     360:	b1a05105 	lsllt	r5, r5, #2
     364:	e5845000 	str	r5, [r4]
     368:	e12fff1e 	bx	lr

0000036c <SET_LOAD_BIT>:
     36c:	e5945008 	ldr	r5, [r4, #8]
     370:	e5906008 	ldr	r6, [r0, #8]
     374:	e3c55002 	bic	r5, r5, #2
     378:	e1855086 	orr	r5, r5, r6, lsl #1
     37c:	e5845008 	str	r5, [r4, #8]
     380:	e12fff1e 	bx	lr

00000384 <SET_INT_BIT>:
     384:	e5945008 	ldr	r5, [r4, #8]
     388:	e590600c 	ldr	r6, [r0, #12]
     38c:	e2266001 	eor	r6, r6, #1
     390:	e3c55004 	bic	r5, r5, #4
     394:	e1855106 	orr	r5, r5, r6, lsl #2
     398:	e5845008 	str	r5, [r4, #8]
     39c:	e12fff1e 	bx	lr

000003a0 <SET_EN_BIT>:
     3a0:	e5945008 	ldr	r5, [r4, #8]
     3a4:	e5906010 	ldr	r6, [r0, #16]
     3a8:	e3c55001 	bic	r5, r5, #1
     3ac:	e1855006 	orr	r5, r5, r6
     3b0:	e5845008 	str	r5, [r4, #8]
     3b4:	e12fff1e 	bx	lr

000003b8 <HPS_TIM_clear_INT_ASM>:
     3b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     3bc:	e3a01000 	mov	r1, #0
     3c0:	e3a02001 	mov	r2, #1
     3c4:	eaffffff 	b	3c8 <INT_LOOP>

000003c8 <INT_LOOP>:
     3c8:	e1100112 	tst	r0, r2, lsl r1
     3cc:	0a000000 	beq	3d4 <INT_CONTINUE>
     3d0:	eb000004 	bl	3e8 <CLEAR_IT>

000003d4 <INT_CONTINUE>:
     3d4:	e2811001 	add	r1, r1, #1
     3d8:	e3510004 	cmp	r1, #4
     3dc:	bafffff9 	blt	3c8 <INT_LOOP>

000003e0 <INT_DONE>:
     3e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     3e4:	e12fff1e 	bx	lr

000003e8 <CLEAR_IT>:
     3e8:	e59f3018 	ldr	r3, [pc, #24]	; 408 <HPS_TIM_BASE+0x10>
     3ec:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     3f0:	e593300c 	ldr	r3, [r3, #12]
     3f4:	e12fff1e 	bx	lr

000003f8 <HPS_TIM_BASE>:
     3f8:	ffc08000 	.word	0xffc08000
     3fc:	ffc09000 	.word	0xffc09000
     400:	ffd00000 	.word	0xffd00000
     404:	ffd01000 	.word	0xffd01000
     408:	000003f8 	.word	0x000003f8

0000040c <hps_tim_flag>:
     40c:	00000000 	.word	0x00000000

00000410 <button_flag>:
     410:	00000004 	.word	0x00000004

00000414 <A9_PRIV_TIM_ISR>:

button_flag:
	.word 0x4

A9_PRIV_TIM_ISR:
	BX LR
     414:	e12fff1e 	bx	lr

00000418 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     418:	e12fff1e 	bx	lr

0000041c <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     41c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R0, #0x1
     420:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     424:	ebffffe3 	bl	3b8 <HPS_TIM_clear_INT_ASM>
	LDR R0, =hps_tim_flag
     428:	e59f005c 	ldr	r0, [pc, #92]	; 48c <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     42c:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     430:	e5801000 	str	r1, [r0]
	POP {LR}
     434:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     438:	e12fff1e 	bx	lr

0000043c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     43c:	e12fff1e 	bx	lr

00000440 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     440:	e12fff1e 	bx	lr

00000444 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     444:	e12fff1e 	bx	lr

00000448 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     448:	e12fff1e 	bx	lr

0000044c <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     44c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	BL read_PB_edgecap_ASM //read and display button pressed
     450:	eb00011a 	bl	8c0 <read_PB_edgecap_ASM>
	BL PB_edgecap_is_pressed_ASM
     454:	eb00011c 	bl	8cc <PB_edgecap_is_pressed_ASM>
	LDR R1, = button_flag
     458:	e59f1030 	ldr	r1, [pc, #48]	; 490 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]   //store button number
     45c:	e5810000 	str	r0, [r1]
	MOV R0, #15
     460:	e3a0000f 	mov	r0, #15
	BL PB_clear_edgecp_ASM //clear edgecap
     464:	eb00011e 	bl	8e4 <PB_clear_edgecp_ASM>
	POP {LR}
     468:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     46c:	e12fff1e 	bx	lr

00000470 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     470:	e12fff1e 	bx	lr

00000474 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     474:	e12fff1e 	bx	lr

00000478 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     478:	e12fff1e 	bx	lr

0000047c <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     47c:	e12fff1e 	bx	lr

00000480 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     480:	e12fff1e 	bx	lr

00000484 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     484:	e12fff1e 	bx	lr

00000488 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     488:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
	PUSH {LR}
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM
	LDR R0, =hps_tim_flag
     48c:	0000040c 	.word	0x0000040c
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
	BL read_PB_edgecap_ASM //read and display button pressed
	BL PB_edgecap_is_pressed_ASM
	LDR R1, = button_flag
     490:	00000410 	.word	0x00000410

00000494 <read_LEDs_ASM>:
     494:	e59f1010 	ldr	r1, [pc, #16]	; 4ac <write_LEDs_ASM+0xc>
     498:	e5910000 	ldr	r0, [r1]
     49c:	e12fff1e 	bx	lr

000004a0 <write_LEDs_ASM>:
     4a0:	e59f1004 	ldr	r1, [pc, #4]	; 4ac <write_LEDs_ASM+0xc>
     4a4:	e5810000 	str	r0, [r1]
     4a8:	e12fff1e 	bx	lr
     4ac:	ff200000 	.word	0xff200000

000004b0 <audio_read_data_ASM>:
     4b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     4b4:	e92d0003 	push	{r0, r1}
     4b8:	eb000093 	bl	70c <audio_read_ralc_ASM>
     4bc:	e3500000 	cmp	r0, #0
     4c0:	08bd0003 	popeq	{r0, r1}
     4c4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     4c8:	03a00000 	moveq	r0, #0
     4cc:	012fff1e 	bxeq	lr
     4d0:	eb000092 	bl	720 <audio_read_rarc_ASM>
     4d4:	e3500000 	cmp	r0, #0
     4d8:	08bd0003 	popeq	{r0, r1}
     4dc:	03a00000 	moveq	r0, #0
     4e0:	012fff1e 	bxeq	lr
     4e4:	e8bd0003 	pop	{r0, r1}
     4e8:	e59f2240 	ldr	r2, [pc, #576]	; 730 <audio_read_rarc_ASM+0x10>
     4ec:	e5922000 	ldr	r2, [r2]
     4f0:	e5802000 	str	r2, [r0]
     4f4:	e59f3238 	ldr	r3, [pc, #568]	; 734 <audio_read_rarc_ASM+0x14>
     4f8:	e5933000 	ldr	r3, [r3]
     4fc:	e5813000 	str	r3, [r1]
     500:	e3a00001 	mov	r0, #1

00000504 <audio_read_leftdata_ASM>:
     504:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     508:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     50c:	eb00007e 	bl	70c <audio_read_ralc_ASM>
     510:	e3500000 	cmp	r0, #0
     514:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     518:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     51c:	03a00000 	moveq	r0, #0
     520:	012fff1e 	bxeq	lr
     524:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     528:	e59f2200 	ldr	r2, [pc, #512]	; 730 <audio_read_rarc_ASM+0x10>
     52c:	e5922000 	ldr	r2, [r2]
     530:	e5802000 	str	r2, [r0]
     534:	e3a00001 	mov	r0, #1
     538:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     53c:	e12fff1e 	bx	lr

00000540 <audio_read_rightdata_ASM>:
     540:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     544:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     548:	eb000074 	bl	720 <audio_read_rarc_ASM>
     54c:	e3500000 	cmp	r0, #0
     550:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     554:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     558:	03a00000 	moveq	r0, #0
     55c:	012fff1e 	bxeq	lr
     560:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     564:	e59f21c8 	ldr	r2, [pc, #456]	; 734 <audio_read_rarc_ASM+0x14>
     568:	e5922000 	ldr	r2, [r2]
     56c:	e5802000 	str	r2, [r0]
     570:	e3a00001 	mov	r0, #1
     574:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     578:	e12fff1e 	bx	lr

0000057c <audio_write_data_ASM>:
     57c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     580:	e92d0003 	push	{r0, r1}
     584:	eb000056 	bl	6e4 <audio_read_wslc_ASM>
     588:	e3500000 	cmp	r0, #0
     58c:	08bd0003 	popeq	{r0, r1}
     590:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     594:	03a00000 	moveq	r0, #0
     598:	012fff1e 	bxeq	lr
     59c:	eb000055 	bl	6f8 <audio_read_wsrc_ASM>
     5a0:	e3500000 	cmp	r0, #0
     5a4:	08bd0003 	popeq	{r0, r1}
     5a8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     5ac:	03a00000 	moveq	r0, #0
     5b0:	012fff1e 	bxeq	lr
     5b4:	e8bd0003 	pop	{r0, r1}
     5b8:	e59f2170 	ldr	r2, [pc, #368]	; 730 <audio_read_rarc_ASM+0x10>
     5bc:	e5820000 	str	r0, [r2]
     5c0:	e59f316c 	ldr	r3, [pc, #364]	; 734 <audio_read_rarc_ASM+0x14>
     5c4:	e5831000 	str	r1, [r3]
     5c8:	e3a00001 	mov	r0, #1
     5cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     5d0:	e12fff1e 	bx	lr

000005d4 <audio_write_leftdata_ASM>:
     5d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     5d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     5dc:	eb000040 	bl	6e4 <audio_read_wslc_ASM>
     5e0:	e3500000 	cmp	r0, #0
     5e4:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     5e8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     5ec:	03a00000 	moveq	r0, #0
     5f0:	012fff1e 	bxeq	lr
     5f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     5f8:	e59f2130 	ldr	r2, [pc, #304]	; 730 <audio_read_rarc_ASM+0x10>
     5fc:	e5820000 	str	r0, [r2]
     600:	e3a00001 	mov	r0, #1
     604:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     608:	e12fff1e 	bx	lr

0000060c <audio_write_rightdata_ASM>:
     60c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     610:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     614:	eb000037 	bl	6f8 <audio_read_wsrc_ASM>
     618:	e3500000 	cmp	r0, #0
     61c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     620:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     624:	03a00000 	moveq	r0, #0
     628:	012fff1e 	bxeq	lr
     62c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     630:	e59f20fc 	ldr	r2, [pc, #252]	; 734 <audio_read_rarc_ASM+0x14>
     634:	e5820000 	str	r0, [r2]
     638:	e3a00001 	mov	r0, #1
     63c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     640:	e12fff1e 	bx	lr

00000644 <audio_enable_read_fifo_clear_ASM>:
     644:	e59f00ec 	ldr	r0, [pc, #236]	; 738 <audio_read_rarc_ASM+0x18>
     648:	e5901000 	ldr	r1, [r0]
     64c:	e3811004 	orr	r1, r1, #4
     650:	e5801000 	str	r1, [r0]
     654:	e12fff1e 	bx	lr

00000658 <audio_enable_write_fifo_clear_ASM>:
     658:	e59f00d8 	ldr	r0, [pc, #216]	; 738 <audio_read_rarc_ASM+0x18>
     65c:	e5901000 	ldr	r1, [r0]
     660:	e3811008 	orr	r1, r1, #8
     664:	e5801000 	str	r1, [r0]
     668:	e12fff1e 	bx	lr

0000066c <audio_disable_read_fifo_clear_ASM>:
     66c:	e59f00c4 	ldr	r0, [pc, #196]	; 738 <audio_read_rarc_ASM+0x18>
     670:	e5901000 	ldr	r1, [r0]
     674:	e3c11004 	bic	r1, r1, #4
     678:	e5801000 	str	r1, [r0]
     67c:	e12fff1e 	bx	lr

00000680 <audio_disable_write_fifo_clear_ASM>:
     680:	e59f00b0 	ldr	r0, [pc, #176]	; 738 <audio_read_rarc_ASM+0x18>
     684:	e5901000 	ldr	r1, [r0]
     688:	e3c11008 	bic	r1, r1, #8
     68c:	e5801000 	str	r1, [r0]
     690:	e12fff1e 	bx	lr

00000694 <audio_enable_read_int_ASM>:
     694:	e59f009c 	ldr	r0, [pc, #156]	; 738 <audio_read_rarc_ASM+0x18>
     698:	e5901000 	ldr	r1, [r0]
     69c:	e3811001 	orr	r1, r1, #1
     6a0:	e5801000 	str	r1, [r0]
     6a4:	e12fff1e 	bx	lr

000006a8 <audio_enable_write_int_ASM>:
     6a8:	e59f0088 	ldr	r0, [pc, #136]	; 738 <audio_read_rarc_ASM+0x18>
     6ac:	e5901000 	ldr	r1, [r0]
     6b0:	e3811002 	orr	r1, r1, #2
     6b4:	e5801000 	str	r1, [r0]
     6b8:	e12fff1e 	bx	lr

000006bc <audio_disable_read_int_ASM>:
     6bc:	e59f0074 	ldr	r0, [pc, #116]	; 738 <audio_read_rarc_ASM+0x18>
     6c0:	e5901000 	ldr	r1, [r0]
     6c4:	e3c11001 	bic	r1, r1, #1
     6c8:	e5801000 	str	r1, [r0]
     6cc:	e12fff1e 	bx	lr

000006d0 <audio_disable_write_int_ASM>:
     6d0:	e59f0060 	ldr	r0, [pc, #96]	; 738 <audio_read_rarc_ASM+0x18>
     6d4:	e5901000 	ldr	r1, [r0]
     6d8:	e3c11002 	bic	r1, r1, #2
     6dc:	e5801000 	str	r1, [r0]
     6e0:	e12fff1e 	bx	lr

000006e4 <audio_read_wslc_ASM>:
     6e4:	e59f0050 	ldr	r0, [pc, #80]	; 73c <audio_read_rarc_ASM+0x1c>
     6e8:	e5900000 	ldr	r0, [r0]
     6ec:	e1a00c20 	lsr	r0, r0, #24
     6f0:	e20000ff 	and	r0, r0, #255	; 0xff
     6f4:	e12fff1e 	bx	lr

000006f8 <audio_read_wsrc_ASM>:
     6f8:	e59f003c 	ldr	r0, [pc, #60]	; 73c <audio_read_rarc_ASM+0x1c>
     6fc:	e5900000 	ldr	r0, [r0]
     700:	e1a00820 	lsr	r0, r0, #16
     704:	e20000ff 	and	r0, r0, #255	; 0xff
     708:	e12fff1e 	bx	lr

0000070c <audio_read_ralc_ASM>:
     70c:	e59f0028 	ldr	r0, [pc, #40]	; 73c <audio_read_rarc_ASM+0x1c>
     710:	e5900000 	ldr	r0, [r0]
     714:	e1a00420 	lsr	r0, r0, #8
     718:	e20000ff 	and	r0, r0, #255	; 0xff
     71c:	e12fff1e 	bx	lr

00000720 <audio_read_rarc_ASM>:
     720:	e59f0014 	ldr	r0, [pc, #20]	; 73c <audio_read_rarc_ASM+0x1c>
     724:	e5900000 	ldr	r0, [r0]
     728:	e20000ff 	and	r0, r0, #255	; 0xff
     72c:	e12fff1e 	bx	lr
     730:	ff203048 	.word	0xff203048
     734:	ff20304c 	.word	0xff20304c
     738:	ff203040 	.word	0xff203040
     73c:	ff203044 	.word	0xff203044

00000740 <read_ps2_data_ASM>:
     740:	e59f114c 	ldr	r1, [pc, #332]	; 894 <ps2_fifo_ravail+0x4>
     744:	e5911000 	ldr	r1, [r1]
     748:	e3a02902 	mov	r2, #32768	; 0x8000
     74c:	e1110002 	tst	r1, r2
     750:	03a00000 	moveq	r0, #0
     754:	012fff1e 	bxeq	lr
     758:	e20120ff 	and	r2, r1, #255	; 0xff
     75c:	e5c02000 	strb	r2, [r0]
     760:	e59f2130 	ldr	r2, [pc, #304]	; 898 <ps2_fifo_ravail+0x8>
     764:	e0010002 	and	r0, r1, r2
     768:	e1a00820 	lsr	r0, r0, #16
     76c:	e12fff1e 	bx	lr

00000770 <enable_ps2_int_ASM>:
     770:	e59f011c 	ldr	r0, [pc, #284]	; 894 <ps2_fifo_ravail+0x4>
     774:	e3a01001 	mov	r1, #1
     778:	e5c01004 	strb	r1, [r0, #4]
     77c:	e12fff1e 	bx	lr

00000780 <disable_ps2_int_ASM>:
     780:	e59f010c 	ldr	r0, [pc, #268]	; 894 <ps2_fifo_ravail+0x4>
     784:	e3a01000 	mov	r1, #0
     788:	e5c01004 	strb	r1, [r0, #4]
     78c:	e12fff1e 	bx	lr

00000790 <ps2_fifo_data>:
	...

00000890 <ps2_fifo_ravail>:
     890:	00000000 	.word	0x00000000
     894:	ff200100 	.word	0xff200100
     898:	ffff0000 	.word	0xffff0000

0000089c <read_PB_data_ASM>:
     89c:	e59f1074 	ldr	r1, [pc, #116]	; 918 <disable_PB_INT_ASM+0x14>
     8a0:	e5910000 	ldr	r0, [r1]
     8a4:	e12fff1e 	bx	lr

000008a8 <PB_data_is_pressed_ASM>:
     8a8:	e59f1068 	ldr	r1, [pc, #104]	; 918 <disable_PB_INT_ASM+0x14>
     8ac:	e5912000 	ldr	r2, [r1]
     8b0:	e0000002 	and	r0, r0, r2
     8b4:	e3300000 	teq	r0, #0
     8b8:	13a00001 	movne	r0, #1
     8bc:	e12fff1e 	bx	lr

000008c0 <read_PB_edgecap_ASM>:
     8c0:	e59f1054 	ldr	r1, [pc, #84]	; 91c <disable_PB_INT_ASM+0x18>
     8c4:	e5910000 	ldr	r0, [r1]
     8c8:	e12fff1e 	bx	lr

000008cc <PB_edgecap_is_pressed_ASM>:
     8cc:	e59f1048 	ldr	r1, [pc, #72]	; 91c <disable_PB_INT_ASM+0x18>
     8d0:	e5912000 	ldr	r2, [r1]
     8d4:	e0000002 	and	r0, r0, r2
     8d8:	e3300000 	teq	r0, #0
     8dc:	13a00001 	movne	r0, #1
     8e0:	e12fff1e 	bx	lr

000008e4 <PB_clear_edgecp_ASM>:
     8e4:	e59f1030 	ldr	r1, [pc, #48]	; 91c <disable_PB_INT_ASM+0x18>
     8e8:	e5810000 	str	r0, [r1]
     8ec:	e12fff1e 	bx	lr

000008f0 <enable_PB_INT_ASM>:
     8f0:	e59f1028 	ldr	r1, [pc, #40]	; 920 <disable_PB_INT_ASM+0x1c>
     8f4:	e5912000 	ldr	r2, [r1]
     8f8:	e1800002 	orr	r0, r0, r2
     8fc:	e5810000 	str	r0, [r1]
     900:	e12fff1e 	bx	lr

00000904 <disable_PB_INT_ASM>:
     904:	e59f1014 	ldr	r1, [pc, #20]	; 920 <disable_PB_INT_ASM+0x1c>
     908:	e5912000 	ldr	r2, [r1]
     90c:	e1c00002 	bic	r0, r0, r2
     910:	e5810000 	str	r0, [r1]
     914:	e12fff1e 	bx	lr
     918:	ff200050 	.word	0xff200050
     91c:	ff20005c 	.word	0xff20005c
     920:	ff200058 	.word	0xff200058

00000924 <read_slider_switches_ASM>:
     924:	e59f1004 	ldr	r1, [pc, #4]	; 930 <read_slider_switches_ASM+0xc>
     928:	e5910000 	ldr	r0, [r1]
     92c:	e12fff1e 	bx	lr
     930:	ff200040 	.word	0xff200040

00000934 <VGA_clear_charbuff_ASM>:
     934:	e92d0030 	push	{r4, r5}
     938:	e3a02000 	mov	r2, #0
     93c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     940:	e3a00000 	mov	r0, #0

00000944 <CHAR_LOOPX>:
     944:	e3a01000 	mov	r1, #0
     948:	e0834000 	add	r4, r3, r0

0000094c <CHAR_LOOPY>:
     94c:	e0845381 	add	r5, r4, r1, lsl #7
     950:	e5c52000 	strb	r2, [r5]
     954:	e2811001 	add	r1, r1, #1
     958:	e351003c 	cmp	r1, #60	; 0x3c
     95c:	bafffffa 	blt	94c <CHAR_LOOPY>
     960:	e2800001 	add	r0, r0, #1
     964:	e3500050 	cmp	r0, #80	; 0x50
     968:	bafffff5 	blt	944 <CHAR_LOOPX>
     96c:	e8bd0030 	pop	{r4, r5}
     970:	e12fff1e 	bx	lr

00000974 <VGA_clear_pixelbuff_ASM>:
     974:	e92d0030 	push	{r4, r5}
     978:	e3a02000 	mov	r2, #0
     97c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     980:	e3a00000 	mov	r0, #0

00000984 <PIXEL_LOOPX>:
     984:	e3a01000 	mov	r1, #0
     988:	e0834080 	add	r4, r3, r0, lsl #1

0000098c <PIXEL_LOOPY>:
     98c:	e0845501 	add	r5, r4, r1, lsl #10
     990:	e1c520b0 	strh	r2, [r5]
     994:	e2811001 	add	r1, r1, #1
     998:	e35100f0 	cmp	r1, #240	; 0xf0
     99c:	bafffffa 	blt	98c <PIXEL_LOOPY>
     9a0:	e2800001 	add	r0, r0, #1
     9a4:	e3500d05 	cmp	r0, #320	; 0x140
     9a8:	bafffff5 	blt	984 <PIXEL_LOOPX>
     9ac:	e8bd0030 	pop	{r4, r5}
     9b0:	e12fff1e 	bx	lr

000009b4 <VGA_write_char_ASM>:
     9b4:	e3500000 	cmp	r0, #0
     9b8:	b12fff1e 	bxlt	lr
     9bc:	e3510000 	cmp	r1, #0
     9c0:	b12fff1e 	bxlt	lr
     9c4:	e350004f 	cmp	r0, #79	; 0x4f
     9c8:	c12fff1e 	bxgt	lr
     9cc:	e351003b 	cmp	r1, #59	; 0x3b
     9d0:	c12fff1e 	bxgt	lr
     9d4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     9d8:	e0833000 	add	r3, r3, r0
     9dc:	e0833381 	add	r3, r3, r1, lsl #7
     9e0:	e5c32000 	strb	r2, [r3]
     9e4:	e12fff1e 	bx	lr

000009e8 <VGA_write_byte_ASM>:
     9e8:	e3500000 	cmp	r0, #0
     9ec:	b12fff1e 	bxlt	lr
     9f0:	e3510000 	cmp	r1, #0
     9f4:	b12fff1e 	bxlt	lr
     9f8:	e350004e 	cmp	r0, #78	; 0x4e
     9fc:	c12fff1e 	bxgt	lr
     a00:	e351003b 	cmp	r1, #59	; 0x3b
     a04:	c12fff1e 	bxgt	lr
     a08:	e92d0030 	push	{r4, r5}
     a0c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     a10:	e20250f0 	and	r5, r2, #240	; 0xf0
     a14:	e1a05225 	lsr	r5, r5, #4
     a18:	e202400f 	and	r4, r2, #15
     a1c:	e59f2068 	ldr	r2, [pc, #104]	; a8c <HEX_ASCII+0x10>
     a20:	e7d25005 	ldrb	r5, [r2, r5]
     a24:	e7d24004 	ldrb	r4, [r2, r4]
     a28:	e0833000 	add	r3, r3, r0
     a2c:	e0833381 	add	r3, r3, r1, lsl #7
     a30:	e5c35000 	strb	r5, [r3]
     a34:	e2833001 	add	r3, r3, #1
     a38:	e5c34000 	strb	r4, [r3]
     a3c:	e8bd0030 	pop	{r4, r5}
     a40:	e12fff1e 	bx	lr

00000a44 <VGA_draw_point_ASM>:
     a44:	e59f3044 	ldr	r3, [pc, #68]	; a90 <HEX_ASCII+0x14>
     a48:	e3500000 	cmp	r0, #0
     a4c:	b12fff1e 	bxlt	lr
     a50:	e3510000 	cmp	r1, #0
     a54:	b12fff1e 	bxlt	lr
     a58:	e1500003 	cmp	r0, r3
     a5c:	c12fff1e 	bxgt	lr
     a60:	e35100ef 	cmp	r1, #239	; 0xef
     a64:	c12fff1e 	bxgt	lr
     a68:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     a6c:	e0833080 	add	r3, r3, r0, lsl #1
     a70:	e0833501 	add	r3, r3, r1, lsl #10
     a74:	e1c320b0 	strh	r2, [r3]
     a78:	e12fff1e 	bx	lr

00000a7c <HEX_ASCII>:
     a7c:	33323130 	.word	0x33323130
     a80:	37363534 	.word	0x37363534
     a84:	42413938 	.word	0x42413938
     a88:	46454443 	.word	0x46454443
     a8c:	00000a7c 	.word	0x00000a7c
     a90:	0000013f 	.word	0x0000013f

00000a94 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     a94:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a98:	e28db000 	add	r11, sp, #0
     a9c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     aa0:	e3a030d3 	mov	r3, #211	; 0xd3
     aa4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     aa8:	e51b3008 	ldr	r3, [r11, #-8]
     aac:	e129f003 	msr	CPSR_fc, r3
}
     ab0:	e28bd000 	add	sp, r11, #0
     ab4:	e8bd0800 	ldmfd	sp!, {r11}
     ab8:	e12fff1e 	bx	lr

00000abc <enable_A9_interrupts>:

void enable_A9_interrupts() {
     abc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ac0:	e28db000 	add	r11, sp, #0
     ac4:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     ac8:	e3a03053 	mov	r3, #83	; 0x53
     acc:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     ad0:	e51b3008 	ldr	r3, [r11, #-8]
     ad4:	e129f003 	msr	CPSR_fc, r3
}
     ad8:	e28bd000 	add	sp, r11, #0
     adc:	e8bd0800 	ldmfd	sp!, {r11}
     ae0:	e12fff1e 	bx	lr

00000ae4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     ae4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ae8:	e28db000 	add	r11, sp, #0
     aec:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     af0:	e3e03007 	mvn	r3, #7
     af4:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     af8:	e3a030d2 	mov	r3, #210	; 0xd2
     afc:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     b00:	e51b300c 	ldr	r3, [r11, #-12]
     b04:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     b08:	e51b3008 	ldr	r3, [r11, #-8]
     b0c:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     b10:	e3a030d3 	mov	r3, #211	; 0xd3
     b14:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     b18:	e51b300c 	ldr	r3, [r11, #-12]
     b1c:	e129f003 	msr	CPSR_fc, r3
}
     b20:	e28bd000 	add	sp, r11, #0
     b24:	e8bd0800 	ldmfd	sp!, {r11}
     b28:	e12fff1e 	bx	lr

00000b2c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     b2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b30:	e28db000 	add	r11, sp, #0
     b34:	e24dd01c 	sub	sp, sp, #28
     b38:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     b3c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     b40:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b44:	e1a031c3 	asr	r3, r3, #3
     b48:	e3c33003 	bic	r3, r3, #3
     b4c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     b50:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b54:	e203301f 	and	r3, r3, #31
     b58:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     b5c:	e3a02001 	mov	r2, #1
     b60:	e51b300c 	ldr	r3, [r11, #-12]
     b64:	e1a03312 	lsl	r3, r2, r3
     b68:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     b6c:	e51b3008 	ldr	r3, [r11, #-8]
     b70:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     b74:	e2433c03 	sub	r3, r3, #768	; 0x300
     b78:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     b7c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b80:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     b84:	e5921000 	ldr	r1, [r2]
     b88:	e51b2010 	ldr	r2, [r11, #-16]
     b8c:	e1812002 	orr	r2, r1, r2
     b90:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     b94:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b98:	e3c33003 	bic	r3, r3, #3
     b9c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     ba0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     ba4:	e2033003 	and	r3, r3, #3
     ba8:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     bac:	e51b2008 	ldr	r2, [r11, #-8]
     bb0:	e51b300c 	ldr	r3, [r11, #-12]
     bb4:	e0823003 	add	r3, r2, r3
     bb8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     bbc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     bc0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     bc4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     bc8:	e6ef2072 	uxtb	r2, r2
     bcc:	e5c32000 	strb	r2, [r3]
}
     bd0:	e28bd000 	add	sp, r11, #0
     bd4:	e8bd0800 	ldmfd	sp!, {r11}
     bd8:	e12fff1e 	bx	lr

00000bdc <config_GIC>:

void config_GIC(int len, int* IDs) {
     bdc:	e92d4800 	push	{r11, lr}
     be0:	e28db004 	add	r11, sp, #4
     be4:	e24dd010 	sub	sp, sp, #16
     be8:	e50b0010 	str	r0, [r11, #-16]
     bec:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     bf0:	e3a03000 	mov	r3, #0
     bf4:	e50b3008 	str	r3, [r11, #-8]
     bf8:	ea00000a 	b	c28 <ICDICFR+0x28>
		config_interrupt(IDs[i],1);
     bfc:	e51b3008 	ldr	r3, [r11, #-8]
     c00:	e1a03103 	lsl	r3, r3, #2
     c04:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     c08:	e0823003 	add	r3, r2, r3
     c0c:	e5933000 	ldr	r3, [r3]
     c10:	e1a00003 	mov	r0, r3
     c14:	e3a01001 	mov	r1, #1
     c18:	ebffffc3 	bl	b2c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     c1c:	e51b3008 	ldr	r3, [r11, #-8]
     c20:	e2833001 	add	r3, r3, #1
     c24:	e50b3008 	str	r3, [r11, #-8]
     c28:	e51b2008 	ldr	r2, [r11, #-8]
     c2c:	e51b3010 	ldr	r3, [r11, #-16]
     c30:	e1520003 	cmp	r2, r3
     c34:	bafffff0 	blt	bfc <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     c38:	e30c3104 	movw	r3, #49412	; 0xc104
     c3c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c40:	e30f2fff 	movw	r2, #65535	; 0xffff
     c44:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     c48:	e3a03cc1 	mov	r3, #49408	; 0xc100
     c4c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c50:	e3a02001 	mov	r2, #1
     c54:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     c58:	e3a03a0d 	mov	r3, #53248	; 0xd000
     c5c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c60:	e3a02001 	mov	r2, #1
     c64:	e5832000 	str	r2, [r3]
}
     c68:	e24bd004 	sub	sp, r11, #4
     c6c:	e8bd8800 	pop	{r11, pc}

00000c70 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     c70:	e24ee004 	sub	lr, lr, #4
     c74:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     c78:	e28db018 	add	r11, sp, #24
     c7c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     c80:	e30c310c 	movw	r3, #49420	; 0xc10c
     c84:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c88:	e5933000 	ldr	r3, [r3]
     c8c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     c90:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     c94:	e3530053 	cmp	r3, #83	; 0x53
     c98:	0a00003d 	beq	d94 <__cs3_isr_irq+0x124>
     c9c:	e3530053 	cmp	r3, #83	; 0x53
     ca0:	ca000011 	bgt	cec <__cs3_isr_irq+0x7c>
     ca4:	e353004e 	cmp	r3, #78	; 0x4e
     ca8:	0a000031 	beq	d74 <__cs3_isr_irq+0x104>
     cac:	e353004e 	cmp	r3, #78	; 0x4e
     cb0:	ca000006 	bgt	cd0 <__cs3_isr_irq+0x60>
     cb4:	e3530048 	cmp	r3, #72	; 0x48
     cb8:	0a000029 	beq	d64 <__cs3_isr_irq+0xf4>
     cbc:	e3530049 	cmp	r3, #73	; 0x49
     cc0:	0a000029 	beq	d6c <__cs3_isr_irq+0xfc>
     cc4:	e353001d 	cmp	r3, #29
     cc8:	0a000019 	beq	d34 <__cs3_isr_irq+0xc4>
     ccc:	ea000036 	b	dac <__cs3_isr_irq+0x13c>
     cd0:	e3530050 	cmp	r3, #80	; 0x50
     cd4:	0a00002a 	beq	d84 <__cs3_isr_irq+0x114>
     cd8:	e3530050 	cmp	r3, #80	; 0x50
     cdc:	ba000026 	blt	d7c <__cs3_isr_irq+0x10c>
     ce0:	e3530051 	cmp	r3, #81	; 0x51
     ce4:	0a000028 	beq	d8c <__cs3_isr_irq+0x11c>
     ce8:	ea00002f 	b	dac <__cs3_isr_irq+0x13c>
     cec:	e35300c7 	cmp	r3, #199	; 0xc7
     cf0:	0a000013 	beq	d44 <__cs3_isr_irq+0xd4>
     cf4:	e35300c7 	cmp	r3, #199	; 0xc7
     cf8:	ca000006 	bgt	d18 <__cs3_isr_irq+0xa8>
     cfc:	e3530059 	cmp	r3, #89	; 0x59
     d00:	0a000027 	beq	da4 <__cs3_isr_irq+0x134>
     d04:	e35300c5 	cmp	r3, #197	; 0xc5
     d08:	0a00000b 	beq	d3c <__cs3_isr_irq+0xcc>
     d0c:	e3530054 	cmp	r3, #84	; 0x54
     d10:	0a000021 	beq	d9c <__cs3_isr_irq+0x12c>
     d14:	ea000024 	b	dac <__cs3_isr_irq+0x13c>
     d18:	e35300c9 	cmp	r3, #201	; 0xc9
     d1c:	0a00000c 	beq	d54 <__cs3_isr_irq+0xe4>
     d20:	e35300c9 	cmp	r3, #201	; 0xc9
     d24:	ba000008 	blt	d4c <__cs3_isr_irq+0xdc>
     d28:	e35300ca 	cmp	r3, #202	; 0xca
     d2c:	0a00000a 	beq	d5c <__cs3_isr_irq+0xec>
     d30:	ea00001d 	b	dac <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     d34:	ebfffdb6 	bl	414 <A9_PRIV_TIM_ISR>
     d38:	ea00001c 	b	db0 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     d3c:	ebfffdb5 	bl	418 <HPS_GPIO1_ISR>
     d40:	ea00001a 	b	db0 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     d44:	ebfffdb4 	bl	41c <HPS_TIM0_ISR>
     d48:	ea000018 	b	db0 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     d4c:	ebfffdba 	bl	43c <HPS_TIM1_ISR>
     d50:	ea000016 	b	db0 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     d54:	ebfffdb9 	bl	440 <HPS_TIM2_ISR>
     d58:	ea000014 	b	db0 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     d5c:	ebfffdb8 	bl	444 <HPS_TIM3_ISR>
     d60:	ea000012 	b	db0 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     d64:	ebfffdb7 	bl	448 <FPGA_INTERVAL_TIM_ISR>
     d68:	ea000010 	b	db0 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     d6c:	ebfffdb6 	bl	44c <FPGA_PB_KEYS_ISR>
     d70:	ea00000e 	b	db0 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     d74:	ebfffdbd 	bl	470 <FPGA_Audio_ISR>
     d78:	ea00000c 	b	db0 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     d7c:	ebfffdbc 	bl	474 <FPGA_PS2_ISR>
     d80:	ea00000a 	b	db0 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     d84:	ebfffdbb 	bl	478 <FPGA_JTAG_ISR>
     d88:	ea000008 	b	db0 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     d8c:	ebfffdba 	bl	47c <FPGA_IrDA_ISR>
     d90:	ea000006 	b	db0 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     d94:	ebfffdb9 	bl	480 <FPGA_JP1_ISR>
     d98:	ea000004 	b	db0 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     d9c:	ebfffdb8 	bl	484 <FPGA_JP2_ISR>
     da0:	ea000002 	b	db0 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     da4:	ebfffdb7 	bl	488 <FPGA_PS2_DUAL_ISR>
     da8:	ea000000 	b	db0 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     dac:	eafffffe 	b	dac <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     db0:	e30c3110 	movw	r3, #49424	; 0xc110
     db4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     db8:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     dbc:	e5832000 	str	r2, [r3]
}
     dc0:	e24bd018 	sub	sp, r11, #24
     dc4:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000dc8 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     dc8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dcc:	e28db000 	add	r11, sp, #0
	while(1);
     dd0:	eafffffe 	b	dd0 <__cs3_reset+0x8>

00000dd4 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     dd4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dd8:	e28db000 	add	r11, sp, #0
	while(1);
     ddc:	eafffffe 	b	ddc <__cs3_isr_undef+0x8>

00000de0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     de0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     de4:	e28db000 	add	r11, sp, #0
	while(1);
     de8:	eafffffe 	b	de8 <__cs3_isr_swi+0x8>

00000dec <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     dec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     df0:	e28db000 	add	r11, sp, #0
	while(1);
     df4:	eafffffe 	b	df4 <__cs3_isr_pabort+0x8>

00000df8 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     df8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dfc:	e28db000 	add	r11, sp, #0
	while(1);
     e00:	eafffffe 	b	e00 <__cs3_isr_dabort+0x8>

00000e04 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     e04:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e08:	e28db000 	add	r11, sp, #0
	while(1);
     e0c:	eafffffe 	b	e0c <__cs3_isr_fiq+0x8>

00000e10 <fix_bug>:
}

void fix_bug() {
     e10:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e14:	e28db000 	add	r11, sp, #0
     e18:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     e1c:	e30d3198 	movw	r3, #53656	; 0xd198
     e20:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e24:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     e28:	e51b3008 	ldr	r3, [r11, #-8]
     e2c:	e3a02703 	mov	r2, #786432	; 0xc0000
     e30:	e5832000 	str	r2, [r3]
}
     e34:	e28bd000 	add	sp, r11, #0
     e38:	e8bd0800 	ldmfd	sp!, {r11}
     e3c:	e12fff1e 	bx	lr

00000e40 <int_setup>:

void int_setup(int len, int* IDs) {
     e40:	e92d4800 	push	{r11, lr}
     e44:	e28db004 	add	r11, sp, #4
     e48:	e24dd008 	sub	sp, sp, #8
     e4c:	e50b0008 	str	r0, [r11, #-8]
     e50:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     e54:	ebffff0e 	bl	a94 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     e58:	ebffff21 	bl	ae4 <set_A9_IRQ_stack>
	fix_bug();
     e5c:	ebffffeb 	bl	e10 <fix_bug>
	config_GIC(len, IDs);
     e60:	e51b0008 	ldr	r0, [r11, #-8]
     e64:	e51b100c 	ldr	r1, [r11, #-12]
     e68:	ebffff5b 	bl	bdc <config_GIC>
	enable_A9_interrupts();
     e6c:	ebffff12 	bl	abc <enable_A9_interrupts>
}
     e70:	e24bd004 	sub	sp, r11, #4
     e74:	e8bd8800 	pop	{r11, pc}

00000e78 <makeWave>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/slider_switches.h"

float makeWave(float f, int t){
     e78:	e92d4830 	push	{r4, r5, r11, lr}
     e7c:	e28db00c 	add	r11, sp, #12
     e80:	e24dd018 	sub	sp, sp, #24
     e84:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
     e88:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
	
	//index = (f*t) mod 48000, index can have decimals
	int m = (f * t) / 48000;
     e8c:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
     e90:	eb0006b9 	bl	297c <__aeabi_i2f>
     e94:	e1a03000 	mov	r3, r0
     e98:	e1a00003 	mov	r0, r3
     e9c:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     ea0:	eb0006ec 	bl	2a58 <__aeabi_fmul>
     ea4:	e1a03000 	mov	r3, r0
     ea8:	e1a00003 	mov	r0, r3
     eac:	e3a01902 	mov	r1, #32768	; 0x8000
     eb0:	e344173b 	movt	r1, #18235	; 0x473b
     eb4:	eb00074d 	bl	2bf0 <__aeabi_fdiv>
     eb8:	e1a03000 	mov	r3, r0
     ebc:	e1a00003 	mov	r0, r3
     ec0:	eb0007e7 	bl	2e64 <__aeabi_f2iz>
     ec4:	e1a03000 	mov	r3, r0
     ec8:	e50b3010 	str	r3, [r11, #-16]
	float index = (f * t) - m * 48000;
     ecc:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
     ed0:	eb0006a9 	bl	297c <__aeabi_i2f>
     ed4:	e1a03000 	mov	r3, r0
     ed8:	e1a00003 	mov	r0, r3
     edc:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     ee0:	eb0006dc 	bl	2a58 <__aeabi_fmul>
     ee4:	e1a03000 	mov	r3, r0
     ee8:	e1a04003 	mov	r4, r3
     eec:	e51b3010 	ldr	r3, [r11, #-16]
     ef0:	e30b2b80 	movw	r2, #48000	; 0xbb80
     ef4:	e0030392 	mul	r3, r2, r3
     ef8:	e1a00003 	mov	r0, r3
     efc:	eb00069e 	bl	297c <__aeabi_i2f>
     f00:	e1a03000 	mov	r3, r0
     f04:	e1a00004 	mov	r0, r4
     f08:	e1a01003 	mov	r1, r3
     f0c:	eb000628 	bl	27b4 <__aeabi_fsub>
     f10:	e1a03000 	mov	r3, r0
     f14:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	
	int	floorIndex = (int) index;
     f18:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     f1c:	eb0007d0 	bl	2e64 <__aeabi_f2iz>
     f20:	e1a03000 	mov	r3, r0
     f24:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int ceilIndex = ((index - floorIndex) > 0)? floorIndex + 1 : floorIndex;
     f28:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     f2c:	eb000692 	bl	297c <__aeabi_i2f>
     f30:	e1a03000 	mov	r3, r0
     f34:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     f38:	e1a01003 	mov	r1, r3
     f3c:	eb00061c 	bl	27b4 <__aeabi_fsub>
     f40:	e1a03000 	mov	r3, r0
     f44:	e1a00003 	mov	r0, r3
     f48:	e3a01000 	mov	r1, #0
     f4c:	eb0007be 	bl	2e4c <__aeabi_fcmpgt>
     f50:	e1a03000 	mov	r3, r0
     f54:	e3530000 	cmp	r3, #0
     f58:	0a000002 	beq	f68 <makeWave+0xf0>
     f5c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     f60:	e2833001 	add	r3, r3, #1
     f64:	ea000000 	b	f6c <makeWave+0xf4>
     f68:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     f6c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	
	return (1 - (index - floorIndex)) * sine[floorIndex] + (index - floorIndex) * sine[ceilIndex];	
     f70:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     f74:	eb000680 	bl	297c <__aeabi_i2f>
     f78:	e1a03000 	mov	r3, r0
     f7c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     f80:	e1a01003 	mov	r1, r3
     f84:	eb00060a 	bl	27b4 <__aeabi_fsub>
     f88:	e1a03000 	mov	r3, r0
     f8c:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     f90:	e1a01003 	mov	r1, r3
     f94:	eb000606 	bl	27b4 <__aeabi_fsub>
     f98:	e1a03000 	mov	r3, r0
     f9c:	e1a04003 	mov	r4, r3
     fa0:	e3043088 	movw	r3, #16520	; 0x4088
     fa4:	e3403000 	movt	r3, #0
     fa8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     fac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     fb0:	e1a00003 	mov	r0, r3
     fb4:	eb000670 	bl	297c <__aeabi_i2f>
     fb8:	e1a03000 	mov	r3, r0
     fbc:	e1a00004 	mov	r0, r4
     fc0:	e1a01003 	mov	r1, r3
     fc4:	eb0006a3 	bl	2a58 <__aeabi_fmul>
     fc8:	e1a03000 	mov	r3, r0
     fcc:	e1a04003 	mov	r4, r3
     fd0:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     fd4:	eb000668 	bl	297c <__aeabi_i2f>
     fd8:	e1a03000 	mov	r3, r0
     fdc:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     fe0:	e1a01003 	mov	r1, r3
     fe4:	eb0005f2 	bl	27b4 <__aeabi_fsub>
     fe8:	e1a03000 	mov	r3, r0
     fec:	e1a05003 	mov	r5, r3
     ff0:	e3043088 	movw	r3, #16520	; 0x4088
     ff4:	e3403000 	movt	r3, #0
     ff8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     ffc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    1000:	e1a00003 	mov	r0, r3
    1004:	eb00065c 	bl	297c <__aeabi_i2f>
    1008:	e1a03000 	mov	r3, r0
    100c:	e1a00005 	mov	r0, r5
    1010:	e1a01003 	mov	r1, r3
    1014:	eb00068f 	bl	2a58 <__aeabi_fmul>
    1018:	e1a03000 	mov	r3, r0
    101c:	e1a00004 	mov	r0, r4
    1020:	e1a01003 	mov	r1, r3
    1024:	eb0005e3 	bl	27b8 <__addsf3>
    1028:	e1a03000 	mov	r3, r0
}
    102c:	e1a00003 	mov	r0, r3
    1030:	e24bd00c 	sub	sp, r11, #12
    1034:	e8bd8830 	pop	{r4, r5, r11, pc}

00001038 <keyPressed>:

void keyPressed(int *notes, int note, int *break_ptr, float **yValues, int amplitude){
    1038:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    103c:	e28db000 	add	r11, sp, #0
    1040:	e24dd014 	sub	sp, sp, #20
    1044:	e50b0008 	str	r0, [r11, #-8]
    1048:	e50b100c 	str	r1, [r11, #-12]
    104c:	e50b2010 	str	r2, [r11, #-16]
    1050:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	
	if (*break_ptr == 1){ 	//Found break, stop playing note
    1054:	e51b3010 	ldr	r3, [r11, #-16]
    1058:	e5933000 	ldr	r3, [r3]
    105c:	e3530001 	cmp	r3, #1
    1060:	1a000009 	bne	108c <keyPressed+0x54>
		notes[note] = 0;
    1064:	e51b300c 	ldr	r3, [r11, #-12]
    1068:	e1a03103 	lsl	r3, r3, #2
    106c:	e51b2008 	ldr	r2, [r11, #-8]
    1070:	e0823003 	add	r3, r2, r3
    1074:	e3a02000 	mov	r2, #0
    1078:	e5832000 	str	r2, [r3]
		*break_ptr = 0;
    107c:	e51b3010 	ldr	r3, [r11, #-16]
    1080:	e3a02000 	mov	r2, #0
    1084:	e5832000 	str	r2, [r3]
    1088:	ea00000c 	b	10c0 <keyPressed+0x88>
	}
	else {
		if (notes[note] == 0){	//Key is not being played, start playing
    108c:	e51b300c 	ldr	r3, [r11, #-12]
    1090:	e1a03103 	lsl	r3, r3, #2
    1094:	e51b2008 	ldr	r2, [r11, #-8]
    1098:	e0823003 	add	r3, r2, r3
    109c:	e5933000 	ldr	r3, [r3]
    10a0:	e3530000 	cmp	r3, #0
    10a4:	1a000005 	bne	10c0 <keyPressed+0x88>
			notes[note] = 1;
    10a8:	e51b300c 	ldr	r3, [r11, #-12]
    10ac:	e1a03103 	lsl	r3, r3, #2
    10b0:	e51b2008 	ldr	r2, [r11, #-8]
    10b4:	e0823003 	add	r3, r2, r3
    10b8:	e3a02001 	mov	r2, #1
    10bc:	e5832000 	str	r2, [r3]
			}
		}
		yValues[8][i] = 120 - y * amplitude;// * amplitude;
		VGA_draw_point_ASM(i, yValues[8][i], 0xFFFF);
	} */
}
    10c0:	e28bd000 	add	sp, r11, #0
    10c4:	e8bd0800 	ldmfd	sp!, {r11}
    10c8:	e12fff1e 	bx	lr

000010cc <main>:

int main (){
    10cc:	e92d4870 	push	{r4, r5, r6, r11, lr}
    10d0:	e28db010 	add	r11, sp, #16
    10d4:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
    10d8:	e24dd00c 	sub	sp, sp, #12
	
	int nbNotes = 8;
    10dc:	e3a03008 	mov	r3, #8
    10e0:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	int notes[nbNotes];		//0-7 to show which note is being played
    10e4:	e51bc038 	ldr	r12, [r11, #-56]	; 0xffffffc8
    10e8:	e24c3001 	sub	r3, r12, #1
    10ec:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    10f0:	e1a0e00c 	mov	lr, r12
    10f4:	e1a0200e 	mov	r2, lr
    10f8:	e3a03000 	mov	r3, #0
    10fc:	e1a0eda2 	lsr	lr, r2, #27
    1100:	e1a05283 	lsl	r5, r3, #5
    1104:	e18e5005 	orr	r5, lr, r5
    1108:	e1a04282 	lsl	r4, r2, #5
    110c:	e1a0e00c 	mov	lr, r12
    1110:	e1a0200e 	mov	r2, lr
    1114:	e3a03000 	mov	r3, #0
    1118:	e1a0eda2 	lsr	lr, r2, #27
    111c:	e1a01283 	lsl	r1, r3, #5
    1120:	e18e1001 	orr	r1, lr, r1
    1124:	e1a00282 	lsl	r0, r2, #5
    1128:	e1a0300c 	mov	r3, r12
    112c:	e1a03103 	lsl	r3, r3, #2
    1130:	e2833003 	add	r3, r3, #3
    1134:	e2833007 	add	r3, r3, #7
    1138:	e1a031a3 	lsr	r3, r3, #3
    113c:	e1a03183 	lsl	r3, r3, #3
    1140:	e04dd003 	sub	sp, sp, r3
    1144:	e28d3008 	add	r3, sp, #8
    1148:	e2833003 	add	r3, r3, #3
    114c:	e1a03123 	lsr	r3, r3, #2
    1150:	e1a03103 	lsl	r3, r3, #2
    1154:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	int counter = 0;		//t
    1158:	e3a03000 	mov	r3, #0
    115c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	float signal = 0;			// TODO, try float
    1160:	e3a03000 	mov	r3, #0
    1164:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int breakDetected = 0;
    1168:	e3a03000 	mov	r3, #0
    116c:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c

	//Volume and amplitude decay
	int amplitude = 5;		//Volume constant (signal * 5 feels like a good starting volume)
    1170:	e3a03005 	mov	r3, #5
    1174:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	float decayConstant = 0.99999;   //When holding down a key, the amplitude will decay 
    1178:	e30f3f58 	movw	r3, #65368	; 0xff58
    117c:	e3433f7f 	movt	r3, #16255	; 0x3f7f
    1180:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
									   //exponentially (amplitudeDecay ^ counter)
	float decays[] = {decayConstant, decayConstant, decayConstant, decayConstant, decayConstant,
    1184:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    1188:	e50b3094 	str	r3, [r11, #-148]	; 0xffffff6c
    118c:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    1190:	e50b3090 	str	r3, [r11, #-144]	; 0xffffff70
    1194:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    1198:	e50b308c 	str	r3, [r11, #-140]	; 0xffffff74
    119c:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    11a0:	e50b3088 	str	r3, [r11, #-136]	; 0xffffff78
    11a4:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    11a8:	e50b3084 	str	r3, [r11, #-132]	; 0xffffff7c
    11ac:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    11b0:	e50b3080 	str	r3, [r11, #-128]	; 0xffffff80
    11b4:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    11b8:	e50b307c 	str	r3, [r11, #-124]	; 0xffffff84
    11bc:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    11c0:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
					decayConstant, decayConstant, decayConstant};
	int minAmplitude = 1;
    11c4:	e3a03001 	mov	r3, #1
    11c8:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	int maxAmplitude = 10;
    11cc:	e3a0300a 	mov	r3, #10
    11d0:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4

	float maxSignal = 0;	//Used to find the ratio between played signal and maxSignal to display on screen
    11d4:	e3a03000 	mov	r3, #0
    11d8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

	int i = 0;
    11dc:	e3a03000 	mov	r3, #0
    11e0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int j = 0;
    11e4:	e3a03000 	mov	r3, #0
    11e8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

	//Timer setup
	HPS_TIM_config_t hps_tim0;
	int_setup(1, (int[]){199});
    11ec:	e3a030c7 	mov	r3, #199	; 0xc7
    11f0:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
    11f4:	e24b3070 	sub	r3, r11, #112	; 0x70
    11f8:	e3a00001 	mov	r0, #1
    11fc:	e1a01003 	mov	r1, r3
    1200:	ebffff0e 	bl	e40 <int_setup>

	hps_tim0.tim = TIM0;
    1204:	e3a03001 	mov	r3, #1
    1208:	e54b30ac 	strb	r3, [r11, #-172]	; 0xffffff54
	hps_tim0.timeout = 20;		 //48000Hz = every 20.83 microseconds
    120c:	e3a03014 	mov	r3, #20
    1210:	e50b30a8 	str	r3, [r11, #-168]	; 0xffffff58
	hps_tim0.LD_en = 1;
    1214:	e3a03001 	mov	r3, #1
    1218:	e50b30a4 	str	r3, [r11, #-164]	; 0xffffff5c
	hps_tim0.INT_en = 1;
    121c:	e3a03001 	mov	r3, #1
    1220:	e50b30a0 	str	r3, [r11, #-160]	; 0xffffff60
	hps_tim0.enable = 1;
    1224:	e3a03001 	mov	r3, #1
    1228:	e50b309c 	str	r3, [r11, #-156]	; 0xffffff64

	HPS_TIM_config_ASM(&hps_tim0);
    122c:	e24b30ac 	sub	r3, r11, #172	; 0xac
    1230:	e1a00003 	mov	r0, r3
    1234:	ebfffc2a 	bl	2e4 <HPS_TIM_config_ASM>

	for (i = 0; i < nbNotes; i++)
    1238:	e3a03000 	mov	r3, #0
    123c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    1240:	ea000006 	b	1260 <main+0x194>
		notes[i] = 0;
    1244:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1248:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    124c:	e3a01000 	mov	r1, #0
    1250:	e7831102 	str	r1, [r3, r2, lsl #2]
	hps_tim0.INT_en = 1;
	hps_tim0.enable = 1;

	HPS_TIM_config_ASM(&hps_tim0);

	for (i = 0; i < nbNotes; i++)
    1254:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1258:	e2833001 	add	r3, r3, #1
    125c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    1260:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1264:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1268:	e1520003 	cmp	r2, r3
    126c:	bafffff4 	blt	1244 <main+0x178>
		notes[i] = 0;
	
	//Order of notes is : low c, d, e, f, g, a, b, high c}
	float frequencies[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};
    1270:	e3043008 	movw	r3, #16392	; 0x4008
    1274:	e3403000 	movt	r3, #0
    1278:	e24bc0cc 	sub	r12, r11, #204	; 0xcc
    127c:	e1a0e003 	mov	lr, r3
    1280:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1284:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1288:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    128c:	e88c000f 	stm	r12, {r0, r1, r2, r3}
	float **notesWaves = (float**) malloc (nbNotes * sizeof (float*));
    1290:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1294:	e1a03103 	lsl	r3, r3, #2
    1298:	e1a00003 	mov	r0, r3
    129c:	eb00071c 	bl	2f14 <malloc>
    12a0:	e1a03000 	mov	r3, r0
    12a4:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0

	//Setting musical notes sine wave
	for (i = 0; i < nbNotes; i++){
    12a8:	e3a03000 	mov	r3, #0
    12ac:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    12b0:	ea000046 	b	13d0 <main+0x304>
		notesWaves[i] = (float*) malloc (48000 * sizeof(float));
    12b4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    12b8:	e1a03103 	lsl	r3, r3, #2
    12bc:	e51b2050 	ldr	r2, [r11, #-80]	; 0xffffffb0
    12c0:	e0824003 	add	r4, r2, r3
    12c4:	e3a00cee 	mov	r0, #60928	; 0xee00
    12c8:	e3400002 	movt	r0, #2
    12cc:	eb000710 	bl	2f14 <malloc>
    12d0:	e1a03000 	mov	r3, r0
    12d4:	e5843000 	str	r3, [r4]
			
		for (j = 0; j < 48000; j++) {
    12d8:	e3a03000 	mov	r3, #0
    12dc:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    12e0:	ea000033 	b	13b4 <main+0x2e8>
			notesWaves[i][j] = /*(int)*/ makeWave(frequencies[i], j);
    12e4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    12e8:	e1a03103 	lsl	r3, r3, #2
    12ec:	e51b2050 	ldr	r2, [r11, #-80]	; 0xffffffb0
    12f0:	e0823003 	add	r3, r2, r3
    12f4:	e5932000 	ldr	r2, [r3]
    12f8:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    12fc:	e1a03103 	lsl	r3, r3, #2
    1300:	e0824003 	add	r4, r2, r3
    1304:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1308:	e3e030b7 	mvn	r3, #183	; 0xb7
    130c:	e1a02102 	lsl	r2, r2, #2
    1310:	e24b0014 	sub	r0, r11, #20
    1314:	e0802002 	add	r2, r0, r2
    1318:	e0823003 	add	r3, r2, r3
    131c:	e5933000 	ldr	r3, [r3]
    1320:	e1a00003 	mov	r0, r3
    1324:	e51b102c 	ldr	r1, [r11, #-44]	; 0xffffffd4
    1328:	ebfffed2 	bl	e78 <makeWave>
    132c:	e1a03000 	mov	r3, r0
    1330:	e5843000 	str	r3, [r4]
			//Find max signal for max amplitude
			if ((sine[j] * maxAmplitude * nbNotes) > maxSignal)
    1334:	e3043088 	movw	r3, #16520	; 0x4088
    1338:	e3403000 	movt	r3, #0
    133c:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    1340:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    1344:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    1348:	e0030392 	mul	r3, r2, r3
    134c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1350:	e0030392 	mul	r3, r2, r3
    1354:	e1a00003 	mov	r0, r3
    1358:	eb000587 	bl	297c <__aeabi_i2f>
    135c:	e1a03000 	mov	r3, r0
    1360:	e1a00003 	mov	r0, r3
    1364:	e51b1024 	ldr	r1, [r11, #-36]	; 0xffffffdc
    1368:	eb0006b7 	bl	2e4c <__aeabi_fcmpgt>
    136c:	e1a03000 	mov	r3, r0
    1370:	e3530000 	cmp	r3, #0
    1374:	0a00000b 	beq	13a8 <main+0x2dc>
				maxSignal = sine[j] * maxAmplitude * nbNotes;
    1378:	e3043088 	movw	r3, #16520	; 0x4088
    137c:	e3403000 	movt	r3, #0
    1380:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    1384:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    1388:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    138c:	e0030392 	mul	r3, r2, r3
    1390:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1394:	e0030392 	mul	r3, r2, r3
    1398:	e1a00003 	mov	r0, r3
    139c:	eb000576 	bl	297c <__aeabi_i2f>
    13a0:	e1a03000 	mov	r3, r0
    13a4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

	//Setting musical notes sine wave
	for (i = 0; i < nbNotes; i++){
		notesWaves[i] = (float*) malloc (48000 * sizeof(float));
			
		for (j = 0; j < 48000; j++) {
    13a8:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    13ac:	e2833001 	add	r3, r3, #1
    13b0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    13b4:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    13b8:	e30b3b7f 	movw	r3, #47999	; 0xbb7f
    13bc:	e1520003 	cmp	r2, r3
    13c0:	daffffc7 	ble	12e4 <main+0x218>
	//Order of notes is : low c, d, e, f, g, a, b, high c}
	float frequencies[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};
	float **notesWaves = (float**) malloc (nbNotes * sizeof (float*));

	//Setting musical notes sine wave
	for (i = 0; i < nbNotes; i++){
    13c4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    13c8:	e2833001 	add	r3, r3, #1
    13cc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    13d0:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    13d4:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    13d8:	e1520003 	cmp	r2, r3
    13dc:	baffffb4 	blt	12b4 <main+0x1e8>

	
	//Vga method 1
	//The Vga display will have only 1 y value per x value, to represent the sine wave.
	//Start by drawing a flat line in the middle of the screen
	float sampleWidth = 0;			//Number of samples in a period for a given note
    13e0:	e3a03000 	mov	r3, #0
    13e4:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
	int cycleCounter = 0;			//Counts periods of notes
    13e8:	e3a03000 	mov	r3, #0
    13ec:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	float lowestF = 174.614;
    13f0:	e3093d2f 	movw	r3, #40239	; 0x9d2f
    13f4:	e344332e 	movt	r3, #17198	; 0x432e
    13f8:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
	int nbCyclesToDisplay = 2 ;		//4 periods of a note will be displayed for every 48000 samples
    13fc:	e3a03002 	mov	r3, #2
    1400:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
	int fractionCyclePixels = 20;	//Ex: 1/5 values in a period will be displayed
    1404:	e3a03014 	mov	r3, #20
    1408:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
	sampleWidth = 48000 / lowestF;	//Number of samples in one period of lowest frequency
    140c:	e3a00902 	mov	r0, #32768	; 0x8000
    1410:	e344073b 	movt	r0, #18235	; 0x473b
    1414:	e51b1058 	ldr	r1, [r11, #-88]	; 0xffffffa8
    1418:	eb0005f4 	bl	2bf0 <__aeabi_fdiv>
    141c:	e1a03000 	mov	r3, r0
    1420:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
	int cycleEdge = lowestF / nbCyclesToDisplay;
    1424:	e51b005c 	ldr	r0, [r11, #-92]	; 0xffffffa4
    1428:	eb000553 	bl	297c <__aeabi_i2f>
    142c:	e1a03000 	mov	r3, r0
    1430:	e51b0058 	ldr	r0, [r11, #-88]	; 0xffffffa8
    1434:	e1a01003 	mov	r1, r3
    1438:	eb0005ec 	bl	2bf0 <__aeabi_fdiv>
    143c:	e1a03000 	mov	r3, r0
    1440:	e1a00003 	mov	r0, r3
    1444:	eb000686 	bl	2e64 <__aeabi_f2iz>
    1448:	e1a03000 	mov	r3, r0
    144c:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
	int debug = 0;
    1450:	e3a03000 	mov	r3, #0
    1454:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

	
	int yPixels[320];
	VGA_clear_charbuff_ASM();
    1458:	ebfffd35 	bl	934 <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
    145c:	ebfffd44 	bl	974 <VGA_clear_pixelbuff_ASM>
	for (i = 0; i < 320; i++){
    1460:	e3a03000 	mov	r3, #0
    1464:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    1468:	ea00000f 	b	14ac <main+0x3e0>
		yPixels[i] = 120;
    146c:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1470:	e30f3a48 	movw	r3, #64072	; 0xfa48
    1474:	e34f3fff 	movt	r3, #65535	; 0xffff
    1478:	e1a02102 	lsl	r2, r2, #2
    147c:	e24b1014 	sub	r1, r11, #20
    1480:	e0812002 	add	r2, r1, r2
    1484:	e0823003 	add	r3, r2, r3
    1488:	e3a02078 	mov	r2, #120	; 0x78
    148c:	e5832000 	str	r2, [r3]
		VGA_draw_point_ASM(i,120, 0xFFFF);
    1490:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
    1494:	e3a01078 	mov	r1, #120	; 0x78
    1498:	e3e02000 	mvn	r2, #0
    149c:	ebfffd68 	bl	a44 <VGA_draw_point_ASM>

	
	int yPixels[320];
	VGA_clear_charbuff_ASM();
	VGA_clear_pixelbuff_ASM();
	for (i = 0; i < 320; i++){
    14a0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    14a4:	e2833001 	add	r3, r3, #1
    14a8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    14ac:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    14b0:	e300313f 	movw	r3, #319	; 0x13f
    14b4:	e1520003 	cmp	r2, r3
    14b8:	daffffeb 	ble	146c <main+0x3a0>
		yPixels[i] = 120;
		VGA_draw_point_ASM(i,120, 0xFFFF);
	}
	
	//Vga method 2
	float **yValues = (float**) malloc ((nbNotes + 1) * sizeof (float*));
    14bc:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    14c0:	e2833001 	add	r3, r3, #1
    14c4:	e1a03103 	lsl	r3, r3, #2
    14c8:	e1a00003 	mov	r0, r3
    14cc:	eb000690 	bl	2f14 <malloc>
    14d0:	e1a03000 	mov	r3, r0
    14d4:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
	
	for (i = 0; i < nbNotes + 1; i++){
    14d8:	e3a03000 	mov	r3, #0
    14dc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    14e0:	ea000072 	b	16b0 <main+0x5e4>
		yValues[i] = (float*) malloc (320 * sizeof (float));
    14e4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    14e8:	e1a03103 	lsl	r3, r3, #2
    14ec:	e51b2068 	ldr	r2, [r11, #-104]	; 0xffffff98
    14f0:	e0824003 	add	r4, r2, r3
    14f4:	e3a00c05 	mov	r0, #1280	; 0x500
    14f8:	eb000685 	bl	2f14 <malloc>
    14fc:	e1a03000 	mov	r3, r0
    1500:	e5843000 	str	r3, [r4]
		for (j = 0; j < 320; j++){
    1504:	e3a03000 	mov	r3, #0
    1508:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    150c:	ea000060 	b	1694 <main+0x5c8>
			if (i == nbNotes){		//Last array will be used to hold previous points, initialized to flat line
    1510:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1514:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1518:	e1520003 	cmp	r2, r3
    151c:	1a00001b 	bne	1590 <main+0x4c4>
				yValues[i][j] = 120;
    1520:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1524:	e1a03103 	lsl	r3, r3, #2
    1528:	e51b2068 	ldr	r2, [r11, #-104]	; 0xffffff98
    152c:	e0823003 	add	r3, r2, r3
    1530:	e5932000 	ldr	r2, [r3]
    1534:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    1538:	e1a03103 	lsl	r3, r3, #2
    153c:	e0823003 	add	r3, r2, r3
    1540:	e3a02000 	mov	r2, #0
    1544:	e34422f0 	movt	r2, #17136	; 0x42f0
    1548:	e5832000 	str	r2, [r3]
				VGA_draw_point_ASM(j, yValues[i][j], 0xFFFF);
    154c:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1550:	e1a03103 	lsl	r3, r3, #2
    1554:	e51b2068 	ldr	r2, [r11, #-104]	; 0xffffff98
    1558:	e0823003 	add	r3, r2, r3
    155c:	e5932000 	ldr	r2, [r3]
    1560:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    1564:	e1a03103 	lsl	r3, r3, #2
    1568:	e0823003 	add	r3, r2, r3
    156c:	e5933000 	ldr	r3, [r3]
    1570:	e1a00003 	mov	r0, r3
    1574:	eb00063a 	bl	2e64 <__aeabi_f2iz>
    1578:	e1a03000 	mov	r3, r0
    157c:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
    1580:	e1a01003 	mov	r1, r3
    1584:	e3e02000 	mvn	r2, #0
    1588:	ebfffd2d 	bl	a44 <VGA_draw_point_ASM>
    158c:	ea00003d 	b	1688 <main+0x5bc>
			}
			else
				yValues[i][j] = 120 - (((notesWaves[i][5 * j]) * 1.0 * 4) / maxSignal * 90);		//In one cycle of the lowest frequency there are 366 samples
    1590:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1594:	e1a03103 	lsl	r3, r3, #2
    1598:	e51b2068 	ldr	r2, [r11, #-104]	; 0xffffff98
    159c:	e0823003 	add	r3, r2, r3
    15a0:	e5932000 	ldr	r2, [r3]
    15a4:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    15a8:	e1a03103 	lsl	r3, r3, #2
    15ac:	e0826003 	add	r6, r2, r3
    15b0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    15b4:	e1a03103 	lsl	r3, r3, #2
    15b8:	e51b2050 	ldr	r2, [r11, #-80]	; 0xffffffb0
    15bc:	e0823003 	add	r3, r2, r3
    15c0:	e5931000 	ldr	r1, [r3]
    15c4:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    15c8:	e1a03002 	mov	r3, r2
    15cc:	e1a03103 	lsl	r3, r3, #2
    15d0:	e0833002 	add	r3, r3, r2
    15d4:	e1a03103 	lsl	r3, r3, #2
    15d8:	e0813003 	add	r3, r1, r3
    15dc:	e5933000 	ldr	r3, [r3]
    15e0:	e1a00003 	mov	r0, r3
    15e4:	eb0002dd 	bl	2160 <__aeabi_f2d>
    15e8:	e1a02000 	mov	r2, r0
    15ec:	e1a03001 	mov	r3, r1
    15f0:	e1a00002 	mov	r0, r2
    15f4:	e1a01003 	mov	r1, r3
    15f8:	e3a02000 	mov	r2, #0
    15fc:	e3a03000 	mov	r3, #0
    1600:	e3443010 	movt	r3, #16400	; 0x4010
    1604:	eb000302 	bl	2214 <__aeabi_dmul>
    1608:	e1a02000 	mov	r2, r0
    160c:	e1a03001 	mov	r3, r1
    1610:	e1a04002 	mov	r4, r2
    1614:	e1a05003 	mov	r5, r3
    1618:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
    161c:	eb0002cf 	bl	2160 <__aeabi_f2d>
    1620:	e1a02000 	mov	r2, r0
    1624:	e1a03001 	mov	r3, r1
    1628:	e1a00004 	mov	r0, r4
    162c:	e1a01005 	mov	r1, r5
    1630:	eb00039b 	bl	24a4 <__aeabi_ddiv>
    1634:	e1a02000 	mov	r2, r0
    1638:	e1a03001 	mov	r3, r1
    163c:	e1a00002 	mov	r0, r2
    1640:	e1a01003 	mov	r1, r3
    1644:	e3a02000 	mov	r2, #0
    1648:	e3a03902 	mov	r3, #32768	; 0x8000
    164c:	e3443056 	movt	r3, #16470	; 0x4056
    1650:	eb0002ef 	bl	2214 <__aeabi_dmul>
    1654:	e1a02000 	mov	r2, r0
    1658:	e1a03001 	mov	r3, r1
    165c:	e3a00000 	mov	r0, #0
    1660:	e3a01000 	mov	r1, #0
    1664:	e344105e 	movt	r1, #16478	; 0x405e
    1668:	eb0001e4 	bl	1e00 <__aeabi_dsub>
    166c:	e1a02000 	mov	r2, r0
    1670:	e1a03001 	mov	r3, r1
    1674:	e1a00002 	mov	r0, r2
    1678:	e1a01003 	mov	r1, r3
    167c:	eb000422 	bl	270c <__aeabi_d2f>
    1680:	e1a03000 	mov	r3, r0
    1684:	e5863000 	str	r3, [r6]
	//Vga method 2
	float **yValues = (float**) malloc ((nbNotes + 1) * sizeof (float*));
	
	for (i = 0; i < nbNotes + 1; i++){
		yValues[i] = (float*) malloc (320 * sizeof (float));
		for (j = 0; j < 320; j++){
    1688:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    168c:	e2833001 	add	r3, r3, #1
    1690:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    1694:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
    1698:	e300313f 	movw	r3, #319	; 0x13f
    169c:	e1520003 	cmp	r2, r3
    16a0:	daffff9a 	ble	1510 <main+0x444>
	}
	
	//Vga method 2
	float **yValues = (float**) malloc ((nbNotes + 1) * sizeof (float*));
	
	for (i = 0; i < nbNotes + 1; i++){
    16a4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    16a8:	e2833001 	add	r3, r3, #1
    16ac:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    16b0:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    16b4:	e2832001 	add	r2, r3, #1
    16b8:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    16bc:	e1520003 	cmp	r2, r3
    16c0:	caffff87 	bgt	14e4 <main+0x418>
    16c4:	ea000000 	b	16cc <main+0x600>
					break;
				default:
					breakDetected = 0;	//Undefined key should not affect break boolean
			}		
		}
	}
    16c8:	e1a00000 	nop			; (mov r0, r0)
				yValues[i][j] = 120 - (((notesWaves[i][5 * j]) * 1.0 * 4) / maxSignal * 90);		//In one cycle of the lowest frequency there are 366 samples
		}
	}

	while(1){
			if(hps_tim_flag){	//check the interrupt flag 
    16cc:	e300340c 	movw	r3, #1036	; 0x40c
    16d0:	e3403000 	movt	r3, #0
    16d4:	e5933000 	ldr	r3, [r3]
    16d8:	e3530000 	cmp	r3, #0
    16dc:	0a0000ad 	beq	1998 <main+0x8cc>
				hps_tim_flag = 0;
    16e0:	e300340c 	movw	r3, #1036	; 0x40c
    16e4:	e3403000 	movt	r3, #0
    16e8:	e3a02000 	mov	r2, #0
    16ec:	e5832000 	str	r2, [r3]
				signal = 0;
    16f0:	e3a03000 	mov	r3, #0
    16f4:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

				//Add signals
				for (i = 0; i < nbNotes; i++){
    16f8:	e3a03000 	mov	r3, #0
    16fc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    1700:	ea000015 	b	175c <main+0x690>
					if (notes[i]){
    1704:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1708:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    170c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    1710:	e3530000 	cmp	r3, #0
    1714:	0a00000d 	beq	1750 <main+0x684>
						signal += notesWaves[i][counter];// * decays[i];
    1718:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    171c:	e1a03103 	lsl	r3, r3, #2
    1720:	e51b2050 	ldr	r2, [r11, #-80]	; 0xffffffb0
    1724:	e0823003 	add	r3, r2, r3
    1728:	e5932000 	ldr	r2, [r3]
    172c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1730:	e1a03103 	lsl	r3, r3, #2
    1734:	e0823003 	add	r3, r2, r3
    1738:	e5933000 	ldr	r3, [r3]
    173c:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    1740:	e1a01003 	mov	r1, r3
    1744:	eb00041b 	bl	27b8 <__addsf3>
    1748:	e1a03000 	mov	r3, r0
    174c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			if(hps_tim_flag){	//check the interrupt flag 
				hps_tim_flag = 0;
				signal = 0;

				//Add signals
				for (i = 0; i < nbNotes; i++){
    1750:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1754:	e2833001 	add	r3, r3, #1
    1758:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    175c:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1760:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1764:	e1520003 	cmp	r2, r3
    1768:	baffffe5 	blt	1704 <main+0x638>
					if (notes[i]){
						signal += notesWaves[i][counter];// * decays[i];
						//decays[i] *= decayConstant;
					}
				}
				counter++;
    176c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1770:	e2833001 	add	r3, r3, #1
    1774:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				signal *= amplitude;
    1778:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
    177c:	eb00047e 	bl	297c <__aeabi_i2f>
    1780:	e1a03000 	mov	r3, r0
    1784:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    1788:	e1a01003 	mov	r1, r3
    178c:	eb0004b1 	bl	2a58 <__aeabi_fmul>
    1790:	e1a03000 	mov	r3, r0
    1794:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				//Sound
				//There should be no problem of full fifo, because sample of rate of audio codec is 48000Hz
				//and timer is set at a slightly lower frequency, but just in case
				while (!audio_read_wslc_ASM() || !audio_read_wsrc_ASM());	//Loop if wslc = 0 or wsrc = 0
    1798:	e1a00000 	nop			; (mov r0, r0)
    179c:	ebfffbd0 	bl	6e4 <audio_read_wslc_ASM>
    17a0:	e1a03000 	mov	r3, r0
    17a4:	e3530000 	cmp	r3, #0
    17a8:	0afffffb 	beq	179c <main+0x6d0>
    17ac:	ebfffbd1 	bl	6f8 <audio_read_wsrc_ASM>
    17b0:	e1a03000 	mov	r3, r0
    17b4:	e3530000 	cmp	r3, #0
    17b8:	0afffff7 	beq	179c <main+0x6d0>
				audio_write_data_ASM(signal, signal);
    17bc:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    17c0:	eb0005a7 	bl	2e64 <__aeabi_f2iz>
    17c4:	e1a04000 	mov	r4, r0
    17c8:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    17cc:	eb0005a4 	bl	2e64 <__aeabi_f2iz>
    17d0:	e1a03000 	mov	r3, r0
    17d4:	e1a00004 	mov	r0, r4
    17d8:	e1a01003 	mov	r1, r3
    17dc:	ebfffb66 	bl	57c <audio_write_data_ASM>
				
				if (cycleCounter % cycleEdge == 0){
    17e0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    17e4:	e1a00003 	mov	r0, r3
    17e8:	e51b1064 	ldr	r1, [r11, #-100]	; 0xffffff9c
    17ec:	eb000178 	bl	1dd4 <__aeabi_idivmod>
    17f0:	e1a03001 	mov	r3, r1
    17f4:	e3530000 	cmp	r3, #0
    17f8:	1a000066 	bne	1998 <main+0x8cc>
					if (counter % fractionCyclePixels == 0){
    17fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1800:	e1a00003 	mov	r0, r3
    1804:	e51b1060 	ldr	r1, [r11, #-96]	; 0xffffffa0
    1808:	eb000171 	bl	1dd4 <__aeabi_idivmod>
    180c:	e1a03001 	mov	r3, r1
    1810:	e3530000 	cmp	r3, #0
    1814:	1a00005f 	bne	1998 <main+0x8cc>
						debug++;
    1818:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    181c:	e2833001 	add	r3, r3, #1
    1820:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
						for (i = 0; i < 319; i++){
    1824:	e3a03000 	mov	r3, #0
    1828:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    182c:	ea00002b 	b	18e0 <main+0x814>
							VGA_draw_point_ASM(i, yPixels[i], 0x0);	//Draw previous points in screen black (clear them)
    1830:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    1834:	e30f3a48 	movw	r3, #64072	; 0xfa48
    1838:	e34f3fff 	movt	r3, #65535	; 0xffff
    183c:	e1a02102 	lsl	r2, r2, #2
    1840:	e24b0014 	sub	r0, r11, #20
    1844:	e0802002 	add	r2, r0, r2
    1848:	e0823003 	add	r3, r2, r3
    184c:	e5933000 	ldr	r3, [r3]
    1850:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
    1854:	e1a01003 	mov	r1, r3
    1858:	e3a02000 	mov	r2, #0
    185c:	ebfffc78 	bl	a44 <VGA_draw_point_ASM>
							yPixels[i] = yPixels[i+1]; 	//Shift values left			
    1860:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1864:	e2832001 	add	r2, r3, #1
    1868:	e30f3a48 	movw	r3, #64072	; 0xfa48
    186c:	e34f3fff 	movt	r3, #65535	; 0xffff
    1870:	e1a02102 	lsl	r2, r2, #2
    1874:	e24b1014 	sub	r1, r11, #20
    1878:	e0812002 	add	r2, r1, r2
    187c:	e0823003 	add	r3, r2, r3
    1880:	e5932000 	ldr	r2, [r3]
    1884:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    1888:	e30f3a48 	movw	r3, #64072	; 0xfa48
    188c:	e34f3fff 	movt	r3, #65535	; 0xffff
    1890:	e1a01101 	lsl	r1, r1, #2
    1894:	e24b0014 	sub	r0, r11, #20
    1898:	e0801001 	add	r1, r0, r1
    189c:	e0813003 	add	r3, r1, r3
    18a0:	e5832000 	str	r2, [r3]
							VGA_draw_point_ASM(i, yPixels[i], 0xFFFF); //Draw new points in white
    18a4:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    18a8:	e30f3a48 	movw	r3, #64072	; 0xfa48
    18ac:	e34f3fff 	movt	r3, #65535	; 0xffff
    18b0:	e1a02102 	lsl	r2, r2, #2
    18b4:	e24b1014 	sub	r1, r11, #20
    18b8:	e0812002 	add	r2, r1, r2
    18bc:	e0823003 	add	r3, r2, r3
    18c0:	e5933000 	ldr	r3, [r3]
    18c4:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
    18c8:	e1a01003 	mov	r1, r3
    18cc:	e3e02000 	mvn	r2, #0
    18d0:	ebfffc5b 	bl	a44 <VGA_draw_point_ASM>
				audio_write_data_ASM(signal, signal);
				
				if (cycleCounter % cycleEdge == 0){
					if (counter % fractionCyclePixels == 0){
						debug++;
						for (i = 0; i < 319; i++){
    18d4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    18d8:	e2833001 	add	r3, r3, #1
    18dc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    18e0:	e51b2028 	ldr	r2, [r11, #-40]	; 0xffffffd8
    18e4:	e300313e 	movw	r3, #318	; 0x13e
    18e8:	e1520003 	cmp	r2, r3
    18ec:	daffffcf 	ble	1830 <main+0x764>
							VGA_draw_point_ASM(i, yPixels[i], 0x0);	//Draw previous points in screen black (clear them)
							yPixels[i] = yPixels[i+1]; 	//Shift values left			
							VGA_draw_point_ASM(i, yPixels[i], 0xFFFF); //Draw new points in white
						}
						VGA_draw_point_ASM(319, yPixels[319], 0x0);
    18f0:	e51b30d0 	ldr	r3, [r11, #-208]	; 0xffffff30
    18f4:	e300013f 	movw	r0, #319	; 0x13f
    18f8:	e1a01003 	mov	r1, r3
    18fc:	e3a02000 	mov	r2, #0
    1900:	ebfffc4f 	bl	a44 <VGA_draw_point_ASM>
						yPixels[319] = (int) (120 - ( (signal * 1.0 / maxSignal) * 90));
    1904:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
    1908:	eb000214 	bl	2160 <__aeabi_f2d>
    190c:	e1a04000 	mov	r4, r0
    1910:	e1a05001 	mov	r5, r1
    1914:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
    1918:	eb000210 	bl	2160 <__aeabi_f2d>
    191c:	e1a02000 	mov	r2, r0
    1920:	e1a03001 	mov	r3, r1
    1924:	e1a00004 	mov	r0, r4
    1928:	e1a01005 	mov	r1, r5
    192c:	eb0002dc 	bl	24a4 <__aeabi_ddiv>
    1930:	e1a02000 	mov	r2, r0
    1934:	e1a03001 	mov	r3, r1
    1938:	e1a00002 	mov	r0, r2
    193c:	e1a01003 	mov	r1, r3
    1940:	e3a02000 	mov	r2, #0
    1944:	e3a03902 	mov	r3, #32768	; 0x8000
    1948:	e3443056 	movt	r3, #16470	; 0x4056
    194c:	eb000230 	bl	2214 <__aeabi_dmul>
    1950:	e1a02000 	mov	r2, r0
    1954:	e1a03001 	mov	r3, r1
    1958:	e3a00000 	mov	r0, #0
    195c:	e3a01000 	mov	r1, #0
    1960:	e344105e 	movt	r1, #16478	; 0x405e
    1964:	eb000125 	bl	1e00 <__aeabi_dsub>
    1968:	e1a02000 	mov	r2, r0
    196c:	e1a03001 	mov	r3, r1
    1970:	e1a00002 	mov	r0, r2
    1974:	e1a01003 	mov	r1, r3
    1978:	eb00034c 	bl	26b0 <__aeabi_d2iz>
    197c:	e1a03000 	mov	r3, r0
    1980:	e50b30d0 	str	r3, [r11, #-208]	; 0xffffff30
						VGA_draw_point_ASM(319, yPixels[319], 0xFFFF); 
    1984:	e51b30d0 	ldr	r3, [r11, #-208]	; 0xffffff30
    1988:	e300013f 	movw	r0, #319	; 0x13f
    198c:	e1a01003 	mov	r1, r3
    1990:	e3e02000 	mvn	r2, #0
    1994:	ebfffc2a 	bl	a44 <VGA_draw_point_ASM>
					}		
				}
				
			}
		
		if (counter % (int)sampleWidth == 0)
    1998:	e51b0054 	ldr	r0, [r11, #-84]	; 0xffffffac
    199c:	eb000530 	bl	2e64 <__aeabi_f2iz>
    19a0:	e1a03000 	mov	r3, r0
    19a4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    19a8:	e1a00002 	mov	r0, r2
    19ac:	e1a01003 	mov	r1, r3
    19b0:	eb000107 	bl	1dd4 <__aeabi_idivmod>
    19b4:	e1a03001 	mov	r3, r1
    19b8:	e3530000 	cmp	r3, #0
    19bc:	1a000002 	bne	19cc <main+0x900>
			cycleCounter++;
    19c0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    19c4:	e2833001 	add	r3, r3, #1
    19c8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		
		//Reset t
		if (counter >= 48000){
    19cc:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    19d0:	e30b3b7f 	movw	r3, #47999	; 0xbb7f
    19d4:	e1520003 	cmp	r2, r3
    19d8:	da00000b 	ble	1a0c <main+0x940>
			counter = 0;
    19dc:	e3a03000 	mov	r3, #0
    19e0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			cycleCounter = 0;	
    19e4:	e3a03000 	mov	r3, #0
    19e8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			VGA_write_byte_ASM(10, 10, debug); 
    19ec:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    19f0:	e6ef3073 	uxtb	r3, r3
    19f4:	e3a0000a 	mov	r0, #10
    19f8:	e3a0100a 	mov	r1, #10
    19fc:	e1a02003 	mov	r2, r3
    1a00:	ebfffbf8 	bl	9e8 <VGA_write_byte_ASM>
			debug = 0;
    1a04:	e3a03000 	mov	r3, #0
    1a08:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		}
		
		//Keyboard
		char key = 0;
    1a0c:	e3a03000 	mov	r3, #0
    1a10:	e54b35cd 	strb	r3, [r11, #-1485]	; 0xfffffa33
		int isValid = read_ps2_data_ASM(&key);
    1a14:	e24b3d17 	sub	r3, r11, #1472	; 0x5c0
    1a18:	e2433004 	sub	r3, r3, #4
    1a1c:	e2433009 	sub	r3, r3, #9
    1a20:	e1a00003 	mov	r0, r3
    1a24:	ebfffb45 	bl	740 <read_ps2_data_ASM>
    1a28:	e50b006c 	str	r0, [r11, #-108]	; 0xffffff94
	
		if (isValid){
    1a2c:	e51b306c 	ldr	r3, [r11, #-108]	; 0xffffff94
    1a30:	e3530000 	cmp	r3, #0
    1a34:	0affff23 	beq	16c8 <main+0x5fc>
			switch (key){
    1a38:	e55b35cd 	ldrb	r3, [r11, #-1485]	; 0xfffffa33
    1a3c:	e3530042 	cmp	r3, #66	; 0x42
    1a40:	0a00004f 	beq	1b84 <main+0xab8>
    1a44:	e3530042 	cmp	r3, #66	; 0x42
    1a48:	ca00000d 	bgt	1a84 <main+0x9b8>
    1a4c:	e3530023 	cmp	r3, #35	; 0x23
    1a50:	0a00002d 	beq	1b0c <main+0xa40>
    1a54:	e3530023 	cmp	r3, #35	; 0x23
    1a58:	ca000004 	bgt	1a70 <main+0x9a4>
    1a5c:	e353001b 	cmp	r3, #27
    1a60:	0a00001f 	beq	1ae4 <main+0xa18>
    1a64:	e353001c 	cmp	r3, #28
    1a68:	0a000013 	beq	1abc <main+0x9f0>
    1a6c:	ea000087 	b	1c90 <main+0xbc4>
    1a70:	e353002b 	cmp	r3, #43	; 0x2b
    1a74:	0a00002e 	beq	1b34 <main+0xa68>
    1a78:	e353003b 	cmp	r3, #59	; 0x3b
    1a7c:	0a000036 	beq	1b5c <main+0xa90>
    1a80:	ea000082 	b	1c90 <main+0xbc4>
    1a84:	e353004e 	cmp	r3, #78	; 0x4e
    1a88:	0a00006c 	beq	1c40 <main+0xb74>
    1a8c:	e353004e 	cmp	r3, #78	; 0x4e
    1a90:	ca000004 	bgt	1aa8 <main+0x9dc>
    1a94:	e353004b 	cmp	r3, #75	; 0x4b
    1a98:	0a000043 	beq	1bac <main+0xae0>
    1a9c:	e353004c 	cmp	r3, #76	; 0x4c
    1aa0:	0a00004b 	beq	1bd4 <main+0xb08>
    1aa4:	ea000079 	b	1c90 <main+0xbc4>
    1aa8:	e3530055 	cmp	r3, #85	; 0x55
    1aac:	0a000052 	beq	1bfc <main+0xb30>
    1ab0:	e35300f0 	cmp	r3, #240	; 0xf0
    1ab4:	0a000072 	beq	1c84 <main+0xbb8>
    1ab8:	ea000074 	b	1c90 <main+0xbc4>
				case 0x1C:	//A
					keyPressed(notes, 0, &breakDetected, yValues, amplitude);
    1abc:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1ac0:	e24b3074 	sub	r3, r11, #116	; 0x74
    1ac4:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1ac8:	e58d1000 	str	r1, [sp]
    1acc:	e1a00002 	mov	r0, r2
    1ad0:	e3a01000 	mov	r1, #0
    1ad4:	e1a02003 	mov	r2, r3
    1ad8:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1adc:	ebfffd55 	bl	1038 <keyPressed>
					break;	
    1ae0:	ea000070 	b	1ca8 <main+0xbdc>
				case 0x1B:	//S
					keyPressed(notes, 1, &breakDetected, yValues, amplitude);
    1ae4:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1ae8:	e24b3074 	sub	r3, r11, #116	; 0x74
    1aec:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1af0:	e58d1000 	str	r1, [sp]
    1af4:	e1a00002 	mov	r0, r2
    1af8:	e3a01001 	mov	r1, #1
    1afc:	e1a02003 	mov	r2, r3
    1b00:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1b04:	ebfffd4b 	bl	1038 <keyPressed>
					break;	
    1b08:	ea000066 	b	1ca8 <main+0xbdc>
				case 0x23:	//D
					keyPressed(notes, 2, &breakDetected, yValues, amplitude);
    1b0c:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1b10:	e24b3074 	sub	r3, r11, #116	; 0x74
    1b14:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1b18:	e58d1000 	str	r1, [sp]
    1b1c:	e1a00002 	mov	r0, r2
    1b20:	e3a01002 	mov	r1, #2
    1b24:	e1a02003 	mov	r2, r3
    1b28:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1b2c:	ebfffd41 	bl	1038 <keyPressed>
					break;	
    1b30:	ea00005c 	b	1ca8 <main+0xbdc>
				case 0x2B:	//F
					keyPressed(notes, 3, &breakDetected, yValues, amplitude);
    1b34:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1b38:	e24b3074 	sub	r3, r11, #116	; 0x74
    1b3c:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1b40:	e58d1000 	str	r1, [sp]
    1b44:	e1a00002 	mov	r0, r2
    1b48:	e3a01003 	mov	r1, #3
    1b4c:	e1a02003 	mov	r2, r3
    1b50:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1b54:	ebfffd37 	bl	1038 <keyPressed>
					break;	
    1b58:	ea000052 	b	1ca8 <main+0xbdc>
				case 0x3B:	//J
					keyPressed(notes, 4, &breakDetected, yValues, amplitude);
    1b5c:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1b60:	e24b3074 	sub	r3, r11, #116	; 0x74
    1b64:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1b68:	e58d1000 	str	r1, [sp]
    1b6c:	e1a00002 	mov	r0, r2
    1b70:	e3a01004 	mov	r1, #4
    1b74:	e1a02003 	mov	r2, r3
    1b78:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1b7c:	ebfffd2d 	bl	1038 <keyPressed>
					break;	
    1b80:	ea000048 	b	1ca8 <main+0xbdc>
				case 0x42:	//K
					keyPressed(notes, 5, &breakDetected, yValues, amplitude);
    1b84:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1b88:	e24b3074 	sub	r3, r11, #116	; 0x74
    1b8c:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1b90:	e58d1000 	str	r1, [sp]
    1b94:	e1a00002 	mov	r0, r2
    1b98:	e3a01005 	mov	r1, #5
    1b9c:	e1a02003 	mov	r2, r3
    1ba0:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1ba4:	ebfffd23 	bl	1038 <keyPressed>
					break;	
    1ba8:	ea00003e 	b	1ca8 <main+0xbdc>
				case 0x4B:	//L
					keyPressed(notes, 6, &breakDetected, yValues, amplitude);
    1bac:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1bb0:	e24b3074 	sub	r3, r11, #116	; 0x74
    1bb4:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1bb8:	e58d1000 	str	r1, [sp]
    1bbc:	e1a00002 	mov	r0, r2
    1bc0:	e3a01006 	mov	r1, #6
    1bc4:	e1a02003 	mov	r2, r3
    1bc8:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1bcc:	ebfffd19 	bl	1038 <keyPressed>
					break;	
    1bd0:	ea000034 	b	1ca8 <main+0xbdc>
				case 0x4C:	//;	
					keyPressed(notes, 7, &breakDetected, yValues, amplitude);
    1bd4:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1bd8:	e24b3074 	sub	r3, r11, #116	; 0x74
    1bdc:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1be0:	e58d1000 	str	r1, [sp]
    1be4:	e1a00002 	mov	r0, r2
    1be8:	e3a01007 	mov	r1, #7
    1bec:	e1a02003 	mov	r2, r3
    1bf0:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1bf4:	ebfffd0f 	bl	1038 <keyPressed>
					break;	
    1bf8:	ea00002a 	b	1ca8 <main+0xbdc>
				case 0x55:	//+
					if (amplitude < maxAmplitude) keyPressed(notes, 8, &breakDetected, yValues, amplitude++);
    1bfc:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1c00:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    1c04:	e1520003 	cmp	r2, r3
    1c08:	aa000023 	bge	1c9c <main+0xbd0>
    1c0c:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1c10:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1c14:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1c18:	e2833001 	add	r3, r3, #1
    1c1c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    1c20:	e24b3074 	sub	r3, r11, #116	; 0x74
    1c24:	e58d1000 	str	r1, [sp]
    1c28:	e1a00002 	mov	r0, r2
    1c2c:	e3a01008 	mov	r1, #8
    1c30:	e1a02003 	mov	r2, r3
    1c34:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1c38:	ebfffcfe 	bl	1038 <keyPressed>
					break;
    1c3c:	ea000016 	b	1c9c <main+0xbd0>
				case 0x4E:	//-
					if (amplitude > minAmplitude) keyPressed(notes, 8, &breakDetected, yValues, amplitude--);
    1c40:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1c44:	e51b3048 	ldr	r3, [r11, #-72]	; 0xffffffb8
    1c48:	e1520003 	cmp	r2, r3
    1c4c:	da000014 	ble	1ca4 <main+0xbd8>
    1c50:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    1c54:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1c58:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1c5c:	e2433001 	sub	r3, r3, #1
    1c60:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    1c64:	e24b3074 	sub	r3, r11, #116	; 0x74
    1c68:	e58d1000 	str	r1, [sp]
    1c6c:	e1a00002 	mov	r0, r2
    1c70:	e3a01008 	mov	r1, #8
    1c74:	e1a02003 	mov	r2, r3
    1c78:	e51b3068 	ldr	r3, [r11, #-104]	; 0xffffff98
    1c7c:	ebfffced 	bl	1038 <keyPressed>
					break;
    1c80:	ea000007 	b	1ca4 <main+0xbd8>
				case 0xF0:	//Break code, make code should follow
					breakDetected = 1;
    1c84:	e3a03001 	mov	r3, #1
    1c88:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
					break;
    1c8c:	ea000005 	b	1ca8 <main+0xbdc>
				default:
					breakDetected = 0;	//Undefined key should not affect break boolean
    1c90:	e3a03000 	mov	r3, #0
    1c94:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
			}		
		}
	}
    1c98:	eafffe8a 	b	16c8 <main+0x5fc>
				case 0x4C:	//;	
					keyPressed(notes, 7, &breakDetected, yValues, amplitude);
					break;	
				case 0x55:	//+
					if (amplitude < maxAmplitude) keyPressed(notes, 8, &breakDetected, yValues, amplitude++);
					break;
    1c9c:	e1a00000 	nop			; (mov r0, r0)
    1ca0:	ea000000 	b	1ca8 <main+0xbdc>
				case 0x4E:	//-
					if (amplitude > minAmplitude) keyPressed(notes, 8, &breakDetected, yValues, amplitude--);
					break;
    1ca4:	e1a00000 	nop			; (mov r0, r0)
					break;
				default:
					breakDetected = 0;	//Undefined key should not affect break boolean
			}		
		}
	}
    1ca8:	eafffe86 	b	16c8 <main+0x5fc>

00001cac <__aeabi_idiv>:
    1cac:	e3510000 	cmp	r1, #0
    1cb0:	0a000043 	beq	1dc4 <.divsi3_skip_div0_test+0x110>

00001cb4 <.divsi3_skip_div0_test>:
    1cb4:	e020c001 	eor	r12, r0, r1
    1cb8:	42611000 	rsbmi	r1, r1, #0
    1cbc:	e2512001 	subs	r2, r1, #1
    1cc0:	0a000027 	beq	1d64 <.divsi3_skip_div0_test+0xb0>
    1cc4:	e1b03000 	movs	r3, r0
    1cc8:	42603000 	rsbmi	r3, r0, #0
    1ccc:	e1530001 	cmp	r3, r1
    1cd0:	9a000026 	bls	1d70 <.divsi3_skip_div0_test+0xbc>
    1cd4:	e1110002 	tst	r1, r2
    1cd8:	0a000028 	beq	1d80 <.divsi3_skip_div0_test+0xcc>
    1cdc:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1ce0:	01a01181 	lsleq	r1, r1, #3
    1ce4:	03a02008 	moveq	r2, #8
    1ce8:	13a02001 	movne	r2, #1
    1cec:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1cf0:	31510003 	cmpcc	r1, r3
    1cf4:	31a01201 	lslcc	r1, r1, #4
    1cf8:	31a02202 	lslcc	r2, r2, #4
    1cfc:	3afffffa 	bcc	1cec <.divsi3_skip_div0_test+0x38>
    1d00:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1d04:	31510003 	cmpcc	r1, r3
    1d08:	31a01081 	lslcc	r1, r1, #1
    1d0c:	31a02082 	lslcc	r2, r2, #1
    1d10:	3afffffa 	bcc	1d00 <.divsi3_skip_div0_test+0x4c>
    1d14:	e3a00000 	mov	r0, #0
    1d18:	e1530001 	cmp	r3, r1
    1d1c:	20433001 	subcs	r3, r3, r1
    1d20:	21800002 	orrcs	r0, r0, r2
    1d24:	e15300a1 	cmp	r3, r1, lsr #1
    1d28:	204330a1 	subcs	r3, r3, r1, lsr #1
    1d2c:	218000a2 	orrcs	r0, r0, r2, lsr #1
    1d30:	e1530121 	cmp	r3, r1, lsr #2
    1d34:	20433121 	subcs	r3, r3, r1, lsr #2
    1d38:	21800122 	orrcs	r0, r0, r2, lsr #2
    1d3c:	e15301a1 	cmp	r3, r1, lsr #3
    1d40:	204331a1 	subcs	r3, r3, r1, lsr #3
    1d44:	218001a2 	orrcs	r0, r0, r2, lsr #3
    1d48:	e3530000 	cmp	r3, #0
    1d4c:	11b02222 	lsrsne	r2, r2, #4
    1d50:	11a01221 	lsrne	r1, r1, #4
    1d54:	1affffef 	bne	1d18 <.divsi3_skip_div0_test+0x64>
    1d58:	e35c0000 	cmp	r12, #0
    1d5c:	42600000 	rsbmi	r0, r0, #0
    1d60:	e12fff1e 	bx	lr
    1d64:	e13c0000 	teq	r12, r0
    1d68:	42600000 	rsbmi	r0, r0, #0
    1d6c:	e12fff1e 	bx	lr
    1d70:	33a00000 	movcc	r0, #0
    1d74:	01a00fcc 	asreq	r0, r12, #31
    1d78:	03800001 	orreq	r0, r0, #1
    1d7c:	e12fff1e 	bx	lr
    1d80:	e3510801 	cmp	r1, #65536	; 0x10000
    1d84:	21a01821 	lsrcs	r1, r1, #16
    1d88:	23a02010 	movcs	r2, #16
    1d8c:	33a02000 	movcc	r2, #0
    1d90:	e3510c01 	cmp	r1, #256	; 0x100
    1d94:	21a01421 	lsrcs	r1, r1, #8
    1d98:	22822008 	addcs	r2, r2, #8
    1d9c:	e3510010 	cmp	r1, #16
    1da0:	21a01221 	lsrcs	r1, r1, #4
    1da4:	22822004 	addcs	r2, r2, #4
    1da8:	e3510004 	cmp	r1, #4
    1dac:	82822003 	addhi	r2, r2, #3
    1db0:	908220a1 	addls	r2, r2, r1, lsr #1
    1db4:	e35c0000 	cmp	r12, #0
    1db8:	e1a00233 	lsr	r0, r3, r2
    1dbc:	42600000 	rsbmi	r0, r0, #0
    1dc0:	e12fff1e 	bx	lr
    1dc4:	e3500000 	cmp	r0, #0
    1dc8:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    1dcc:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    1dd0:	ea000007 	b	1df4 <__aeabi_idiv0>

00001dd4 <__aeabi_idivmod>:
    1dd4:	e3510000 	cmp	r1, #0
    1dd8:	0afffff9 	beq	1dc4 <.divsi3_skip_div0_test+0x110>
    1ddc:	e92d4003 	push	{r0, r1, lr}
    1de0:	ebffffb3 	bl	1cb4 <.divsi3_skip_div0_test>
    1de4:	e8bd4006 	pop	{r1, r2, lr}
    1de8:	e0030092 	mul	r3, r2, r0
    1dec:	e0411003 	sub	r1, r1, r3
    1df0:	e12fff1e 	bx	lr

00001df4 <__aeabi_idiv0>:
    1df4:	e12fff1e 	bx	lr

00001df8 <__aeabi_drsub>:
    1df8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1dfc:	ea000000 	b	1e04 <__adddf3>

00001e00 <__aeabi_dsub>:
    1e00:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001e04 <__adddf3>:
    1e04:	e92d4030 	push	{r4, r5, lr}
    1e08:	e1a04081 	lsl	r4, r1, #1
    1e0c:	e1a05083 	lsl	r5, r3, #1
    1e10:	e1340005 	teq	r4, r5
    1e14:	01300002 	teqeq	r0, r2
    1e18:	1194c000 	orrsne	r12, r4, r0
    1e1c:	1195c002 	orrsne	r12, r5, r2
    1e20:	11f0cac4 	mvnsne	r12, r4, asr #21
    1e24:	11f0cac5 	mvnsne	r12, r5, asr #21
    1e28:	0a00008c 	beq	2060 <__adddf3+0x25c>
    1e2c:	e1a04aa4 	lsr	r4, r4, #21
    1e30:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1e34:	b2655000 	rsblt	r5, r5, #0
    1e38:	da000006 	ble	1e58 <__adddf3+0x54>
    1e3c:	e0844005 	add	r4, r4, r5
    1e40:	e0202002 	eor	r2, r0, r2
    1e44:	e0213003 	eor	r3, r1, r3
    1e48:	e0220000 	eor	r0, r2, r0
    1e4c:	e0231001 	eor	r1, r3, r1
    1e50:	e0202002 	eor	r2, r0, r2
    1e54:	e0213003 	eor	r3, r1, r3
    1e58:	e3550036 	cmp	r5, #54	; 0x36
    1e5c:	88bd4030 	pophi	{r4, r5, lr}
    1e60:	812fff1e 	bxhi	lr
    1e64:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1e68:	e1a01601 	lsl	r1, r1, #12
    1e6c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1e70:	e18c1621 	orr	r1, r12, r1, lsr #12
    1e74:	0a000001 	beq	1e80 <__adddf3+0x7c>
    1e78:	e2700000 	rsbs	r0, r0, #0
    1e7c:	e2e11000 	rsc	r1, r1, #0
    1e80:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1e84:	e1a03603 	lsl	r3, r3, #12
    1e88:	e18c3623 	orr	r3, r12, r3, lsr #12
    1e8c:	0a000001 	beq	1e98 <__adddf3+0x94>
    1e90:	e2722000 	rsbs	r2, r2, #0
    1e94:	e2e33000 	rsc	r3, r3, #0
    1e98:	e1340005 	teq	r4, r5
    1e9c:	0a000069 	beq	2048 <__adddf3+0x244>
    1ea0:	e2444001 	sub	r4, r4, #1
    1ea4:	e275e020 	rsbs	lr, r5, #32
    1ea8:	ba000005 	blt	1ec4 <__adddf3+0xc0>
    1eac:	e1a0ce12 	lsl	r12, r2, lr
    1eb0:	e0900532 	adds	r0, r0, r2, lsr r5
    1eb4:	e2a11000 	adc	r1, r1, #0
    1eb8:	e0900e13 	adds	r0, r0, r3, lsl lr
    1ebc:	e0b11553 	adcs	r1, r1, r3, asr r5
    1ec0:	ea000006 	b	1ee0 <__adddf3+0xdc>
    1ec4:	e2455020 	sub	r5, r5, #32
    1ec8:	e28ee020 	add	lr, lr, #32
    1ecc:	e3520001 	cmp	r2, #1
    1ed0:	e1a0ce13 	lsl	r12, r3, lr
    1ed4:	238cc002 	orrcs	r12, r12, #2
    1ed8:	e0900553 	adds	r0, r0, r3, asr r5
    1edc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1ee0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1ee4:	5a000002 	bpl	1ef4 <__adddf3+0xf0>
    1ee8:	e27cc000 	rsbs	r12, r12, #0
    1eec:	e2f00000 	rscs	r0, r0, #0
    1ef0:	e2e11000 	rsc	r1, r1, #0
    1ef4:	e3510601 	cmp	r1, #1048576	; 0x100000
    1ef8:	3a00000f 	bcc	1f3c <__adddf3+0x138>
    1efc:	e3510602 	cmp	r1, #2097152	; 0x200000
    1f00:	3a000006 	bcc	1f20 <__adddf3+0x11c>
    1f04:	e1b010a1 	lsrs	r1, r1, #1
    1f08:	e1b00060 	rrxs	r0, r0
    1f0c:	e1a0c06c 	rrx	r12, r12
    1f10:	e2844001 	add	r4, r4, #1
    1f14:	e1a02a84 	lsl	r2, r4, #21
    1f18:	e3720501 	cmn	r2, #4194304	; 0x400000
    1f1c:	2a00006b 	bcs	20d0 <__adddf3+0x2cc>
    1f20:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1f24:	01b0c0a0 	lsrseq	r12, r0, #1
    1f28:	e2b00000 	adcs	r0, r0, #0
    1f2c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1f30:	e1811005 	orr	r1, r1, r5
    1f34:	e8bd4030 	pop	{r4, r5, lr}
    1f38:	e12fff1e 	bx	lr
    1f3c:	e1b0c08c 	lsls	r12, r12, #1
    1f40:	e0b00000 	adcs	r0, r0, r0
    1f44:	e0a11001 	adc	r1, r1, r1
    1f48:	e3110601 	tst	r1, #1048576	; 0x100000
    1f4c:	e2444001 	sub	r4, r4, #1
    1f50:	1afffff2 	bne	1f20 <__adddf3+0x11c>
    1f54:	e3310000 	teq	r1, #0
    1f58:	13a03014 	movne	r3, #20
    1f5c:	03a03034 	moveq	r3, #52	; 0x34
    1f60:	01a01000 	moveq	r1, r0
    1f64:	03a00000 	moveq	r0, #0
    1f68:	e1a02001 	mov	r2, r1
    1f6c:	e3520801 	cmp	r2, #65536	; 0x10000
    1f70:	21a02822 	lsrcs	r2, r2, #16
    1f74:	22433010 	subcs	r3, r3, #16
    1f78:	e3520c01 	cmp	r2, #256	; 0x100
    1f7c:	21a02422 	lsrcs	r2, r2, #8
    1f80:	22433008 	subcs	r3, r3, #8
    1f84:	e3520010 	cmp	r2, #16
    1f88:	21a02222 	lsrcs	r2, r2, #4
    1f8c:	22433004 	subcs	r3, r3, #4
    1f90:	e3520004 	cmp	r2, #4
    1f94:	22433002 	subcs	r3, r3, #2
    1f98:	304330a2 	subcc	r3, r3, r2, lsr #1
    1f9c:	e04331a2 	sub	r3, r3, r2, lsr #3
    1fa0:	e2532020 	subs	r2, r3, #32
    1fa4:	aa000007 	bge	1fc8 <__adddf3+0x1c4>
    1fa8:	e292200c 	adds	r2, r2, #12
    1fac:	da000004 	ble	1fc4 <__adddf3+0x1c0>
    1fb0:	e282c014 	add	r12, r2, #20
    1fb4:	e262200c 	rsb	r2, r2, #12
    1fb8:	e1a00c11 	lsl	r0, r1, r12
    1fbc:	e1a01231 	lsr	r1, r1, r2
    1fc0:	ea000004 	b	1fd8 <__adddf3+0x1d4>
    1fc4:	e2822014 	add	r2, r2, #20
    1fc8:	d262c020 	rsble	r12, r2, #32
    1fcc:	e1a01211 	lsl	r1, r1, r2
    1fd0:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1fd4:	d1a00210 	lslle	r0, r0, r2
    1fd8:	e0544003 	subs	r4, r4, r3
    1fdc:	a0811a04 	addge	r1, r1, r4, lsl #20
    1fe0:	a1811005 	orrge	r1, r1, r5
    1fe4:	a8bd4030 	popge	{r4, r5, lr}
    1fe8:	a12fff1e 	bxge	lr
    1fec:	e1e04004 	mvn	r4, r4
    1ff0:	e254401f 	subs	r4, r4, #31
    1ff4:	aa00000f 	bge	2038 <__adddf3+0x234>
    1ff8:	e294400c 	adds	r4, r4, #12
    1ffc:	ca000006 	bgt	201c <__adddf3+0x218>
    2000:	e2844014 	add	r4, r4, #20
    2004:	e2642020 	rsb	r2, r4, #32
    2008:	e1a00430 	lsr	r0, r0, r4
    200c:	e1800211 	orr	r0, r0, r1, lsl r2
    2010:	e1851431 	orr	r1, r5, r1, lsr r4
    2014:	e8bd4030 	pop	{r4, r5, lr}
    2018:	e12fff1e 	bx	lr
    201c:	e264400c 	rsb	r4, r4, #12
    2020:	e2642020 	rsb	r2, r4, #32
    2024:	e1a00230 	lsr	r0, r0, r2
    2028:	e1800411 	orr	r0, r0, r1, lsl r4
    202c:	e1a01005 	mov	r1, r5
    2030:	e8bd4030 	pop	{r4, r5, lr}
    2034:	e12fff1e 	bx	lr
    2038:	e1a00431 	lsr	r0, r1, r4
    203c:	e1a01005 	mov	r1, r5
    2040:	e8bd4030 	pop	{r4, r5, lr}
    2044:	e12fff1e 	bx	lr
    2048:	e3340000 	teq	r4, #0
    204c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    2050:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    2054:	02844001 	addeq	r4, r4, #1
    2058:	12455001 	subne	r5, r5, #1
    205c:	eaffff8f 	b	1ea0 <__adddf3+0x9c>
    2060:	e1f0cac4 	mvns	r12, r4, asr #21
    2064:	11f0cac5 	mvnsne	r12, r5, asr #21
    2068:	0a00001d 	beq	20e4 <__adddf3+0x2e0>
    206c:	e1340005 	teq	r4, r5
    2070:	01300002 	teqeq	r0, r2
    2074:	0a000004 	beq	208c <__adddf3+0x288>
    2078:	e194c000 	orrs	r12, r4, r0
    207c:	01a01003 	moveq	r1, r3
    2080:	01a00002 	moveq	r0, r2
    2084:	e8bd4030 	pop	{r4, r5, lr}
    2088:	e12fff1e 	bx	lr
    208c:	e1310003 	teq	r1, r3
    2090:	13a01000 	movne	r1, #0
    2094:	13a00000 	movne	r0, #0
    2098:	18bd4030 	popne	{r4, r5, lr}
    209c:	112fff1e 	bxne	lr
    20a0:	e1b0caa4 	lsrs	r12, r4, #21
    20a4:	1a000004 	bne	20bc <__adddf3+0x2b8>
    20a8:	e1b00080 	lsls	r0, r0, #1
    20ac:	e0b11001 	adcs	r1, r1, r1
    20b0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    20b4:	e8bd4030 	pop	{r4, r5, lr}
    20b8:	e12fff1e 	bx	lr
    20bc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    20c0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    20c4:	38bd4030 	popcc	{r4, r5, lr}
    20c8:	312fff1e 	bxcc	lr
    20cc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    20d0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    20d4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    20d8:	e3a00000 	mov	r0, #0
    20dc:	e8bd4030 	pop	{r4, r5, lr}
    20e0:	e12fff1e 	bx	lr
    20e4:	e1f0cac4 	mvns	r12, r4, asr #21
    20e8:	11a01003 	movne	r1, r3
    20ec:	11a00002 	movne	r0, r2
    20f0:	01f0cac5 	mvnseq	r12, r5, asr #21
    20f4:	11a03001 	movne	r3, r1
    20f8:	11a02000 	movne	r2, r0
    20fc:	e1904601 	orrs	r4, r0, r1, lsl #12
    2100:	01925603 	orrseq	r5, r2, r3, lsl #12
    2104:	01310003 	teqeq	r1, r3
    2108:	13811702 	orrne	r1, r1, #524288	; 0x80000
    210c:	e8bd4030 	pop	{r4, r5, lr}
    2110:	e12fff1e 	bx	lr

00002114 <__aeabi_ui2d>:
    2114:	e3300000 	teq	r0, #0
    2118:	03a01000 	moveq	r1, #0
    211c:	012fff1e 	bxeq	lr
    2120:	e92d4030 	push	{r4, r5, lr}
    2124:	e3a04b01 	mov	r4, #1024	; 0x400
    2128:	e2844032 	add	r4, r4, #50	; 0x32
    212c:	e3a05000 	mov	r5, #0
    2130:	e3a01000 	mov	r1, #0
    2134:	eaffff86 	b	1f54 <__adddf3+0x150>

00002138 <__aeabi_i2d>:
    2138:	e3300000 	teq	r0, #0
    213c:	03a01000 	moveq	r1, #0
    2140:	012fff1e 	bxeq	lr
    2144:	e92d4030 	push	{r4, r5, lr}
    2148:	e3a04b01 	mov	r4, #1024	; 0x400
    214c:	e2844032 	add	r4, r4, #50	; 0x32
    2150:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    2154:	42600000 	rsbmi	r0, r0, #0
    2158:	e3a01000 	mov	r1, #0
    215c:	eaffff7c 	b	1f54 <__adddf3+0x150>

00002160 <__aeabi_f2d>:
    2160:	e1b02080 	lsls	r2, r0, #1
    2164:	e1a011c2 	asr	r1, r2, #3
    2168:	e1a01061 	rrx	r1, r1
    216c:	e1a00e02 	lsl	r0, r2, #28
    2170:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    2174:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2178:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    217c:	112fff1e 	bxne	lr
    2180:	e3320000 	teq	r2, #0
    2184:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2188:	012fff1e 	bxeq	lr
    218c:	e92d4030 	push	{r4, r5, lr}
    2190:	e3a04d0e 	mov	r4, #896	; 0x380
    2194:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2198:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    219c:	eaffff6c 	b	1f54 <__adddf3+0x150>

000021a0 <__aeabi_ul2d>:
    21a0:	e1902001 	orrs	r2, r0, r1
    21a4:	012fff1e 	bxeq	lr
    21a8:	e92d4030 	push	{r4, r5, lr}
    21ac:	e3a05000 	mov	r5, #0
    21b0:	ea000006 	b	21d0 <__aeabi_l2d+0x1c>

000021b4 <__aeabi_l2d>:
    21b4:	e1902001 	orrs	r2, r0, r1
    21b8:	012fff1e 	bxeq	lr
    21bc:	e92d4030 	push	{r4, r5, lr}
    21c0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    21c4:	5a000001 	bpl	21d0 <__aeabi_l2d+0x1c>
    21c8:	e2700000 	rsbs	r0, r0, #0
    21cc:	e2e11000 	rsc	r1, r1, #0
    21d0:	e3a04b01 	mov	r4, #1024	; 0x400
    21d4:	e2844032 	add	r4, r4, #50	; 0x32
    21d8:	e1b0cb21 	lsrs	r12, r1, #22
    21dc:	0affff44 	beq	1ef4 <__adddf3+0xf0>
    21e0:	e3a02003 	mov	r2, #3
    21e4:	e1b0c1ac 	lsrs	r12, r12, #3
    21e8:	12822003 	addne	r2, r2, #3
    21ec:	e1b0c1ac 	lsrs	r12, r12, #3
    21f0:	12822003 	addne	r2, r2, #3
    21f4:	e08221ac 	add	r2, r2, r12, lsr #3
    21f8:	e2623020 	rsb	r3, r2, #32
    21fc:	e1a0c310 	lsl	r12, r0, r3
    2200:	e1a00230 	lsr	r0, r0, r2
    2204:	e1800311 	orr	r0, r0, r1, lsl r3
    2208:	e1a01231 	lsr	r1, r1, r2
    220c:	e0844002 	add	r4, r4, r2
    2210:	eaffff37 	b	1ef4 <__adddf3+0xf0>

00002214 <__aeabi_dmul>:
    2214:	e92d4070 	push	{r4, r5, r6, lr}
    2218:	e3a0c0ff 	mov	r12, #255	; 0xff
    221c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    2220:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2224:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2228:	1134000c 	teqne	r4, r12
    222c:	1135000c 	teqne	r5, r12
    2230:	0b000075 	bleq	240c <__aeabi_dmul+0x1f8>
    2234:	e0844005 	add	r4, r4, r5
    2238:	e0216003 	eor	r6, r1, r3
    223c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    2240:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    2244:	e1905601 	orrs	r5, r0, r1, lsl #12
    2248:	11925603 	orrsne	r5, r2, r3, lsl #12
    224c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2250:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    2254:	0a00001d 	beq	22d0 <__aeabi_dmul+0xbc>
    2258:	e08ec290 	umull	r12, lr, r0, r2
    225c:	e3a05000 	mov	r5, #0
    2260:	e0a5e291 	umlal	lr, r5, r1, r2
    2264:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2268:	e0a5e390 	umlal	lr, r5, r0, r3
    226c:	e3a06000 	mov	r6, #0
    2270:	e0a65391 	umlal	r5, r6, r1, r3
    2274:	e33c0000 	teq	r12, #0
    2278:	138ee001 	orrne	lr, lr, #1
    227c:	e24440ff 	sub	r4, r4, #255	; 0xff
    2280:	e3560c02 	cmp	r6, #512	; 0x200
    2284:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2288:	2a000002 	bcs	2298 <__aeabi_dmul+0x84>
    228c:	e1b0e08e 	lsls	lr, lr, #1
    2290:	e0b55005 	adcs	r5, r5, r5
    2294:	e0a66006 	adc	r6, r6, r6
    2298:	e1821586 	orr	r1, r2, r6, lsl #11
    229c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    22a0:	e1a00585 	lsl	r0, r5, #11
    22a4:	e1800aae 	orr	r0, r0, lr, lsr #21
    22a8:	e1a0e58e 	lsl	lr, lr, #11
    22ac:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    22b0:	835c0c07 	cmphi	r12, #1792	; 0x700
    22b4:	8a000011 	bhi	2300 <__aeabi_dmul+0xec>
    22b8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    22bc:	01b0e0a0 	lsrseq	lr, r0, #1
    22c0:	e2b00000 	adcs	r0, r0, #0
    22c4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    22c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    22cc:	e12fff1e 	bx	lr
    22d0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    22d4:	e1861001 	orr	r1, r6, r1
    22d8:	e1800002 	orr	r0, r0, r2
    22dc:	e0211003 	eor	r1, r1, r3
    22e0:	e05440ac 	subs	r4, r4, r12, lsr #1
    22e4:	c074500c 	rsbsgt	r5, r4, r12
    22e8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    22ec:	c8bd4070 	popgt	{r4, r5, r6, lr}
    22f0:	c12fff1e 	bxgt	lr
    22f4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    22f8:	e3a0e000 	mov	lr, #0
    22fc:	e2544001 	subs	r4, r4, #1
    2300:	ca00005d 	bgt	247c <__aeabi_dmul+0x268>
    2304:	e3740036 	cmn	r4, #54	; 0x36
    2308:	d3a00000 	movle	r0, #0
    230c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    2310:	d8bd4070 	pople	{r4, r5, r6, lr}
    2314:	d12fff1e 	bxle	lr
    2318:	e2644000 	rsb	r4, r4, #0
    231c:	e2544020 	subs	r4, r4, #32
    2320:	aa00001a 	bge	2390 <__aeabi_dmul+0x17c>
    2324:	e294400c 	adds	r4, r4, #12
    2328:	ca00000c 	bgt	2360 <__aeabi_dmul+0x14c>
    232c:	e2844014 	add	r4, r4, #20
    2330:	e2645020 	rsb	r5, r4, #32
    2334:	e1a03510 	lsl	r3, r0, r5
    2338:	e1a00430 	lsr	r0, r0, r4
    233c:	e1800511 	orr	r0, r0, r1, lsl r5
    2340:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2344:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2348:	e0900fa3 	adds	r0, r0, r3, lsr #31
    234c:	e0a21431 	adc	r1, r2, r1, lsr r4
    2350:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2354:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2358:	e8bd4070 	pop	{r4, r5, r6, lr}
    235c:	e12fff1e 	bx	lr
    2360:	e264400c 	rsb	r4, r4, #12
    2364:	e2645020 	rsb	r5, r4, #32
    2368:	e1a03410 	lsl	r3, r0, r4
    236c:	e1a00530 	lsr	r0, r0, r5
    2370:	e1800411 	orr	r0, r0, r1, lsl r4
    2374:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2378:	e0900fa3 	adds	r0, r0, r3, lsr #31
    237c:	e2a11000 	adc	r1, r1, #0
    2380:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2384:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2388:	e8bd4070 	pop	{r4, r5, r6, lr}
    238c:	e12fff1e 	bx	lr
    2390:	e2645020 	rsb	r5, r4, #32
    2394:	e18ee510 	orr	lr, lr, r0, lsl r5
    2398:	e1a03430 	lsr	r3, r0, r4
    239c:	e1833511 	orr	r3, r3, r1, lsl r5
    23a0:	e1a00431 	lsr	r0, r1, r4
    23a4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    23a8:	e1c00431 	bic	r0, r0, r1, lsr r4
    23ac:	e0800fa3 	add	r0, r0, r3, lsr #31
    23b0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    23b4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    23b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    23bc:	e12fff1e 	bx	lr
    23c0:	e3340000 	teq	r4, #0
    23c4:	1a000008 	bne	23ec <__aeabi_dmul+0x1d8>
    23c8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    23cc:	e1b00080 	lsls	r0, r0, #1
    23d0:	e0a11001 	adc	r1, r1, r1
    23d4:	e3110601 	tst	r1, #1048576	; 0x100000
    23d8:	02444001 	subeq	r4, r4, #1
    23dc:	0afffffa 	beq	23cc <__aeabi_dmul+0x1b8>
    23e0:	e1811006 	orr	r1, r1, r6
    23e4:	e3350000 	teq	r5, #0
    23e8:	112fff1e 	bxne	lr
    23ec:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    23f0:	e1b02082 	lsls	r2, r2, #1
    23f4:	e0a33003 	adc	r3, r3, r3
    23f8:	e3130601 	tst	r3, #1048576	; 0x100000
    23fc:	02455001 	subeq	r5, r5, #1
    2400:	0afffffa 	beq	23f0 <__aeabi_dmul+0x1dc>
    2404:	e1833006 	orr	r3, r3, r6
    2408:	e12fff1e 	bx	lr
    240c:	e134000c 	teq	r4, r12
    2410:	e00c5a23 	and	r5, r12, r3, lsr #20
    2414:	1135000c 	teqne	r5, r12
    2418:	0a000007 	beq	243c <__aeabi_dmul+0x228>
    241c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2420:	11926083 	orrsne	r6, r2, r3, lsl #1
    2424:	1affffe5 	bne	23c0 <__aeabi_dmul+0x1ac>
    2428:	e0211003 	eor	r1, r1, r3
    242c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2430:	e3a00000 	mov	r0, #0
    2434:	e8bd4070 	pop	{r4, r5, r6, lr}
    2438:	e12fff1e 	bx	lr
    243c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2440:	01a00002 	moveq	r0, r2
    2444:	01a01003 	moveq	r1, r3
    2448:	11926083 	orrsne	r6, r2, r3, lsl #1
    244c:	0a000010 	beq	2494 <__aeabi_dmul+0x280>
    2450:	e134000c 	teq	r4, r12
    2454:	1a000001 	bne	2460 <__aeabi_dmul+0x24c>
    2458:	e1906601 	orrs	r6, r0, r1, lsl #12
    245c:	1a00000c 	bne	2494 <__aeabi_dmul+0x280>
    2460:	e135000c 	teq	r5, r12
    2464:	1a000003 	bne	2478 <__aeabi_dmul+0x264>
    2468:	e1926603 	orrs	r6, r2, r3, lsl #12
    246c:	11a00002 	movne	r0, r2
    2470:	11a01003 	movne	r1, r3
    2474:	1a000006 	bne	2494 <__aeabi_dmul+0x280>
    2478:	e0211003 	eor	r1, r1, r3
    247c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2480:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2484:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2488:	e3a00000 	mov	r0, #0
    248c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2490:	e12fff1e 	bx	lr
    2494:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2498:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    249c:	e8bd4070 	pop	{r4, r5, r6, lr}
    24a0:	e12fff1e 	bx	lr

000024a4 <__aeabi_ddiv>:
    24a4:	e92d4070 	push	{r4, r5, r6, lr}
    24a8:	e3a0c0ff 	mov	r12, #255	; 0xff
    24ac:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    24b0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    24b4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    24b8:	1134000c 	teqne	r4, r12
    24bc:	1135000c 	teqne	r5, r12
    24c0:	0b00005e 	bleq	2640 <__aeabi_ddiv+0x19c>
    24c4:	e0444005 	sub	r4, r4, r5
    24c8:	e021e003 	eor	lr, r1, r3
    24cc:	e1925603 	orrs	r5, r2, r3, lsl #12
    24d0:	e1a01601 	lsl	r1, r1, #12
    24d4:	0a00004c 	beq	260c <__aeabi_ddiv+0x168>
    24d8:	e1a03603 	lsl	r3, r3, #12
    24dc:	e3a05201 	mov	r5, #268435456	; 0x10000000
    24e0:	e1853223 	orr	r3, r5, r3, lsr #4
    24e4:	e1833c22 	orr	r3, r3, r2, lsr #24
    24e8:	e1a02402 	lsl	r2, r2, #8
    24ec:	e1855221 	orr	r5, r5, r1, lsr #4
    24f0:	e1855c20 	orr	r5, r5, r0, lsr #24
    24f4:	e1a06400 	lsl	r6, r0, #8
    24f8:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    24fc:	e1550003 	cmp	r5, r3
    2500:	01560002 	cmpeq	r6, r2
    2504:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    2508:	e2844c03 	add	r4, r4, #768	; 0x300
    250c:	2a000001 	bcs	2518 <__aeabi_ddiv+0x74>
    2510:	e1b030a3 	lsrs	r3, r3, #1
    2514:	e1a02062 	rrx	r2, r2
    2518:	e0566002 	subs	r6, r6, r2
    251c:	e0c55003 	sbc	r5, r5, r3
    2520:	e1b030a3 	lsrs	r3, r3, #1
    2524:	e1a02062 	rrx	r2, r2
    2528:	e3a00601 	mov	r0, #1048576	; 0x100000
    252c:	e3a0c702 	mov	r12, #524288	; 0x80000
    2530:	e056e002 	subs	lr, r6, r2
    2534:	e0d5e003 	sbcs	lr, r5, r3
    2538:	20466002 	subcs	r6, r6, r2
    253c:	21a0500e 	movcs	r5, lr
    2540:	2180000c 	orrcs	r0, r0, r12
    2544:	e1b030a3 	lsrs	r3, r3, #1
    2548:	e1a02062 	rrx	r2, r2
    254c:	e056e002 	subs	lr, r6, r2
    2550:	e0d5e003 	sbcs	lr, r5, r3
    2554:	20466002 	subcs	r6, r6, r2
    2558:	21a0500e 	movcs	r5, lr
    255c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2560:	e1b030a3 	lsrs	r3, r3, #1
    2564:	e1a02062 	rrx	r2, r2
    2568:	e056e002 	subs	lr, r6, r2
    256c:	e0d5e003 	sbcs	lr, r5, r3
    2570:	20466002 	subcs	r6, r6, r2
    2574:	21a0500e 	movcs	r5, lr
    2578:	2180012c 	orrcs	r0, r0, r12, lsr #2
    257c:	e1b030a3 	lsrs	r3, r3, #1
    2580:	e1a02062 	rrx	r2, r2
    2584:	e056e002 	subs	lr, r6, r2
    2588:	e0d5e003 	sbcs	lr, r5, r3
    258c:	20466002 	subcs	r6, r6, r2
    2590:	21a0500e 	movcs	r5, lr
    2594:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2598:	e195e006 	orrs	lr, r5, r6
    259c:	0a00000d 	beq	25d8 <__aeabi_ddiv+0x134>
    25a0:	e1a05205 	lsl	r5, r5, #4
    25a4:	e1855e26 	orr	r5, r5, r6, lsr #28
    25a8:	e1a06206 	lsl	r6, r6, #4
    25ac:	e1a03183 	lsl	r3, r3, #3
    25b0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    25b4:	e1a02182 	lsl	r2, r2, #3
    25b8:	e1b0c22c 	lsrs	r12, r12, #4
    25bc:	1affffdb 	bne	2530 <__aeabi_ddiv+0x8c>
    25c0:	e3110601 	tst	r1, #1048576	; 0x100000
    25c4:	1a000006 	bne	25e4 <__aeabi_ddiv+0x140>
    25c8:	e1811000 	orr	r1, r1, r0
    25cc:	e3a00000 	mov	r0, #0
    25d0:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    25d4:	eaffffd5 	b	2530 <__aeabi_ddiv+0x8c>
    25d8:	e3110601 	tst	r1, #1048576	; 0x100000
    25dc:	01811000 	orreq	r1, r1, r0
    25e0:	03a00000 	moveq	r0, #0
    25e4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    25e8:	835c0c07 	cmphi	r12, #1792	; 0x700
    25ec:	8affff43 	bhi	2300 <__aeabi_dmul+0xec>
    25f0:	e055c003 	subs	r12, r5, r3
    25f4:	0056c002 	subseq	r12, r6, r2
    25f8:	01b0c0a0 	lsrseq	r12, r0, #1
    25fc:	e2b00000 	adcs	r0, r0, #0
    2600:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2604:	e8bd4070 	pop	{r4, r5, r6, lr}
    2608:	e12fff1e 	bx	lr
    260c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2610:	e18e1621 	orr	r1, lr, r1, lsr #12
    2614:	e09440ac 	adds	r4, r4, r12, lsr #1
    2618:	c074500c 	rsbsgt	r5, r4, r12
    261c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2620:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2624:	c12fff1e 	bxgt	lr
    2628:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    262c:	e3a0e000 	mov	lr, #0
    2630:	e2544001 	subs	r4, r4, #1
    2634:	eaffff31 	b	2300 <__aeabi_dmul+0xec>
    2638:	e185e006 	orr	lr, r5, r6
    263c:	eaffff2f 	b	2300 <__aeabi_dmul+0xec>
    2640:	e00c5a23 	and	r5, r12, r3, lsr #20
    2644:	e134000c 	teq	r4, r12
    2648:	0135000c 	teqeq	r5, r12
    264c:	0affff90 	beq	2494 <__aeabi_dmul+0x280>
    2650:	e134000c 	teq	r4, r12
    2654:	1a000006 	bne	2674 <__aeabi_ddiv+0x1d0>
    2658:	e1904601 	orrs	r4, r0, r1, lsl #12
    265c:	1affff8c 	bne	2494 <__aeabi_dmul+0x280>
    2660:	e135000c 	teq	r5, r12
    2664:	1affff83 	bne	2478 <__aeabi_dmul+0x264>
    2668:	e1a00002 	mov	r0, r2
    266c:	e1a01003 	mov	r1, r3
    2670:	eaffff87 	b	2494 <__aeabi_dmul+0x280>
    2674:	e135000c 	teq	r5, r12
    2678:	1a000004 	bne	2690 <__aeabi_ddiv+0x1ec>
    267c:	e1925603 	orrs	r5, r2, r3, lsl #12
    2680:	0affff68 	beq	2428 <__aeabi_dmul+0x214>
    2684:	e1a00002 	mov	r0, r2
    2688:	e1a01003 	mov	r1, r3
    268c:	eaffff80 	b	2494 <__aeabi_dmul+0x280>
    2690:	e1906081 	orrs	r6, r0, r1, lsl #1
    2694:	11926083 	orrsne	r6, r2, r3, lsl #1
    2698:	1affff48 	bne	23c0 <__aeabi_dmul+0x1ac>
    269c:	e1904081 	orrs	r4, r0, r1, lsl #1
    26a0:	1affff74 	bne	2478 <__aeabi_dmul+0x264>
    26a4:	e1925083 	orrs	r5, r2, r3, lsl #1
    26a8:	1affff5e 	bne	2428 <__aeabi_dmul+0x214>
    26ac:	eaffff78 	b	2494 <__aeabi_dmul+0x280>

000026b0 <__aeabi_d2iz>:
    26b0:	e1a02081 	lsl	r2, r1, #1
    26b4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    26b8:	2a00000c 	bcs	26f0 <__aeabi_d2iz+0x40>
    26bc:	5a000009 	bpl	26e8 <__aeabi_d2iz+0x38>
    26c0:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    26c4:	e0532ac2 	subs	r2, r3, r2, asr #21
    26c8:	9a00000a 	bls	26f8 <__aeabi_d2iz+0x48>
    26cc:	e1a03581 	lsl	r3, r1, #11
    26d0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    26d4:	e1833aa0 	orr	r3, r3, r0, lsr #21
    26d8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    26dc:	e1a00233 	lsr	r0, r3, r2
    26e0:	12600000 	rsbne	r0, r0, #0
    26e4:	e12fff1e 	bx	lr
    26e8:	e3a00000 	mov	r0, #0
    26ec:	e12fff1e 	bx	lr
    26f0:	e1900601 	orrs	r0, r0, r1, lsl #12
    26f4:	1a000002 	bne	2704 <__aeabi_d2iz+0x54>
    26f8:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    26fc:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2700:	e12fff1e 	bx	lr
    2704:	e3a00000 	mov	r0, #0
    2708:	e12fff1e 	bx	lr

0000270c <__aeabi_d2f>:
    270c:	e1a02081 	lsl	r2, r1, #1
    2710:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    2714:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    2718:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    271c:	9a000006 	bls	273c <__aeabi_d2f+0x30>
    2720:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2724:	e1a02180 	lsl	r2, r0, #3
    2728:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    272c:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    2730:	e0a00103 	adc	r0, r0, r3, lsl #2
    2734:	03c00001 	biceq	r0, r0, #1
    2738:	e12fff1e 	bx	lr
    273c:	e3110101 	tst	r1, #1073741824	; 0x40000000
    2740:	1a00000f 	bne	2784 <__aeabi_d2f+0x78>
    2744:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    2748:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    274c:	b12fff1e 	bxlt	lr
    2750:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2754:	e1a02aa2 	lsr	r2, r2, #21
    2758:	e2622018 	rsb	r2, r2, #24
    275c:	e262c020 	rsb	r12, r2, #32
    2760:	e1b03c10 	lsls	r3, r0, r12
    2764:	e1a00230 	lsr	r0, r0, r2
    2768:	13800001 	orrne	r0, r0, #1
    276c:	e1a03581 	lsl	r3, r1, #11
    2770:	e1a035a3 	lsr	r3, r3, #11
    2774:	e1800c13 	orr	r0, r0, r3, lsl r12
    2778:	e1a03233 	lsr	r3, r3, r2
    277c:	e1a03083 	lsl	r3, r3, #1
    2780:	eaffffe6 	b	2720 <__aeabi_d2f+0x14>
    2784:	e1f03ac2 	mvns	r3, r2, asr #21
    2788:	1a000003 	bne	279c <__aeabi_d2f+0x90>
    278c:	e1903601 	orrs	r3, r0, r1, lsl #12
    2790:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    2794:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    2798:	112fff1e 	bxne	lr
    279c:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    27a0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    27a4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    27a8:	e12fff1e 	bx	lr

000027ac <__aeabi_frsub>:
    27ac:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    27b0:	ea000000 	b	27b8 <__addsf3>

000027b4 <__aeabi_fsub>:
    27b4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000027b8 <__addsf3>:
    27b8:	e1b02080 	lsls	r2, r0, #1
    27bc:	11b03081 	lslsne	r3, r1, #1
    27c0:	11320003 	teqne	r2, r3
    27c4:	11f0cc42 	mvnsne	r12, r2, asr #24
    27c8:	11f0cc43 	mvnsne	r12, r3, asr #24
    27cc:	0a000047 	beq	28f0 <__addsf3+0x138>
    27d0:	e1a02c22 	lsr	r2, r2, #24
    27d4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    27d8:	c0822003 	addgt	r2, r2, r3
    27dc:	c0201001 	eorgt	r1, r0, r1
    27e0:	c0210000 	eorgt	r0, r1, r0
    27e4:	c0201001 	eorgt	r1, r0, r1
    27e8:	b2633000 	rsblt	r3, r3, #0
    27ec:	e3530019 	cmp	r3, #25
    27f0:	812fff1e 	bxhi	lr
    27f4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    27f8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    27fc:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    2800:	12600000 	rsbne	r0, r0, #0
    2804:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2808:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    280c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2810:	12611000 	rsbne	r1, r1, #0
    2814:	e1320003 	teq	r2, r3
    2818:	0a00002e 	beq	28d8 <__addsf3+0x120>
    281c:	e2422001 	sub	r2, r2, #1
    2820:	e0900351 	adds	r0, r0, r1, asr r3
    2824:	e2633020 	rsb	r3, r3, #32
    2828:	e1a01311 	lsl	r1, r1, r3
    282c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2830:	5a000001 	bpl	283c <__addsf3+0x84>
    2834:	e2711000 	rsbs	r1, r1, #0
    2838:	e2e00000 	rsc	r0, r0, #0
    283c:	e3500502 	cmp	r0, #8388608	; 0x800000
    2840:	3a00000b 	bcc	2874 <__addsf3+0xbc>
    2844:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2848:	3a000004 	bcc	2860 <__addsf3+0xa8>
    284c:	e1b000a0 	lsrs	r0, r0, #1
    2850:	e1a01061 	rrx	r1, r1
    2854:	e2822001 	add	r2, r2, #1
    2858:	e35200fe 	cmp	r2, #254	; 0xfe
    285c:	2a000038 	bcs	2944 <__addsf3+0x18c>
    2860:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2864:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2868:	03c00001 	biceq	r0, r0, #1
    286c:	e1800003 	orr	r0, r0, r3
    2870:	e12fff1e 	bx	lr
    2874:	e1b01081 	lsls	r1, r1, #1
    2878:	e0a00000 	adc	r0, r0, r0
    287c:	e3100502 	tst	r0, #8388608	; 0x800000
    2880:	e2422001 	sub	r2, r2, #1
    2884:	1afffff5 	bne	2860 <__addsf3+0xa8>
    2888:	e1b0c620 	lsrs	r12, r0, #12
    288c:	01a00600 	lsleq	r0, r0, #12
    2890:	0242200c 	subeq	r2, r2, #12
    2894:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2898:	01a00400 	lsleq	r0, r0, #8
    289c:	02422008 	subeq	r2, r2, #8
    28a0:	e310060f 	tst	r0, #15728640	; 0xf00000
    28a4:	01a00200 	lsleq	r0, r0, #4
    28a8:	02422004 	subeq	r2, r2, #4
    28ac:	e3100503 	tst	r0, #12582912	; 0xc00000
    28b0:	01a00100 	lsleq	r0, r0, #2
    28b4:	02422002 	subeq	r2, r2, #2
    28b8:	e3500502 	cmp	r0, #8388608	; 0x800000
    28bc:	31a00080 	lslcc	r0, r0, #1
    28c0:	e2d22000 	sbcs	r2, r2, #0
    28c4:	a0800b82 	addge	r0, r0, r2, lsl #23
    28c8:	b2622000 	rsblt	r2, r2, #0
    28cc:	a1800003 	orrge	r0, r0, r3
    28d0:	b1830230 	orrlt	r0, r3, r0, lsr r2
    28d4:	e12fff1e 	bx	lr
    28d8:	e3320000 	teq	r2, #0
    28dc:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    28e0:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    28e4:	02822001 	addeq	r2, r2, #1
    28e8:	12433001 	subne	r3, r3, #1
    28ec:	eaffffca 	b	281c <__addsf3+0x64>
    28f0:	e1a03081 	lsl	r3, r1, #1
    28f4:	e1f0cc42 	mvns	r12, r2, asr #24
    28f8:	11f0cc43 	mvnsne	r12, r3, asr #24
    28fc:	0a000013 	beq	2950 <__addsf3+0x198>
    2900:	e1320003 	teq	r2, r3
    2904:	0a000002 	beq	2914 <__addsf3+0x15c>
    2908:	e3320000 	teq	r2, #0
    290c:	01a00001 	moveq	r0, r1
    2910:	e12fff1e 	bx	lr
    2914:	e1300001 	teq	r0, r1
    2918:	13a00000 	movne	r0, #0
    291c:	112fff1e 	bxne	lr
    2920:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2924:	1a000002 	bne	2934 <__addsf3+0x17c>
    2928:	e1b00080 	lsls	r0, r0, #1
    292c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2930:	e12fff1e 	bx	lr
    2934:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2938:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    293c:	312fff1e 	bxcc	lr
    2940:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2944:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2948:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    294c:	e12fff1e 	bx	lr
    2950:	e1f02c42 	mvns	r2, r2, asr #24
    2954:	11a00001 	movne	r0, r1
    2958:	01f03c43 	mvnseq	r3, r3, asr #24
    295c:	11a01000 	movne	r1, r0
    2960:	e1b02480 	lsls	r2, r0, #9
    2964:	01b03481 	lslseq	r3, r1, #9
    2968:	01300001 	teqeq	r0, r1
    296c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2970:	e12fff1e 	bx	lr

00002974 <__aeabi_ui2f>:
    2974:	e3a03000 	mov	r3, #0
    2978:	ea000001 	b	2984 <__aeabi_i2f+0x8>

0000297c <__aeabi_i2f>:
    297c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2980:	42600000 	rsbmi	r0, r0, #0
    2984:	e1b0c000 	movs	r12, r0
    2988:	012fff1e 	bxeq	lr
    298c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2990:	e1a01000 	mov	r1, r0
    2994:	e3a00000 	mov	r0, #0
    2998:	ea00000f 	b	29dc <__aeabi_l2f+0x30>

0000299c <__aeabi_ul2f>:
    299c:	e1902001 	orrs	r2, r0, r1
    29a0:	012fff1e 	bxeq	lr
    29a4:	e3a03000 	mov	r3, #0
    29a8:	ea000005 	b	29c4 <__aeabi_l2f+0x18>

000029ac <__aeabi_l2f>:
    29ac:	e1902001 	orrs	r2, r0, r1
    29b0:	012fff1e 	bxeq	lr
    29b4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    29b8:	5a000001 	bpl	29c4 <__aeabi_l2f+0x18>
    29bc:	e2700000 	rsbs	r0, r0, #0
    29c0:	e2e11000 	rsc	r1, r1, #0
    29c4:	e1b0c001 	movs	r12, r1
    29c8:	01a0c000 	moveq	r12, r0
    29cc:	01a01000 	moveq	r1, r0
    29d0:	03a00000 	moveq	r0, #0
    29d4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    29d8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    29dc:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    29e0:	e3a02017 	mov	r2, #23
    29e4:	e35c0801 	cmp	r12, #65536	; 0x10000
    29e8:	21a0c82c 	lsrcs	r12, r12, #16
    29ec:	22422010 	subcs	r2, r2, #16
    29f0:	e35c0c01 	cmp	r12, #256	; 0x100
    29f4:	21a0c42c 	lsrcs	r12, r12, #8
    29f8:	22422008 	subcs	r2, r2, #8
    29fc:	e35c0010 	cmp	r12, #16
    2a00:	21a0c22c 	lsrcs	r12, r12, #4
    2a04:	22422004 	subcs	r2, r2, #4
    2a08:	e35c0004 	cmp	r12, #4
    2a0c:	22422002 	subcs	r2, r2, #2
    2a10:	304220ac 	subcc	r2, r2, r12, lsr #1
    2a14:	e05221ac 	subs	r2, r2, r12, lsr #3
    2a18:	e0433b82 	sub	r3, r3, r2, lsl #23
    2a1c:	ba000006 	blt	2a3c <__aeabi_l2f+0x90>
    2a20:	e0833211 	add	r3, r3, r1, lsl r2
    2a24:	e1a0c210 	lsl	r12, r0, r2
    2a28:	e2622020 	rsb	r2, r2, #32
    2a2c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2a30:	e0a30230 	adc	r0, r3, r0, lsr r2
    2a34:	03c00001 	biceq	r0, r0, #1
    2a38:	e12fff1e 	bx	lr
    2a3c:	e2822020 	add	r2, r2, #32
    2a40:	e1a0c211 	lsl	r12, r1, r2
    2a44:	e2622020 	rsb	r2, r2, #32
    2a48:	e190008c 	orrs	r0, r0, r12, lsl #1
    2a4c:	e0a30231 	adc	r0, r3, r1, lsr r2
    2a50:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2a54:	e12fff1e 	bx	lr

00002a58 <__aeabi_fmul>:
    2a58:	e3a0c0ff 	mov	r12, #255	; 0xff
    2a5c:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2a60:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2a64:	1132000c 	teqne	r2, r12
    2a68:	1133000c 	teqne	r3, r12
    2a6c:	0a00003e 	beq	2b6c <__aeabi_fmul+0x114>
    2a70:	e0822003 	add	r2, r2, r3
    2a74:	e020c001 	eor	r12, r0, r1
    2a78:	e1b00480 	lsls	r0, r0, #9
    2a7c:	11b01481 	lslsne	r1, r1, #9
    2a80:	0a000010 	beq	2ac8 <__aeabi_fmul+0x70>
    2a84:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2a88:	e18302a0 	orr	r0, r3, r0, lsr #5
    2a8c:	e18312a1 	orr	r1, r3, r1, lsr #5
    2a90:	e0813190 	umull	r3, r1, r0, r1
    2a94:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2a98:	e3510502 	cmp	r1, #8388608	; 0x800000
    2a9c:	31a01081 	lslcc	r1, r1, #1
    2aa0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2aa4:	31a03083 	lslcc	r3, r3, #1
    2aa8:	e1800001 	orr	r0, r0, r1
    2aac:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    2ab0:	e35200fd 	cmp	r2, #253	; 0xfd
    2ab4:	8a00000f 	bhi	2af8 <__aeabi_fmul+0xa0>
    2ab8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2abc:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2ac0:	03c00001 	biceq	r0, r0, #1
    2ac4:	e12fff1e 	bx	lr
    2ac8:	e3300000 	teq	r0, #0
    2acc:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2ad0:	01a01481 	lsleq	r1, r1, #9
    2ad4:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2ad8:	e18004a1 	orr	r0, r0, r1, lsr #9
    2adc:	e252207f 	subs	r2, r2, #127	; 0x7f
    2ae0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2ae4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2ae8:	c12fff1e 	bxgt	lr
    2aec:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2af0:	e3a03000 	mov	r3, #0
    2af4:	e2522001 	subs	r2, r2, #1
    2af8:	ca000035 	bgt	2bd4 <__aeabi_fmul+0x17c>
    2afc:	e3720019 	cmn	r2, #25
    2b00:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    2b04:	d12fff1e 	bxle	lr
    2b08:	e2622000 	rsb	r2, r2, #0
    2b0c:	e1b01080 	lsls	r1, r0, #1
    2b10:	e1a01231 	lsr	r1, r1, r2
    2b14:	e2622020 	rsb	r2, r2, #32
    2b18:	e1a0c210 	lsl	r12, r0, r2
    2b1c:	e1b00061 	rrxs	r0, r1
    2b20:	e2a00000 	adc	r0, r0, #0
    2b24:	e193308c 	orrs	r3, r3, r12, lsl #1
    2b28:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2b2c:	e12fff1e 	bx	lr
    2b30:	e3320000 	teq	r2, #0
    2b34:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2b38:	01a00080 	lsleq	r0, r0, #1
    2b3c:	03100502 	tsteq	r0, #8388608	; 0x800000
    2b40:	02422001 	subeq	r2, r2, #1
    2b44:	0afffffb 	beq	2b38 <__aeabi_fmul+0xe0>
    2b48:	e180000c 	orr	r0, r0, r12
    2b4c:	e3330000 	teq	r3, #0
    2b50:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2b54:	01a01081 	lsleq	r1, r1, #1
    2b58:	03110502 	tsteq	r1, #8388608	; 0x800000
    2b5c:	02433001 	subeq	r3, r3, #1
    2b60:	0afffffb 	beq	2b54 <__aeabi_fmul+0xfc>
    2b64:	e181100c 	orr	r1, r1, r12
    2b68:	eaffffc0 	b	2a70 <__aeabi_fmul+0x18>
    2b6c:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2b70:	e132000c 	teq	r2, r12
    2b74:	1133000c 	teqne	r3, r12
    2b78:	0a000005 	beq	2b94 <__aeabi_fmul+0x13c>
    2b7c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2b80:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2b84:	1affffe9 	bne	2b30 <__aeabi_fmul+0xd8>
    2b88:	e0200001 	eor	r0, r0, r1
    2b8c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2b90:	e12fff1e 	bx	lr
    2b94:	e3300000 	teq	r0, #0
    2b98:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2b9c:	01a00001 	moveq	r0, r1
    2ba0:	13310000 	teqne	r1, #0
    2ba4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2ba8:	0a00000d 	beq	2be4 <__aeabi_fmul+0x18c>
    2bac:	e132000c 	teq	r2, r12
    2bb0:	1a000001 	bne	2bbc <__aeabi_fmul+0x164>
    2bb4:	e1b02480 	lsls	r2, r0, #9
    2bb8:	1a000009 	bne	2be4 <__aeabi_fmul+0x18c>
    2bbc:	e133000c 	teq	r3, r12
    2bc0:	1a000002 	bne	2bd0 <__aeabi_fmul+0x178>
    2bc4:	e1b03481 	lsls	r3, r1, #9
    2bc8:	11a00001 	movne	r0, r1
    2bcc:	1a000004 	bne	2be4 <__aeabi_fmul+0x18c>
    2bd0:	e0200001 	eor	r0, r0, r1
    2bd4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2bd8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2bdc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2be0:	e12fff1e 	bx	lr
    2be4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2be8:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    2bec:	e12fff1e 	bx	lr

00002bf0 <__aeabi_fdiv>:
    2bf0:	e3a0c0ff 	mov	r12, #255	; 0xff
    2bf4:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2bf8:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2bfc:	1132000c 	teqne	r2, r12
    2c00:	1133000c 	teqne	r3, r12
    2c04:	0a00003a 	beq	2cf4 <__aeabi_fdiv+0x104>
    2c08:	e0422003 	sub	r2, r2, r3
    2c0c:	e020c001 	eor	r12, r0, r1
    2c10:	e1b01481 	lsls	r1, r1, #9
    2c14:	e1a00480 	lsl	r0, r0, #9
    2c18:	0a00001c 	beq	2c90 <__aeabi_fdiv+0xa0>
    2c1c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    2c20:	e1831221 	orr	r1, r3, r1, lsr #4
    2c24:	e1833220 	orr	r3, r3, r0, lsr #4
    2c28:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2c2c:	e1530001 	cmp	r3, r1
    2c30:	31a03083 	lslcc	r3, r3, #1
    2c34:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2c38:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2c3c:	e1530001 	cmp	r3, r1
    2c40:	20433001 	subcs	r3, r3, r1
    2c44:	2180000c 	orrcs	r0, r0, r12
    2c48:	e15300a1 	cmp	r3, r1, lsr #1
    2c4c:	204330a1 	subcs	r3, r3, r1, lsr #1
    2c50:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2c54:	e1530121 	cmp	r3, r1, lsr #2
    2c58:	20433121 	subcs	r3, r3, r1, lsr #2
    2c5c:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2c60:	e15301a1 	cmp	r3, r1, lsr #3
    2c64:	204331a1 	subcs	r3, r3, r1, lsr #3
    2c68:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2c6c:	e1b03203 	lsls	r3, r3, #4
    2c70:	11b0c22c 	lsrsne	r12, r12, #4
    2c74:	1afffff0 	bne	2c3c <__aeabi_fdiv+0x4c>
    2c78:	e35200fd 	cmp	r2, #253	; 0xfd
    2c7c:	8affff9d 	bhi	2af8 <__aeabi_fmul+0xa0>
    2c80:	e1530001 	cmp	r3, r1
    2c84:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2c88:	03c00001 	biceq	r0, r0, #1
    2c8c:	e12fff1e 	bx	lr
    2c90:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2c94:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2c98:	e292207f 	adds	r2, r2, #127	; 0x7f
    2c9c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2ca0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2ca4:	c12fff1e 	bxgt	lr
    2ca8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2cac:	e3a03000 	mov	r3, #0
    2cb0:	e2522001 	subs	r2, r2, #1
    2cb4:	eaffff8f 	b	2af8 <__aeabi_fmul+0xa0>
    2cb8:	e3320000 	teq	r2, #0
    2cbc:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2cc0:	01a00080 	lsleq	r0, r0, #1
    2cc4:	03100502 	tsteq	r0, #8388608	; 0x800000
    2cc8:	02422001 	subeq	r2, r2, #1
    2ccc:	0afffffb 	beq	2cc0 <__aeabi_fdiv+0xd0>
    2cd0:	e180000c 	orr	r0, r0, r12
    2cd4:	e3330000 	teq	r3, #0
    2cd8:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2cdc:	01a01081 	lsleq	r1, r1, #1
    2ce0:	03110502 	tsteq	r1, #8388608	; 0x800000
    2ce4:	02433001 	subeq	r3, r3, #1
    2ce8:	0afffffb 	beq	2cdc <__aeabi_fdiv+0xec>
    2cec:	e181100c 	orr	r1, r1, r12
    2cf0:	eaffffc4 	b	2c08 <__aeabi_fdiv+0x18>
    2cf4:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2cf8:	e132000c 	teq	r2, r12
    2cfc:	1a000005 	bne	2d18 <__aeabi_fdiv+0x128>
    2d00:	e1b02480 	lsls	r2, r0, #9
    2d04:	1affffb6 	bne	2be4 <__aeabi_fmul+0x18c>
    2d08:	e133000c 	teq	r3, r12
    2d0c:	1affffaf 	bne	2bd0 <__aeabi_fmul+0x178>
    2d10:	e1a00001 	mov	r0, r1
    2d14:	eaffffb2 	b	2be4 <__aeabi_fmul+0x18c>
    2d18:	e133000c 	teq	r3, r12
    2d1c:	1a000003 	bne	2d30 <__aeabi_fdiv+0x140>
    2d20:	e1b03481 	lsls	r3, r1, #9
    2d24:	0affff97 	beq	2b88 <__aeabi_fmul+0x130>
    2d28:	e1a00001 	mov	r0, r1
    2d2c:	eaffffac 	b	2be4 <__aeabi_fmul+0x18c>
    2d30:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2d34:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2d38:	1affffde 	bne	2cb8 <__aeabi_fdiv+0xc8>
    2d3c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    2d40:	1affffa2 	bne	2bd0 <__aeabi_fmul+0x178>
    2d44:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2d48:	1affff8e 	bne	2b88 <__aeabi_fmul+0x130>
    2d4c:	eaffffa4 	b	2be4 <__aeabi_fmul+0x18c>

00002d50 <__gesf2>:
    2d50:	e3e0c000 	mvn	r12, #0
    2d54:	ea000002 	b	2d64 <__cmpsf2+0x4>

00002d58 <__lesf2>:
    2d58:	e3a0c001 	mov	r12, #1
    2d5c:	ea000000 	b	2d64 <__cmpsf2+0x4>

00002d60 <__cmpsf2>:
    2d60:	e3a0c001 	mov	r12, #1
    2d64:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    2d68:	e1a02080 	lsl	r2, r0, #1
    2d6c:	e1a03081 	lsl	r3, r1, #1
    2d70:	e1f0cc42 	mvns	r12, r2, asr #24
    2d74:	11f0cc43 	mvnsne	r12, r3, asr #24
    2d78:	0a000007 	beq	2d9c <__cmpsf2+0x3c>
    2d7c:	e28dd004 	add	sp, sp, #4
    2d80:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    2d84:	11300001 	teqne	r0, r1
    2d88:	50520003 	subspl	r0, r2, r3
    2d8c:	81a00fc1 	asrhi	r0, r1, #31
    2d90:	31e00fc1 	mvncc	r0, r1, asr #31
    2d94:	13800001 	orrne	r0, r0, #1
    2d98:	e12fff1e 	bx	lr
    2d9c:	e1f0cc42 	mvns	r12, r2, asr #24
    2da0:	1a000001 	bne	2dac <__cmpsf2+0x4c>
    2da4:	e1b0c480 	lsls	r12, r0, #9
    2da8:	1a000003 	bne	2dbc <__cmpsf2+0x5c>
    2dac:	e1f0cc43 	mvns	r12, r3, asr #24
    2db0:	1afffff1 	bne	2d7c <__cmpsf2+0x1c>
    2db4:	e1b0c481 	lsls	r12, r1, #9
    2db8:	0affffef 	beq	2d7c <__cmpsf2+0x1c>
    2dbc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2dc0:	e12fff1e 	bx	lr

00002dc4 <__aeabi_cfrcmple>:
    2dc4:	e1a0c000 	mov	r12, r0
    2dc8:	e1a00001 	mov	r0, r1
    2dcc:	e1a0100c 	mov	r1, r12
    2dd0:	eaffffff 	b	2dd4 <__aeabi_cfcmpeq>

00002dd4 <__aeabi_cfcmpeq>:
    2dd4:	e92d400f 	push	{r0, r1, r2, r3, lr}
    2dd8:	ebffffe0 	bl	2d60 <__cmpsf2>
    2ddc:	e3500000 	cmp	r0, #0
    2de0:	43700000 	cmnmi	r0, #0
    2de4:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    2de8:	e12fff1e 	bx	lr

00002dec <__aeabi_fcmpeq>:
    2dec:	e52de008 	str	lr, [sp, #-8]!
    2df0:	ebfffff7 	bl	2dd4 <__aeabi_cfcmpeq>
    2df4:	03a00001 	moveq	r0, #1
    2df8:	13a00000 	movne	r0, #0
    2dfc:	e49de008 	ldr	lr, [sp], #8
    2e00:	e12fff1e 	bx	lr

00002e04 <__aeabi_fcmplt>:
    2e04:	e52de008 	str	lr, [sp, #-8]!
    2e08:	ebfffff1 	bl	2dd4 <__aeabi_cfcmpeq>
    2e0c:	33a00001 	movcc	r0, #1
    2e10:	23a00000 	movcs	r0, #0
    2e14:	e49de008 	ldr	lr, [sp], #8
    2e18:	e12fff1e 	bx	lr

00002e1c <__aeabi_fcmple>:
    2e1c:	e52de008 	str	lr, [sp, #-8]!
    2e20:	ebffffeb 	bl	2dd4 <__aeabi_cfcmpeq>
    2e24:	93a00001 	movls	r0, #1
    2e28:	83a00000 	movhi	r0, #0
    2e2c:	e49de008 	ldr	lr, [sp], #8
    2e30:	e12fff1e 	bx	lr

00002e34 <__aeabi_fcmpge>:
    2e34:	e52de008 	str	lr, [sp, #-8]!
    2e38:	ebffffe1 	bl	2dc4 <__aeabi_cfrcmple>
    2e3c:	93a00001 	movls	r0, #1
    2e40:	83a00000 	movhi	r0, #0
    2e44:	e49de008 	ldr	lr, [sp], #8
    2e48:	e12fff1e 	bx	lr

00002e4c <__aeabi_fcmpgt>:
    2e4c:	e52de008 	str	lr, [sp, #-8]!
    2e50:	ebffffdb 	bl	2dc4 <__aeabi_cfrcmple>
    2e54:	33a00001 	movcc	r0, #1
    2e58:	23a00000 	movcs	r0, #0
    2e5c:	e49de008 	ldr	lr, [sp], #8
    2e60:	e12fff1e 	bx	lr

00002e64 <__aeabi_f2iz>:
    2e64:	e1a02080 	lsl	r2, r0, #1
    2e68:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2e6c:	3a000008 	bcc	2e94 <__aeabi_f2iz+0x30>
    2e70:	e3a0309e 	mov	r3, #158	; 0x9e
    2e74:	e0532c22 	subs	r2, r3, r2, lsr #24
    2e78:	9a000007 	bls	2e9c <__aeabi_f2iz+0x38>
    2e7c:	e1a03400 	lsl	r3, r0, #8
    2e80:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2e84:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2e88:	e1a00233 	lsr	r0, r3, r2
    2e8c:	12600000 	rsbne	r0, r0, #0
    2e90:	e12fff1e 	bx	lr
    2e94:	e3a00000 	mov	r0, #0
    2e98:	e12fff1e 	bx	lr
    2e9c:	e3720061 	cmn	r2, #97	; 0x61
    2ea0:	1a000001 	bne	2eac <__aeabi_f2iz+0x48>
    2ea4:	e1b02480 	lsls	r2, r0, #9
    2ea8:	1a000002 	bne	2eb8 <__aeabi_f2iz+0x54>
    2eac:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2eb0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2eb4:	e12fff1e 	bx	lr
    2eb8:	e3a00000 	mov	r0, #0
    2ebc:	e12fff1e 	bx	lr

00002ec0 <atexit>:
    2ec0:	e1a01000 	mov	r1, r0
    2ec4:	e3a00000 	mov	r0, #0
    2ec8:	e92d4008 	push	{r3, lr}
    2ecc:	e1a02000 	mov	r2, r0
    2ed0:	e1a03000 	mov	r3, r0
    2ed4:	eb0001f7 	bl	36b8 <__register_exitproc>
    2ed8:	e8bd4008 	pop	{r3, lr}
    2edc:	e12fff1e 	bx	lr

00002ee0 <exit>:
    2ee0:	e92d4008 	push	{r3, lr}
    2ee4:	e3a01000 	mov	r1, #0
    2ee8:	e1a04000 	mov	r4, r0
    2eec:	eb00022e 	bl	37ac <__call_exitprocs>
    2ef0:	e59f3018 	ldr	r3, [pc, #24]	; 2f10 <exit+0x30>
    2ef4:	e5930000 	ldr	r0, [r3]
    2ef8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2efc:	e3530000 	cmp	r3, #0
    2f00:	11a0e00f 	movne	lr, pc
    2f04:	112fff13 	bxne	r3
    2f08:	e1a00004 	mov	r0, r4
    2f0c:	eb0003f3 	bl	3ee0 <_exit>
    2f10:	00004028 	.word	0x00004028

00002f14 <malloc>:
    2f14:	e92d4008 	push	{r3, lr}
    2f18:	e59f3010 	ldr	r3, [pc, #16]	; 2f30 <malloc+0x1c>
    2f1c:	e1a01000 	mov	r1, r0
    2f20:	e5930000 	ldr	r0, [r3]
    2f24:	eb00000a 	bl	2f54 <_malloc_r>
    2f28:	e8bd4008 	pop	{r3, lr}
    2f2c:	e12fff1e 	bx	lr
    2f30:	00032e88 	.word	0x00032e88

00002f34 <free>:
    2f34:	e92d4008 	push	{r3, lr}
    2f38:	e59f3010 	ldr	r3, [pc, #16]	; 2f50 <free+0x1c>
    2f3c:	e1a01000 	mov	r1, r0
    2f40:	e5930000 	ldr	r0, [r3]
    2f44:	eb0002d0 	bl	3a8c <_free_r>
    2f48:	e8bd4008 	pop	{r3, lr}
    2f4c:	e12fff1e 	bx	lr
    2f50:	00032e88 	.word	0x00032e88

00002f54 <_malloc_r>:
    2f54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2f58:	e281500b 	add	r5, r1, #11
    2f5c:	e3550016 	cmp	r5, #22
    2f60:	83c55007 	bichi	r5, r5, #7
    2f64:	81a03fa5 	lsrhi	r3, r5, #31
    2f68:	93a03000 	movls	r3, #0
    2f6c:	93a05010 	movls	r5, #16
    2f70:	e1550001 	cmp	r5, r1
    2f74:	21a01003 	movcs	r1, r3
    2f78:	33831001 	orrcc	r1, r3, #1
    2f7c:	e3510000 	cmp	r1, #0
    2f80:	13a0300c 	movne	r3, #12
    2f84:	e24dd00c 	sub	sp, sp, #12
    2f88:	e1a06000 	mov	r6, r0
    2f8c:	15803000 	strne	r3, [r0]
    2f90:	13a04000 	movne	r4, #0
    2f94:	1a000015 	bne	2ff0 <_malloc_r+0x9c>
    2f98:	eb0001b4 	bl	3670 <__malloc_lock>
    2f9c:	e3550f7e 	cmp	r5, #504	; 0x1f8
    2fa0:	2a000016 	bcs	3000 <_malloc_r+0xac>
    2fa4:	e59f76b8 	ldr	r7, [pc, #1720]	; 3664 <_malloc_r+0x710>
    2fa8:	e1a0e1a5 	lsr	lr, r5, #3
    2fac:	e087318e 	add	r3, r7, lr, lsl #3
    2fb0:	e593400c 	ldr	r4, [r3, #12]
    2fb4:	e1540003 	cmp	r4, r3
    2fb8:	0a00014b 	beq	34ec <_malloc_r+0x598>
    2fbc:	e5943004 	ldr	r3, [r4, #4]
    2fc0:	e3c33003 	bic	r3, r3, #3
    2fc4:	e0843003 	add	r3, r4, r3
    2fc8:	e5930004 	ldr	r0, [r3, #4]
    2fcc:	e2841008 	add	r1, r4, #8
    2fd0:	e8910006 	ldm	r1, {r1, r2}
    2fd4:	e3800001 	orr	r0, r0, #1
    2fd8:	e5830004 	str	r0, [r3, #4]
    2fdc:	e581200c 	str	r2, [r1, #12]
    2fe0:	e5821008 	str	r1, [r2, #8]
    2fe4:	e1a00006 	mov	r0, r6
    2fe8:	eb0001a1 	bl	3674 <__malloc_unlock>
    2fec:	e2844008 	add	r4, r4, #8
    2ff0:	e1a00004 	mov	r0, r4
    2ff4:	e28dd00c 	add	sp, sp, #12
    2ff8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ffc:	e12fff1e 	bx	lr
    3000:	e1b0e4a5 	lsrs	lr, r5, #9
    3004:	01a0e1a5 	lsreq	lr, r5, #3
    3008:	01a0108e 	lsleq	r1, lr, #1
    300c:	1a000061 	bne	3198 <_malloc_r+0x244>
    3010:	e59f764c 	ldr	r7, [pc, #1612]	; 3664 <_malloc_r+0x710>
    3014:	e0871101 	add	r1, r7, r1, lsl #2
    3018:	e591400c 	ldr	r4, [r1, #12]
    301c:	e1510004 	cmp	r1, r4
    3020:	1a000005 	bne	303c <_malloc_r+0xe8>
    3024:	ea00000a 	b	3054 <_malloc_r+0x100>
    3028:	e3530000 	cmp	r3, #0
    302c:	aa0000d7 	bge	3390 <_malloc_r+0x43c>
    3030:	e594400c 	ldr	r4, [r4, #12]
    3034:	e1510004 	cmp	r1, r4
    3038:	0a000005 	beq	3054 <_malloc_r+0x100>
    303c:	e5942004 	ldr	r2, [r4, #4]
    3040:	e3c22003 	bic	r2, r2, #3
    3044:	e0653002 	rsb	r3, r5, r2
    3048:	e353000f 	cmp	r3, #15
    304c:	dafffff5 	ble	3028 <_malloc_r+0xd4>
    3050:	e24ee001 	sub	lr, lr, #1
    3054:	e28ee001 	add	lr, lr, #1
    3058:	e59f3604 	ldr	r3, [pc, #1540]	; 3664 <_malloc_r+0x710>
    305c:	e5974010 	ldr	r4, [r7, #16]
    3060:	e2838008 	add	r8, r3, #8
    3064:	e1540008 	cmp	r4, r8
    3068:	05931004 	ldreq	r1, [r3, #4]
    306c:	0a000016 	beq	30cc <_malloc_r+0x178>
    3070:	e5942004 	ldr	r2, [r4, #4]
    3074:	e3c22003 	bic	r2, r2, #3
    3078:	e0651002 	rsb	r1, r5, r2
    307c:	e351000f 	cmp	r1, #15
    3080:	ca0000f7 	bgt	3464 <_malloc_r+0x510>
    3084:	e3510000 	cmp	r1, #0
    3088:	e5838014 	str	r8, [r3, #20]
    308c:	e5838010 	str	r8, [r3, #16]
    3090:	aa000046 	bge	31b0 <_malloc_r+0x25c>
    3094:	e3520c02 	cmp	r2, #512	; 0x200
    3098:	2a0000d2 	bcs	33e8 <_malloc_r+0x494>
    309c:	e5930004 	ldr	r0, [r3, #4]
    30a0:	e1a021a2 	lsr	r2, r2, #3
    30a4:	e1a01142 	asr	r1, r2, #2
    30a8:	e3a0c001 	mov	r12, #1
    30ac:	e180111c 	orr	r1, r0, r12, lsl r1
    30b0:	e0832182 	add	r2, r3, r2, lsl #3
    30b4:	e5920008 	ldr	r0, [r2, #8]
    30b8:	e584200c 	str	r2, [r4, #12]
    30bc:	e5840008 	str	r0, [r4, #8]
    30c0:	e5831004 	str	r1, [r3, #4]
    30c4:	e5824008 	str	r4, [r2, #8]
    30c8:	e580400c 	str	r4, [r0, #12]
    30cc:	e1a0014e 	asr	r0, lr, #2
    30d0:	e3a03001 	mov	r3, #1
    30d4:	e1a00013 	lsl	r0, r3, r0
    30d8:	e1500001 	cmp	r0, r1
    30dc:	8a00003b 	bhi	31d0 <_malloc_r+0x27c>
    30e0:	e1110000 	tst	r1, r0
    30e4:	1a000008 	bne	310c <_malloc_r+0x1b8>
    30e8:	e1a00310 	lsl	r0, r0, r3
    30ec:	e3cee003 	bic	lr, lr, #3
    30f0:	e1110000 	tst	r1, r0
    30f4:	e28ee004 	add	lr, lr, #4
    30f8:	1a000003 	bne	310c <_malloc_r+0x1b8>
    30fc:	e1a00080 	lsl	r0, r0, #1
    3100:	e1110000 	tst	r1, r0
    3104:	e28ee004 	add	lr, lr, #4
    3108:	0afffffb 	beq	30fc <_malloc_r+0x1a8>
    310c:	e087a18e 	add	r10, r7, lr, lsl #3
    3110:	e1a0c00a 	mov	r12, r10
    3114:	e1a0400e 	mov	r4, lr
    3118:	e59c300c 	ldr	r3, [r12, #12]
    311c:	e15c0003 	cmp	r12, r3
    3120:	1a000005 	bne	313c <_malloc_r+0x1e8>
    3124:	ea0000db 	b	3498 <_malloc_r+0x544>
    3128:	e3520000 	cmp	r2, #0
    312c:	aa0000f4 	bge	3504 <_malloc_r+0x5b0>
    3130:	e593300c 	ldr	r3, [r3, #12]
    3134:	e15c0003 	cmp	r12, r3
    3138:	0a0000d6 	beq	3498 <_malloc_r+0x544>
    313c:	e5931004 	ldr	r1, [r3, #4]
    3140:	e3c11003 	bic	r1, r1, #3
    3144:	e0652001 	rsb	r2, r5, r1
    3148:	e352000f 	cmp	r2, #15
    314c:	dafffff5 	ble	3128 <_malloc_r+0x1d4>
    3150:	e1a04003 	mov	r4, r3
    3154:	e593000c 	ldr	r0, [r3, #12]
    3158:	e5b4c008 	ldr	r12, [r4, #8]!
    315c:	e0831005 	add	r1, r3, r5
    3160:	e382e001 	orr	lr, r2, #1
    3164:	e3855001 	orr	r5, r5, #1
    3168:	e58c000c 	str	r0, [r12, #12]
    316c:	e580c008 	str	r12, [r0, #8]
    3170:	e5835004 	str	r5, [r3, #4]
    3174:	e5871014 	str	r1, [r7, #20]
    3178:	e5871010 	str	r1, [r7, #16]
    317c:	e581800c 	str	r8, [r1, #12]
    3180:	e5818008 	str	r8, [r1, #8]
    3184:	e581e004 	str	lr, [r1, #4]
    3188:	e7812002 	str	r2, [r1, r2]
    318c:	e1a00006 	mov	r0, r6
    3190:	eb000137 	bl	3674 <__malloc_unlock>
    3194:	eaffff95 	b	2ff0 <_malloc_r+0x9c>
    3198:	e35e0004 	cmp	lr, #4
    319c:	8a000087 	bhi	33c0 <_malloc_r+0x46c>
    31a0:	e1a0e325 	lsr	lr, r5, #6
    31a4:	e28ee038 	add	lr, lr, #56	; 0x38
    31a8:	e1a0108e 	lsl	r1, lr, #1
    31ac:	eaffff97 	b	3010 <_malloc_r+0xbc>
    31b0:	e0842002 	add	r2, r4, r2
    31b4:	e5923004 	ldr	r3, [r2, #4]
    31b8:	e3833001 	orr	r3, r3, #1
    31bc:	e5823004 	str	r3, [r2, #4]
    31c0:	e1a00006 	mov	r0, r6
    31c4:	eb00012a 	bl	3674 <__malloc_unlock>
    31c8:	e2844008 	add	r4, r4, #8
    31cc:	eaffff87 	b	2ff0 <_malloc_r+0x9c>
    31d0:	e5974008 	ldr	r4, [r7, #8]
    31d4:	e594a004 	ldr	r10, [r4, #4]
    31d8:	e3caa003 	bic	r10, r10, #3
    31dc:	e155000a 	cmp	r5, r10
    31e0:	8a000002 	bhi	31f0 <_malloc_r+0x29c>
    31e4:	e065300a 	rsb	r3, r5, r10
    31e8:	e353000f 	cmp	r3, #15
    31ec:	ca00005d 	bgt	3368 <_malloc_r+0x414>
    31f0:	e59f9470 	ldr	r9, [pc, #1136]	; 3668 <_malloc_r+0x714>
    31f4:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    31f8:	e599b000 	ldr	r11, [r9]
    31fc:	e3730001 	cmn	r3, #1
    3200:	e085b00b 	add	r11, r5, r11
    3204:	128bba01 	addne	r11, r11, #4096	; 0x1000
    3208:	128bb00f 	addne	r11, r11, #15
    320c:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    3210:	028bb010 	addeq	r11, r11, #16
    3214:	13cbb00f 	bicne	r11, r11, #15
    3218:	e084200a 	add	r2, r4, r10
    321c:	e1a00006 	mov	r0, r6
    3220:	e1a0100b 	mov	r1, r11
    3224:	e58d2004 	str	r2, [sp, #4]
    3228:	eb000112 	bl	3678 <_sbrk_r>
    322c:	e3700001 	cmn	r0, #1
    3230:	e1a08000 	mov	r8, r0
    3234:	e59d2004 	ldr	r2, [sp, #4]
    3238:	0a0000e2 	beq	35c8 <_malloc_r+0x674>
    323c:	e1520000 	cmp	r2, r0
    3240:	8a0000bf 	bhi	3544 <_malloc_r+0x5f0>
    3244:	e5993004 	ldr	r3, [r9, #4]
    3248:	e1520008 	cmp	r2, r8
    324c:	e08b3003 	add	r3, r11, r3
    3250:	e5893004 	str	r3, [r9, #4]
    3254:	0a0000df 	beq	35d8 <_malloc_r+0x684>
    3258:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    325c:	e3710001 	cmn	r1, #1
    3260:	10622008 	rsbne	r2, r2, r8
    3264:	059f33f8 	ldreq	r3, [pc, #1016]	; 3664 <_malloc_r+0x710>
    3268:	10833002 	addne	r3, r3, r2
    326c:	05838408 	streq	r8, [r3, #1032]	; 0x408
    3270:	15893004 	strne	r3, [r9, #4]
    3274:	e2183007 	ands	r3, r8, #7
    3278:	12632008 	rsbne	r2, r3, #8
    327c:	10888002 	addne	r8, r8, r2
    3280:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    3284:	12832008 	addne	r2, r3, #8
    3288:	e088300b 	add	r3, r8, r11
    328c:	03a02a01 	moveq	r2, #4096	; 0x1000
    3290:	e1a03a03 	lsl	r3, r3, #20
    3294:	e042ba23 	sub	r11, r2, r3, lsr #20
    3298:	e1a0100b 	mov	r1, r11
    329c:	e1a00006 	mov	r0, r6
    32a0:	eb0000f4 	bl	3678 <_sbrk_r>
    32a4:	e3700001 	cmn	r0, #1
    32a8:	10682000 	rsbne	r2, r8, r0
    32ac:	e5993004 	ldr	r3, [r9, #4]
    32b0:	108b2002 	addne	r2, r11, r2
    32b4:	03a0b000 	moveq	r11, #0
    32b8:	13822001 	orrne	r2, r2, #1
    32bc:	03a02001 	moveq	r2, #1
    32c0:	e08b3003 	add	r3, r11, r3
    32c4:	e1540007 	cmp	r4, r7
    32c8:	e5893004 	str	r3, [r9, #4]
    32cc:	e5878008 	str	r8, [r7, #8]
    32d0:	e5882004 	str	r2, [r8, #4]
    32d4:	0a00000d 	beq	3310 <_malloc_r+0x3bc>
    32d8:	e35a000f 	cmp	r10, #15
    32dc:	9a0000ac 	bls	3594 <_malloc_r+0x640>
    32e0:	e594c004 	ldr	r12, [r4, #4]
    32e4:	e24a200c 	sub	r2, r10, #12
    32e8:	e3c22007 	bic	r2, r2, #7
    32ec:	e20cc001 	and	r12, r12, #1
    32f0:	e0841002 	add	r1, r4, r2
    32f4:	e3a00005 	mov	r0, #5
    32f8:	e182c00c 	orr	r12, r2, r12
    32fc:	e352000f 	cmp	r2, #15
    3300:	e584c004 	str	r12, [r4, #4]
    3304:	e5810004 	str	r0, [r1, #4]
    3308:	e5810008 	str	r0, [r1, #8]
    330c:	8a0000b8 	bhi	35f4 <_malloc_r+0x6a0>
    3310:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    3314:	e1530002 	cmp	r3, r2
    3318:	859f2348 	ldrhi	r2, [pc, #840]	; 3668 <_malloc_r+0x714>
    331c:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    3320:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    3324:	e5974008 	ldr	r4, [r7, #8]
    3328:	e1530002 	cmp	r3, r2
    332c:	95943004 	ldrls	r3, [r4, #4]
    3330:	85942004 	ldrhi	r2, [r4, #4]
    3334:	859f132c 	ldrhi	r1, [pc, #812]	; 3668 <_malloc_r+0x714>
    3338:	93c33003 	bicls	r3, r3, #3
    333c:	85813030 	strhi	r3, [r1, #48]	; 0x30
    3340:	83c23003 	bichi	r3, r2, #3
    3344:	e1550003 	cmp	r5, r3
    3348:	e0653003 	rsb	r3, r5, r3
    334c:	8a000001 	bhi	3358 <_malloc_r+0x404>
    3350:	e353000f 	cmp	r3, #15
    3354:	ca000003 	bgt	3368 <_malloc_r+0x414>
    3358:	e1a00006 	mov	r0, r6
    335c:	eb0000c4 	bl	3674 <__malloc_unlock>
    3360:	e3a04000 	mov	r4, #0
    3364:	eaffff21 	b	2ff0 <_malloc_r+0x9c>
    3368:	e0842005 	add	r2, r4, r5
    336c:	e3833001 	orr	r3, r3, #1
    3370:	e3855001 	orr	r5, r5, #1
    3374:	e5845004 	str	r5, [r4, #4]
    3378:	e1a00006 	mov	r0, r6
    337c:	e5823004 	str	r3, [r2, #4]
    3380:	e5872008 	str	r2, [r7, #8]
    3384:	e2844008 	add	r4, r4, #8
    3388:	eb0000b9 	bl	3674 <__malloc_unlock>
    338c:	eaffff17 	b	2ff0 <_malloc_r+0x9c>
    3390:	e0842002 	add	r2, r4, r2
    3394:	e5920004 	ldr	r0, [r2, #4]
    3398:	e2841008 	add	r1, r4, #8
    339c:	e891000a 	ldm	r1, {r1, r3}
    33a0:	e3800001 	orr	r0, r0, #1
    33a4:	e5820004 	str	r0, [r2, #4]
    33a8:	e581300c 	str	r3, [r1, #12]
    33ac:	e5831008 	str	r1, [r3, #8]
    33b0:	e1a00006 	mov	r0, r6
    33b4:	eb0000ae 	bl	3674 <__malloc_unlock>
    33b8:	e2844008 	add	r4, r4, #8
    33bc:	eaffff0b 	b	2ff0 <_malloc_r+0x9c>
    33c0:	e35e0014 	cmp	lr, #20
    33c4:	928ee05b 	addls	lr, lr, #91	; 0x5b
    33c8:	91a0108e 	lslls	r1, lr, #1
    33cc:	9affff0f 	bls	3010 <_malloc_r+0xbc>
    33d0:	e35e0054 	cmp	lr, #84	; 0x54
    33d4:	8a000061 	bhi	3560 <_malloc_r+0x60c>
    33d8:	e1a0e625 	lsr	lr, r5, #12
    33dc:	e28ee06e 	add	lr, lr, #110	; 0x6e
    33e0:	e1a0108e 	lsl	r1, lr, #1
    33e4:	eaffff09 	b	3010 <_malloc_r+0xbc>
    33e8:	e1a034a2 	lsr	r3, r2, #9
    33ec:	e3530004 	cmp	r3, #4
    33f0:	9a00004f 	bls	3534 <_malloc_r+0x5e0>
    33f4:	e3530014 	cmp	r3, #20
    33f8:	9283a05b 	addls	r10, r3, #91	; 0x5b
    33fc:	91a0008a 	lslls	r0, r10, #1
    3400:	9a000004 	bls	3418 <_malloc_r+0x4c4>
    3404:	e3530054 	cmp	r3, #84	; 0x54
    3408:	8a00007f 	bhi	360c <_malloc_r+0x6b8>
    340c:	e1a0a622 	lsr	r10, r2, #12
    3410:	e28aa06e 	add	r10, r10, #110	; 0x6e
    3414:	e1a0008a 	lsl	r0, r10, #1
    3418:	e0870100 	add	r0, r7, r0, lsl #2
    341c:	e5903008 	ldr	r3, [r0, #8]
    3420:	e1530000 	cmp	r3, r0
    3424:	e59fc238 	ldr	r12, [pc, #568]	; 3664 <_malloc_r+0x710>
    3428:	0a000052 	beq	3578 <_malloc_r+0x624>
    342c:	e5931004 	ldr	r1, [r3, #4]
    3430:	e3c11003 	bic	r1, r1, #3
    3434:	e1520001 	cmp	r2, r1
    3438:	2a000002 	bcs	3448 <_malloc_r+0x4f4>
    343c:	e5933008 	ldr	r3, [r3, #8]
    3440:	e1500003 	cmp	r0, r3
    3444:	1afffff8 	bne	342c <_malloc_r+0x4d8>
    3448:	e593200c 	ldr	r2, [r3, #12]
    344c:	e5971004 	ldr	r1, [r7, #4]
    3450:	e584200c 	str	r2, [r4, #12]
    3454:	e5843008 	str	r3, [r4, #8]
    3458:	e583400c 	str	r4, [r3, #12]
    345c:	e5824008 	str	r4, [r2, #8]
    3460:	eaffff19 	b	30cc <_malloc_r+0x178>
    3464:	e0842005 	add	r2, r4, r5
    3468:	e3810001 	orr	r0, r1, #1
    346c:	e3855001 	orr	r5, r5, #1
    3470:	e5845004 	str	r5, [r4, #4]
    3474:	e5832014 	str	r2, [r3, #20]
    3478:	e5832010 	str	r2, [r3, #16]
    347c:	e582800c 	str	r8, [r2, #12]
    3480:	e9820101 	stmib	r2, {r0, r8}
    3484:	e7821001 	str	r1, [r2, r1]
    3488:	e1a00006 	mov	r0, r6
    348c:	eb000078 	bl	3674 <__malloc_unlock>
    3490:	e2844008 	add	r4, r4, #8
    3494:	eafffed5 	b	2ff0 <_malloc_r+0x9c>
    3498:	e2844001 	add	r4, r4, #1
    349c:	e3140003 	tst	r4, #3
    34a0:	e28cc008 	add	r12, r12, #8
    34a4:	1affff1b 	bne	3118 <_malloc_r+0x1c4>
    34a8:	e31e0003 	tst	lr, #3
    34ac:	e24a3008 	sub	r3, r10, #8
    34b0:	0a000062 	beq	3640 <_malloc_r+0x6ec>
    34b4:	e59aa000 	ldr	r10, [r10]
    34b8:	e15a0003 	cmp	r10, r3
    34bc:	e24ee001 	sub	lr, lr, #1
    34c0:	0afffff8 	beq	34a8 <_malloc_r+0x554>
    34c4:	e5973004 	ldr	r3, [r7, #4]
    34c8:	e1a00080 	lsl	r0, r0, #1
    34cc:	e1500003 	cmp	r0, r3
    34d0:	8affff3e 	bhi	31d0 <_malloc_r+0x27c>
    34d4:	e3500000 	cmp	r0, #0
    34d8:	0affff3c 	beq	31d0 <_malloc_r+0x27c>
    34dc:	e1130000 	tst	r3, r0
    34e0:	0a00005a 	beq	3650 <_malloc_r+0x6fc>
    34e4:	e1a0e004 	mov	lr, r4
    34e8:	eaffff07 	b	310c <_malloc_r+0x1b8>
    34ec:	e2843008 	add	r3, r4, #8
    34f0:	e5944014 	ldr	r4, [r4, #20]
    34f4:	e1530004 	cmp	r3, r4
    34f8:	028ee002 	addeq	lr, lr, #2
    34fc:	0afffed5 	beq	3058 <_malloc_r+0x104>
    3500:	eafffead 	b	2fbc <_malloc_r+0x68>
    3504:	e0831001 	add	r1, r3, r1
    3508:	e5910004 	ldr	r0, [r1, #4]
    350c:	e1a04003 	mov	r4, r3
    3510:	e5b42008 	ldr	r2, [r4, #8]!
    3514:	e593300c 	ldr	r3, [r3, #12]
    3518:	e3800001 	orr	r0, r0, #1
    351c:	e5810004 	str	r0, [r1, #4]
    3520:	e582300c 	str	r3, [r2, #12]
    3524:	e5832008 	str	r2, [r3, #8]
    3528:	e1a00006 	mov	r0, r6
    352c:	eb000050 	bl	3674 <__malloc_unlock>
    3530:	eafffeae 	b	2ff0 <_malloc_r+0x9c>
    3534:	e1a0a322 	lsr	r10, r2, #6
    3538:	e28aa038 	add	r10, r10, #56	; 0x38
    353c:	e1a0008a 	lsl	r0, r10, #1
    3540:	eaffffb4 	b	3418 <_malloc_r+0x4c4>
    3544:	e1540007 	cmp	r4, r7
    3548:	0affff3d 	beq	3244 <_malloc_r+0x2f0>
    354c:	e59f3110 	ldr	r3, [pc, #272]	; 3664 <_malloc_r+0x710>
    3550:	e5934008 	ldr	r4, [r3, #8]
    3554:	e5943004 	ldr	r3, [r4, #4]
    3558:	e3c33003 	bic	r3, r3, #3
    355c:	eaffff78 	b	3344 <_malloc_r+0x3f0>
    3560:	e35e0f55 	cmp	lr, #340	; 0x154
    3564:	8a00000f 	bhi	35a8 <_malloc_r+0x654>
    3568:	e1a0e7a5 	lsr	lr, r5, #15
    356c:	e28ee077 	add	lr, lr, #119	; 0x77
    3570:	e1a0108e 	lsl	r1, lr, #1
    3574:	eafffea5 	b	3010 <_malloc_r+0xbc>
    3578:	e59c2004 	ldr	r2, [r12, #4]
    357c:	e1a0a14a 	asr	r10, r10, #2
    3580:	e3a01001 	mov	r1, #1
    3584:	e1821a11 	orr	r1, r2, r1, lsl r10
    3588:	e1a02003 	mov	r2, r3
    358c:	e58c1004 	str	r1, [r12, #4]
    3590:	eaffffae 	b	3450 <_malloc_r+0x4fc>
    3594:	e3a03001 	mov	r3, #1
    3598:	e5883004 	str	r3, [r8, #4]
    359c:	e1a04008 	mov	r4, r8
    35a0:	e3a03000 	mov	r3, #0
    35a4:	eaffff66 	b	3344 <_malloc_r+0x3f0>
    35a8:	e59f30bc 	ldr	r3, [pc, #188]	; 366c <_malloc_r+0x718>
    35ac:	e15e0003 	cmp	lr, r3
    35b0:	91a0e925 	lsrls	lr, r5, #18
    35b4:	928ee07c 	addls	lr, lr, #124	; 0x7c
    35b8:	91a0108e 	lslls	r1, lr, #1
    35bc:	83a010fc 	movhi	r1, #252	; 0xfc
    35c0:	83a0e07e 	movhi	lr, #126	; 0x7e
    35c4:	eafffe91 	b	3010 <_malloc_r+0xbc>
    35c8:	e5974008 	ldr	r4, [r7, #8]
    35cc:	e5943004 	ldr	r3, [r4, #4]
    35d0:	e3c33003 	bic	r3, r3, #3
    35d4:	eaffff5a 	b	3344 <_malloc_r+0x3f0>
    35d8:	e1b01a02 	lsls	r1, r2, #20
    35dc:	1affff1d 	bne	3258 <_malloc_r+0x304>
    35e0:	e5972008 	ldr	r2, [r7, #8]
    35e4:	e08b100a 	add	r1, r11, r10
    35e8:	e3811001 	orr	r1, r1, #1
    35ec:	e5821004 	str	r1, [r2, #4]
    35f0:	eaffff46 	b	3310 <_malloc_r+0x3bc>
    35f4:	e1a00006 	mov	r0, r6
    35f8:	e2841008 	add	r1, r4, #8
    35fc:	eb000122 	bl	3a8c <_free_r>
    3600:	e59f3060 	ldr	r3, [pc, #96]	; 3668 <_malloc_r+0x714>
    3604:	e5933004 	ldr	r3, [r3, #4]
    3608:	eaffff40 	b	3310 <_malloc_r+0x3bc>
    360c:	e3530f55 	cmp	r3, #340	; 0x154
    3610:	91a0a7a2 	lsrls	r10, r2, #15
    3614:	928aa077 	addls	r10, r10, #119	; 0x77
    3618:	91a0008a 	lslls	r0, r10, #1
    361c:	9affff7d 	bls	3418 <_malloc_r+0x4c4>
    3620:	e59f1044 	ldr	r1, [pc, #68]	; 366c <_malloc_r+0x718>
    3624:	e1530001 	cmp	r3, r1
    3628:	91a0a922 	lsrls	r10, r2, #18
    362c:	928aa07c 	addls	r10, r10, #124	; 0x7c
    3630:	91a0008a 	lslls	r0, r10, #1
    3634:	83a000fc 	movhi	r0, #252	; 0xfc
    3638:	83a0a07e 	movhi	r10, #126	; 0x7e
    363c:	eaffff75 	b	3418 <_malloc_r+0x4c4>
    3640:	e5973004 	ldr	r3, [r7, #4]
    3644:	e1c33000 	bic	r3, r3, r0
    3648:	e5873004 	str	r3, [r7, #4]
    364c:	eaffff9d 	b	34c8 <_malloc_r+0x574>
    3650:	e1a00080 	lsl	r0, r0, #1
    3654:	e1130000 	tst	r3, r0
    3658:	e2844004 	add	r4, r4, #4
    365c:	1affffa0 	bne	34e4 <_malloc_r+0x590>
    3660:	eafffffa 	b	3650 <_malloc_r+0x6fc>
    3664:	000332b8 	.word	0x000332b8
    3668:	000336ec 	.word	0x000336ec
    366c:	00000554 	.word	0x00000554

00003670 <__malloc_lock>:
    3670:	e12fff1e 	bx	lr

00003674 <__malloc_unlock>:
    3674:	e12fff1e 	bx	lr

00003678 <_sbrk_r>:
    3678:	e92d4038 	push	{r3, r4, r5, lr}
    367c:	e59f4030 	ldr	r4, [pc, #48]	; 36b4 <_sbrk_r+0x3c>
    3680:	e3a03000 	mov	r3, #0
    3684:	e1a05000 	mov	r5, r0
    3688:	e1a00001 	mov	r0, r1
    368c:	e5843000 	str	r3, [r4]
    3690:	eb000218 	bl	3ef8 <_sbrk>
    3694:	e3700001 	cmn	r0, #1
    3698:	0a000001 	beq	36a4 <_sbrk_r+0x2c>
    369c:	e8bd4038 	pop	{r3, r4, r5, lr}
    36a0:	e12fff1e 	bx	lr
    36a4:	e5943000 	ldr	r3, [r4]
    36a8:	e3530000 	cmp	r3, #0
    36ac:	15853000 	strne	r3, [r5]
    36b0:	eafffff9 	b	369c <_sbrk_r+0x24>
    36b4:	00033720 	.word	0x00033720

000036b8 <__register_exitproc>:
    36b8:	e59fc0e4 	ldr	r12, [pc, #228]	; 37a4 <__register_exitproc+0xec>
    36bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    36c0:	e59c4000 	ldr	r4, [r12]
    36c4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    36c8:	e35c0000 	cmp	r12, #0
    36cc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    36d0:	e59c5004 	ldr	r5, [r12, #4]
    36d4:	0584c148 	streq	r12, [r4, #328]	; 0x148
    36d8:	e355001f 	cmp	r5, #31
    36dc:	e24dd010 	sub	sp, sp, #16
    36e0:	e1a06000 	mov	r6, r0
    36e4:	da000015 	ble	3740 <__register_exitproc+0x88>
    36e8:	e59f00b8 	ldr	r0, [pc, #184]	; 37a8 <__register_exitproc+0xf0>
    36ec:	e3500000 	cmp	r0, #0
    36f0:	1a000001 	bne	36fc <__register_exitproc+0x44>
    36f4:	e3e00000 	mvn	r0, #0
    36f8:	ea000018 	b	3760 <__register_exitproc+0xa8>
    36fc:	e3a00e19 	mov	r0, #400	; 0x190
    3700:	e58d100c 	str	r1, [sp, #12]
    3704:	e58d2008 	str	r2, [sp, #8]
    3708:	e58d3004 	str	r3, [sp, #4]
    370c:	ebfffe00 	bl	2f14 <malloc>
    3710:	e250c000 	subs	r12, r0, #0
    3714:	e59d100c 	ldr	r1, [sp, #12]
    3718:	e59d2008 	ldr	r2, [sp, #8]
    371c:	e59d3004 	ldr	r3, [sp, #4]
    3720:	0afffff3 	beq	36f4 <__register_exitproc+0x3c>
    3724:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    3728:	e3a00000 	mov	r0, #0
    372c:	e58c0004 	str	r0, [r12, #4]
    3730:	e58c5000 	str	r5, [r12]
    3734:	e584c148 	str	r12, [r4, #328]	; 0x148
    3738:	e58c0188 	str	r0, [r12, #392]	; 0x188
    373c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3740:	e3560000 	cmp	r6, #0
    3744:	e59c4004 	ldr	r4, [r12, #4]
    3748:	1a000007 	bne	376c <__register_exitproc+0xb4>
    374c:	e2843002 	add	r3, r4, #2
    3750:	e2844001 	add	r4, r4, #1
    3754:	e78c1103 	str	r1, [r12, r3, lsl #2]
    3758:	e58c4004 	str	r4, [r12, #4]
    375c:	e3a00000 	mov	r0, #0
    3760:	e28dd010 	add	sp, sp, #16
    3764:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3768:	e12fff1e 	bx	lr
    376c:	e3a00001 	mov	r0, #1
    3770:	e1a00410 	lsl	r0, r0, r4
    3774:	e08c8104 	add	r8, r12, r4, lsl #2
    3778:	e3560002 	cmp	r6, #2
    377c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    3780:	e5883108 	str	r3, [r8, #264]	; 0x108
    3784:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    3788:	e1877000 	orr	r7, r7, r0
    378c:	01830000 	orreq	r0, r3, r0
    3790:	e1a05008 	mov	r5, r8
    3794:	e5882088 	str	r2, [r8, #136]	; 0x88
    3798:	e58c7188 	str	r7, [r12, #392]	; 0x188
    379c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    37a0:	eaffffe9 	b	374c <__register_exitproc+0x94>
    37a4:	00004028 	.word	0x00004028
    37a8:	00002f14 	.word	0x00002f14

000037ac <__call_exitprocs>:
    37ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    37b0:	e59f3168 	ldr	r3, [pc, #360]	; 3920 <__call_exitprocs+0x174>
    37b4:	e5933000 	ldr	r3, [r3]
    37b8:	e24dd014 	sub	sp, sp, #20
    37bc:	e58d3004 	str	r3, [sp, #4]
    37c0:	e2833f52 	add	r3, r3, #328	; 0x148
    37c4:	e58d0008 	str	r0, [sp, #8]
    37c8:	e58d300c 	str	r3, [sp, #12]
    37cc:	e1a07001 	mov	r7, r1
    37d0:	e3a08001 	mov	r8, #1
    37d4:	e59d3004 	ldr	r3, [sp, #4]
    37d8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    37dc:	e3560000 	cmp	r6, #0
    37e0:	e59db00c 	ldr	r11, [sp, #12]
    37e4:	0a000033 	beq	38b8 <__call_exitprocs+0x10c>
    37e8:	e5965004 	ldr	r5, [r6, #4]
    37ec:	e2554001 	subs	r4, r5, #1
    37f0:	5286a088 	addpl	r10, r6, #136	; 0x88
    37f4:	5285501f 	addpl	r5, r5, #31
    37f8:	508a5105 	addpl	r5, r10, r5, lsl #2
    37fc:	5a000007 	bpl	3820 <__call_exitprocs+0x74>
    3800:	ea000029 	b	38ac <__call_exitprocs+0x100>
    3804:	e5953000 	ldr	r3, [r5]
    3808:	e1530007 	cmp	r3, r7
    380c:	0a000005 	beq	3828 <__call_exitprocs+0x7c>
    3810:	e2444001 	sub	r4, r4, #1
    3814:	e3740001 	cmn	r4, #1
    3818:	e2455004 	sub	r5, r5, #4
    381c:	0a000022 	beq	38ac <__call_exitprocs+0x100>
    3820:	e3570000 	cmp	r7, #0
    3824:	1afffff6 	bne	3804 <__call_exitprocs+0x58>
    3828:	e5963004 	ldr	r3, [r6, #4]
    382c:	e06a2005 	rsb	r2, r10, r5
    3830:	e2433001 	sub	r3, r3, #1
    3834:	e0862002 	add	r2, r6, r2
    3838:	e1530004 	cmp	r3, r4
    383c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3840:	13a01000 	movne	r1, #0
    3844:	05864004 	streq	r4, [r6, #4]
    3848:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    384c:	e3530000 	cmp	r3, #0
    3850:	0affffee 	beq	3810 <__call_exitprocs+0x64>
    3854:	e1a02418 	lsl	r2, r8, r4
    3858:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    385c:	e1120001 	tst	r2, r1
    3860:	e5969004 	ldr	r9, [r6, #4]
    3864:	0a000016 	beq	38c4 <__call_exitprocs+0x118>
    3868:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    386c:	e1120001 	tst	r2, r1
    3870:	1a000016 	bne	38d0 <__call_exitprocs+0x124>
    3874:	e59d0008 	ldr	r0, [sp, #8]
    3878:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    387c:	e1a0e00f 	mov	lr, pc
    3880:	e12fff13 	bx	r3
    3884:	e5963004 	ldr	r3, [r6, #4]
    3888:	e1530009 	cmp	r3, r9
    388c:	1affffd0 	bne	37d4 <__call_exitprocs+0x28>
    3890:	e59b3000 	ldr	r3, [r11]
    3894:	e1530006 	cmp	r3, r6
    3898:	1affffcd 	bne	37d4 <__call_exitprocs+0x28>
    389c:	e2444001 	sub	r4, r4, #1
    38a0:	e3740001 	cmn	r4, #1
    38a4:	e2455004 	sub	r5, r5, #4
    38a8:	1affffdc 	bne	3820 <__call_exitprocs+0x74>
    38ac:	e59f1070 	ldr	r1, [pc, #112]	; 3924 <__call_exitprocs+0x178>
    38b0:	e3510000 	cmp	r1, #0
    38b4:	1a000009 	bne	38e0 <__call_exitprocs+0x134>
    38b8:	e28dd014 	add	sp, sp, #20
    38bc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    38c0:	e12fff1e 	bx	lr
    38c4:	e1a0e00f 	mov	lr, pc
    38c8:	e12fff13 	bx	r3
    38cc:	eaffffec 	b	3884 <__call_exitprocs+0xd8>
    38d0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    38d4:	e1a0e00f 	mov	lr, pc
    38d8:	e12fff13 	bx	r3
    38dc:	eaffffe8 	b	3884 <__call_exitprocs+0xd8>
    38e0:	e5963004 	ldr	r3, [r6, #4]
    38e4:	e3530000 	cmp	r3, #0
    38e8:	e5963000 	ldr	r3, [r6]
    38ec:	1a000008 	bne	3914 <__call_exitprocs+0x168>
    38f0:	e3530000 	cmp	r3, #0
    38f4:	0a000006 	beq	3914 <__call_exitprocs+0x168>
    38f8:	e1a00006 	mov	r0, r6
    38fc:	e58b3000 	str	r3, [r11]
    3900:	ebfffd8b 	bl	2f34 <free>
    3904:	e59b6000 	ldr	r6, [r11]
    3908:	e3560000 	cmp	r6, #0
    390c:	1affffb5 	bne	37e8 <__call_exitprocs+0x3c>
    3910:	eaffffe8 	b	38b8 <__call_exitprocs+0x10c>
    3914:	e1a0b006 	mov	r11, r6
    3918:	e1a06003 	mov	r6, r3
    391c:	eafffff9 	b	3908 <__call_exitprocs+0x15c>
    3920:	00004028 	.word	0x00004028
    3924:	00002f34 	.word	0x00002f34

00003928 <register_fini>:
    3928:	e92d4008 	push	{r3, lr}
    392c:	e59f3010 	ldr	r3, [pc, #16]	; 3944 <register_fini+0x1c>
    3930:	e3530000 	cmp	r3, #0
    3934:	159f000c 	ldrne	r0, [pc, #12]	; 3948 <register_fini+0x20>
    3938:	1bfffd60 	blne	2ec0 <atexit>
    393c:	e8bd4008 	pop	{r3, lr}
    3940:	e12fff1e 	bx	lr
    3944:	00004050 	.word	0x00004050
    3948:	0000394c 	.word	0x0000394c

0000394c <__libc_fini_array>:
    394c:	e92d4038 	push	{r3, r4, r5, lr}
    3950:	e59f5030 	ldr	r5, [pc, #48]	; 3988 <__libc_fini_array+0x3c>
    3954:	e59f4030 	ldr	r4, [pc, #48]	; 398c <__libc_fini_array+0x40>
    3958:	e0654004 	rsb	r4, r5, r4
    395c:	e1b04144 	asrs	r4, r4, #2
    3960:	10855104 	addne	r5, r5, r4, lsl #2
    3964:	0a000004 	beq	397c <__libc_fini_array+0x30>
    3968:	e5353004 	ldr	r3, [r5, #-4]!
    396c:	e1a0e00f 	mov	lr, pc
    3970:	e12fff13 	bx	r3
    3974:	e2544001 	subs	r4, r4, #1
    3978:	1afffffa 	bne	3968 <__libc_fini_array+0x1c>
    397c:	eb0001b3 	bl	4050 <__libc_fini>
    3980:	e8bd4038 	pop	{r3, r4, r5, lr}
    3984:	e12fff1e 	bx	lr
    3988:	00004068 	.word	0x00004068
    398c:	0000406c 	.word	0x0000406c

00003990 <_malloc_trim_r>:
    3990:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3994:	e59f50e4 	ldr	r5, [pc, #228]	; 3a80 <_malloc_trim_r+0xf0>
    3998:	e1a07001 	mov	r7, r1
    399c:	e1a04000 	mov	r4, r0
    39a0:	ebffff32 	bl	3670 <__malloc_lock>
    39a4:	e5953008 	ldr	r3, [r5, #8]
    39a8:	e5936004 	ldr	r6, [r3, #4]
    39ac:	e3c66003 	bic	r6, r6, #3
    39b0:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    39b4:	e283300f 	add	r3, r3, #15
    39b8:	e0677003 	rsb	r7, r7, r3
    39bc:	e1a07627 	lsr	r7, r7, #12
    39c0:	e2477001 	sub	r7, r7, #1
    39c4:	e1a07607 	lsl	r7, r7, #12
    39c8:	e3570a01 	cmp	r7, #4096	; 0x1000
    39cc:	ba000006 	blt	39ec <_malloc_trim_r+0x5c>
    39d0:	e1a00004 	mov	r0, r4
    39d4:	e3a01000 	mov	r1, #0
    39d8:	ebffff26 	bl	3678 <_sbrk_r>
    39dc:	e5953008 	ldr	r3, [r5, #8]
    39e0:	e0833006 	add	r3, r3, r6
    39e4:	e1500003 	cmp	r0, r3
    39e8:	0a000004 	beq	3a00 <_malloc_trim_r+0x70>
    39ec:	e1a00004 	mov	r0, r4
    39f0:	ebffff1f 	bl	3674 <__malloc_unlock>
    39f4:	e3a00000 	mov	r0, #0
    39f8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    39fc:	e12fff1e 	bx	lr
    3a00:	e1a00004 	mov	r0, r4
    3a04:	e2671000 	rsb	r1, r7, #0
    3a08:	ebffff1a 	bl	3678 <_sbrk_r>
    3a0c:	e3700001 	cmn	r0, #1
    3a10:	0a00000b 	beq	3a44 <_malloc_trim_r+0xb4>
    3a14:	e59f3068 	ldr	r3, [pc, #104]	; 3a84 <_malloc_trim_r+0xf4>
    3a18:	e5952008 	ldr	r2, [r5, #8]
    3a1c:	e5931000 	ldr	r1, [r3]
    3a20:	e0676006 	rsb	r6, r7, r6
    3a24:	e3866001 	orr	r6, r6, #1
    3a28:	e0677001 	rsb	r7, r7, r1
    3a2c:	e1a00004 	mov	r0, r4
    3a30:	e5826004 	str	r6, [r2, #4]
    3a34:	e5837000 	str	r7, [r3]
    3a38:	ebffff0d 	bl	3674 <__malloc_unlock>
    3a3c:	e3a00001 	mov	r0, #1
    3a40:	eaffffec 	b	39f8 <_malloc_trim_r+0x68>
    3a44:	e1a00004 	mov	r0, r4
    3a48:	e3a01000 	mov	r1, #0
    3a4c:	ebffff09 	bl	3678 <_sbrk_r>
    3a50:	e5953008 	ldr	r3, [r5, #8]
    3a54:	e0632000 	rsb	r2, r3, r0
    3a58:	e352000f 	cmp	r2, #15
    3a5c:	daffffe2 	ble	39ec <_malloc_trim_r+0x5c>
    3a60:	e59f1020 	ldr	r1, [pc, #32]	; 3a88 <_malloc_trim_r+0xf8>
    3a64:	e5911000 	ldr	r1, [r1]
    3a68:	e0610000 	rsb	r0, r1, r0
    3a6c:	e59f1010 	ldr	r1, [pc, #16]	; 3a84 <_malloc_trim_r+0xf4>
    3a70:	e3822001 	orr	r2, r2, #1
    3a74:	e5810000 	str	r0, [r1]
    3a78:	e5832004 	str	r2, [r3, #4]
    3a7c:	eaffffda 	b	39ec <_malloc_trim_r+0x5c>
    3a80:	000332b8 	.word	0x000332b8
    3a84:	000336f0 	.word	0x000336f0
    3a88:	000336c0 	.word	0x000336c0

00003a8c <_free_r>:
    3a8c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3a90:	e2514000 	subs	r4, r1, #0
    3a94:	e1a06000 	mov	r6, r0
    3a98:	0a000046 	beq	3bb8 <_free_r+0x12c>
    3a9c:	ebfffef3 	bl	3670 <__malloc_lock>
    3aa0:	e514e004 	ldr	lr, [r4, #-4]
    3aa4:	e59f1238 	ldr	r1, [pc, #568]	; 3ce4 <_free_r+0x258>
    3aa8:	e244c008 	sub	r12, r4, #8
    3aac:	e3ce3001 	bic	r3, lr, #1
    3ab0:	e08c2003 	add	r2, r12, r3
    3ab4:	e5910008 	ldr	r0, [r1, #8]
    3ab8:	e5925004 	ldr	r5, [r2, #4]
    3abc:	e1500002 	cmp	r0, r2
    3ac0:	e3c55003 	bic	r5, r5, #3
    3ac4:	0a00004a 	beq	3bf4 <_free_r+0x168>
    3ac8:	e21ee001 	ands	lr, lr, #1
    3acc:	e5825004 	str	r5, [r2, #4]
    3ad0:	13a0e000 	movne	lr, #0
    3ad4:	1a000009 	bne	3b00 <_free_r+0x74>
    3ad8:	e5144008 	ldr	r4, [r4, #-8]
    3adc:	e064c00c 	rsb	r12, r4, r12
    3ae0:	e59c0008 	ldr	r0, [r12, #8]
    3ae4:	e2817008 	add	r7, r1, #8
    3ae8:	e1500007 	cmp	r0, r7
    3aec:	e0833004 	add	r3, r3, r4
    3af0:	159c400c 	ldrne	r4, [r12, #12]
    3af4:	1580400c 	strne	r4, [r0, #12]
    3af8:	15840008 	strne	r0, [r4, #8]
    3afc:	03a0e001 	moveq	lr, #1
    3b00:	e0820005 	add	r0, r2, r5
    3b04:	e5900004 	ldr	r0, [r0, #4]
    3b08:	e3100001 	tst	r0, #1
    3b0c:	1a000009 	bne	3b38 <_free_r+0xac>
    3b10:	e35e0000 	cmp	lr, #0
    3b14:	e5920008 	ldr	r0, [r2, #8]
    3b18:	e0833005 	add	r3, r3, r5
    3b1c:	1a000002 	bne	3b2c <_free_r+0xa0>
    3b20:	e59f41c0 	ldr	r4, [pc, #448]	; 3ce8 <_free_r+0x25c>
    3b24:	e1500004 	cmp	r0, r4
    3b28:	0a000047 	beq	3c4c <_free_r+0x1c0>
    3b2c:	e592200c 	ldr	r2, [r2, #12]
    3b30:	e580200c 	str	r2, [r0, #12]
    3b34:	e5820008 	str	r0, [r2, #8]
    3b38:	e3832001 	orr	r2, r3, #1
    3b3c:	e35e0000 	cmp	lr, #0
    3b40:	e58c2004 	str	r2, [r12, #4]
    3b44:	e78c3003 	str	r3, [r12, r3]
    3b48:	1a000018 	bne	3bb0 <_free_r+0x124>
    3b4c:	e3530c02 	cmp	r3, #512	; 0x200
    3b50:	3a00001a 	bcc	3bc0 <_free_r+0x134>
    3b54:	e1a024a3 	lsr	r2, r3, #9
    3b58:	e3520004 	cmp	r2, #4
    3b5c:	8a000042 	bhi	3c6c <_free_r+0x1e0>
    3b60:	e1a0e323 	lsr	lr, r3, #6
    3b64:	e28ee038 	add	lr, lr, #56	; 0x38
    3b68:	e1a0008e 	lsl	r0, lr, #1
    3b6c:	e0810100 	add	r0, r1, r0, lsl #2
    3b70:	e5902008 	ldr	r2, [r0, #8]
    3b74:	e1520000 	cmp	r2, r0
    3b78:	e59f1164 	ldr	r1, [pc, #356]	; 3ce4 <_free_r+0x258>
    3b7c:	0a000044 	beq	3c94 <_free_r+0x208>
    3b80:	e5921004 	ldr	r1, [r2, #4]
    3b84:	e3c11003 	bic	r1, r1, #3
    3b88:	e1530001 	cmp	r3, r1
    3b8c:	2a000002 	bcs	3b9c <_free_r+0x110>
    3b90:	e5922008 	ldr	r2, [r2, #8]
    3b94:	e1500002 	cmp	r0, r2
    3b98:	1afffff8 	bne	3b80 <_free_r+0xf4>
    3b9c:	e592300c 	ldr	r3, [r2, #12]
    3ba0:	e58c300c 	str	r3, [r12, #12]
    3ba4:	e58c2008 	str	r2, [r12, #8]
    3ba8:	e582c00c 	str	r12, [r2, #12]
    3bac:	e583c008 	str	r12, [r3, #8]
    3bb0:	e1a00006 	mov	r0, r6
    3bb4:	ebfffeae 	bl	3674 <__malloc_unlock>
    3bb8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3bbc:	e12fff1e 	bx	lr
    3bc0:	e5912004 	ldr	r2, [r1, #4]
    3bc4:	e1a031a3 	lsr	r3, r3, #3
    3bc8:	e1a00143 	asr	r0, r3, #2
    3bcc:	e3a0e001 	mov	lr, #1
    3bd0:	e182001e 	orr	r0, r2, lr, lsl r0
    3bd4:	e0813183 	add	r3, r1, r3, lsl #3
    3bd8:	e5932008 	ldr	r2, [r3, #8]
    3bdc:	e58c300c 	str	r3, [r12, #12]
    3be0:	e58c2008 	str	r2, [r12, #8]
    3be4:	e5810004 	str	r0, [r1, #4]
    3be8:	e583c008 	str	r12, [r3, #8]
    3bec:	e582c00c 	str	r12, [r2, #12]
    3bf0:	eaffffee 	b	3bb0 <_free_r+0x124>
    3bf4:	e31e0001 	tst	lr, #1
    3bf8:	e0853003 	add	r3, r5, r3
    3bfc:	1a000006 	bne	3c1c <_free_r+0x190>
    3c00:	e5142008 	ldr	r2, [r4, #-8]
    3c04:	e062c00c 	rsb	r12, r2, r12
    3c08:	e59c000c 	ldr	r0, [r12, #12]
    3c0c:	e59ce008 	ldr	lr, [r12, #8]
    3c10:	e58e000c 	str	r0, [lr, #12]
    3c14:	e580e008 	str	lr, [r0, #8]
    3c18:	e0833002 	add	r3, r3, r2
    3c1c:	e59f20c8 	ldr	r2, [pc, #200]	; 3cec <_free_r+0x260>
    3c20:	e5920000 	ldr	r0, [r2]
    3c24:	e3832001 	orr	r2, r3, #1
    3c28:	e1530000 	cmp	r3, r0
    3c2c:	e58c2004 	str	r2, [r12, #4]
    3c30:	e581c008 	str	r12, [r1, #8]
    3c34:	3affffdd 	bcc	3bb0 <_free_r+0x124>
    3c38:	e59f30b0 	ldr	r3, [pc, #176]	; 3cf0 <_free_r+0x264>
    3c3c:	e1a00006 	mov	r0, r6
    3c40:	e5931000 	ldr	r1, [r3]
    3c44:	ebffff51 	bl	3990 <_malloc_trim_r>
    3c48:	eaffffd8 	b	3bb0 <_free_r+0x124>
    3c4c:	e3832001 	orr	r2, r3, #1
    3c50:	e581c014 	str	r12, [r1, #20]
    3c54:	e581c010 	str	r12, [r1, #16]
    3c58:	e58c000c 	str	r0, [r12, #12]
    3c5c:	e58c0008 	str	r0, [r12, #8]
    3c60:	e58c2004 	str	r2, [r12, #4]
    3c64:	e78c3003 	str	r3, [r12, r3]
    3c68:	eaffffd0 	b	3bb0 <_free_r+0x124>
    3c6c:	e3520014 	cmp	r2, #20
    3c70:	9282e05b 	addls	lr, r2, #91	; 0x5b
    3c74:	91a0008e 	lslls	r0, lr, #1
    3c78:	9affffbb 	bls	3b6c <_free_r+0xe0>
    3c7c:	e3520054 	cmp	r2, #84	; 0x54
    3c80:	8a00000a 	bhi	3cb0 <_free_r+0x224>
    3c84:	e1a0e623 	lsr	lr, r3, #12
    3c88:	e28ee06e 	add	lr, lr, #110	; 0x6e
    3c8c:	e1a0008e 	lsl	r0, lr, #1
    3c90:	eaffffb5 	b	3b6c <_free_r+0xe0>
    3c94:	e5913004 	ldr	r3, [r1, #4]
    3c98:	e1a0e14e 	asr	lr, lr, #2
    3c9c:	e3a00001 	mov	r0, #1
    3ca0:	e1830e10 	orr	r0, r3, r0, lsl lr
    3ca4:	e1a03002 	mov	r3, r2
    3ca8:	e5810004 	str	r0, [r1, #4]
    3cac:	eaffffbb 	b	3ba0 <_free_r+0x114>
    3cb0:	e3520f55 	cmp	r2, #340	; 0x154
    3cb4:	91a0e7a3 	lsrls	lr, r3, #15
    3cb8:	928ee077 	addls	lr, lr, #119	; 0x77
    3cbc:	91a0008e 	lslls	r0, lr, #1
    3cc0:	9affffa9 	bls	3b6c <_free_r+0xe0>
    3cc4:	e59f0028 	ldr	r0, [pc, #40]	; 3cf4 <_free_r+0x268>
    3cc8:	e1520000 	cmp	r2, r0
    3ccc:	91a0e923 	lsrls	lr, r3, #18
    3cd0:	928ee07c 	addls	lr, lr, #124	; 0x7c
    3cd4:	91a0008e 	lslls	r0, lr, #1
    3cd8:	83a000fc 	movhi	r0, #252	; 0xfc
    3cdc:	83a0e07e 	movhi	lr, #126	; 0x7e
    3ce0:	eaffffa1 	b	3b6c <_free_r+0xe0>
    3ce4:	000332b8 	.word	0x000332b8
    3ce8:	000332c0 	.word	0x000332c0
    3cec:	000336c4 	.word	0x000336c4
    3cf0:	000336ec 	.word	0x000336ec
    3cf4:	00000554 	.word	0x00000554

00003cf8 <cleanup_glue>:
    3cf8:	e92d4038 	push	{r3, r4, r5, lr}
    3cfc:	e1a04001 	mov	r4, r1
    3d00:	e5911000 	ldr	r1, [r1]
    3d04:	e3510000 	cmp	r1, #0
    3d08:	e1a05000 	mov	r5, r0
    3d0c:	1bfffff9 	blne	3cf8 <cleanup_glue>
    3d10:	e1a00005 	mov	r0, r5
    3d14:	e1a01004 	mov	r1, r4
    3d18:	ebffff5b 	bl	3a8c <_free_r>
    3d1c:	e8bd4038 	pop	{r3, r4, r5, lr}
    3d20:	e12fff1e 	bx	lr

00003d24 <_reclaim_reent>:
    3d24:	e59f30f0 	ldr	r3, [pc, #240]	; 3e1c <_reclaim_reent+0xf8>
    3d28:	e5933000 	ldr	r3, [r3]
    3d2c:	e1500003 	cmp	r0, r3
    3d30:	e92d4070 	push	{r4, r5, r6, lr}
    3d34:	e1a05000 	mov	r5, r0
    3d38:	0a00002b 	beq	3dec <_reclaim_reent+0xc8>
    3d3c:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    3d40:	e3520000 	cmp	r2, #0
    3d44:	0a000011 	beq	3d90 <_reclaim_reent+0x6c>
    3d48:	e3a03000 	mov	r3, #0
    3d4c:	e1a06003 	mov	r6, r3
    3d50:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    3d54:	e3510000 	cmp	r1, #0
    3d58:	0a000005 	beq	3d74 <_reclaim_reent+0x50>
    3d5c:	e5914000 	ldr	r4, [r1]
    3d60:	e1a00005 	mov	r0, r5
    3d64:	ebffff48 	bl	3a8c <_free_r>
    3d68:	e2541000 	subs	r1, r4, #0
    3d6c:	1afffffa 	bne	3d5c <_reclaim_reent+0x38>
    3d70:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    3d74:	e2866001 	add	r6, r6, #1
    3d78:	e3560020 	cmp	r6, #32
    3d7c:	e1a03006 	mov	r3, r6
    3d80:	1afffff2 	bne	3d50 <_reclaim_reent+0x2c>
    3d84:	e1a00005 	mov	r0, r5
    3d88:	e1a01002 	mov	r1, r2
    3d8c:	ebffff3e 	bl	3a8c <_free_r>
    3d90:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    3d94:	e3510000 	cmp	r1, #0
    3d98:	11a00005 	movne	r0, r5
    3d9c:	1bffff3a 	blne	3a8c <_free_r>
    3da0:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    3da4:	e3510000 	cmp	r1, #0
    3da8:	0a000008 	beq	3dd0 <_reclaim_reent+0xac>
    3dac:	e2856f53 	add	r6, r5, #332	; 0x14c
    3db0:	e1510006 	cmp	r1, r6
    3db4:	0a000005 	beq	3dd0 <_reclaim_reent+0xac>
    3db8:	e5914000 	ldr	r4, [r1]
    3dbc:	e1a00005 	mov	r0, r5
    3dc0:	ebffff31 	bl	3a8c <_free_r>
    3dc4:	e1560004 	cmp	r6, r4
    3dc8:	e1a01004 	mov	r1, r4
    3dcc:	1afffff9 	bne	3db8 <_reclaim_reent+0x94>
    3dd0:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    3dd4:	e3510000 	cmp	r1, #0
    3dd8:	11a00005 	movne	r0, r5
    3ddc:	1bffff2a 	blne	3a8c <_free_r>
    3de0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    3de4:	e3530000 	cmp	r3, #0
    3de8:	1a000001 	bne	3df4 <_reclaim_reent+0xd0>
    3dec:	e8bd4070 	pop	{r4, r5, r6, lr}
    3df0:	e12fff1e 	bx	lr
    3df4:	e1a00005 	mov	r0, r5
    3df8:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    3dfc:	e1a0e00f 	mov	lr, pc
    3e00:	e12fff1c 	bx	r12
    3e04:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    3e08:	e3510000 	cmp	r1, #0
    3e0c:	0afffff6 	beq	3dec <_reclaim_reent+0xc8>
    3e10:	e1a00005 	mov	r0, r5
    3e14:	e8bd4070 	pop	{r4, r5, r6, lr}
    3e18:	eaffffb6 	b	3cf8 <cleanup_glue>
    3e1c:	00032e88 	.word	0x00032e88

00003e20 <_wrapup_reent>:
    3e20:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3e24:	e2507000 	subs	r7, r0, #0
    3e28:	059f3060 	ldreq	r3, [pc, #96]	; 3e90 <_wrapup_reent+0x70>
    3e2c:	05937000 	ldreq	r7, [r3]
    3e30:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    3e34:	e3560000 	cmp	r6, #0
    3e38:	0a00000d 	beq	3e74 <_wrapup_reent+0x54>
    3e3c:	e5965004 	ldr	r5, [r6, #4]
    3e40:	e2554001 	subs	r4, r5, #1
    3e44:	52855002 	addpl	r5, r5, #2
    3e48:	50865105 	addpl	r5, r6, r5, lsl #2
    3e4c:	4a000005 	bmi	3e68 <_wrapup_reent+0x48>
    3e50:	e5353004 	ldr	r3, [r5, #-4]!
    3e54:	e2444001 	sub	r4, r4, #1
    3e58:	e1a0e00f 	mov	lr, pc
    3e5c:	e12fff13 	bx	r3
    3e60:	e3740001 	cmn	r4, #1
    3e64:	1afffff9 	bne	3e50 <_wrapup_reent+0x30>
    3e68:	e5966000 	ldr	r6, [r6]
    3e6c:	e3560000 	cmp	r6, #0
    3e70:	1afffff1 	bne	3e3c <_wrapup_reent+0x1c>
    3e74:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    3e78:	e3530000 	cmp	r3, #0
    3e7c:	11a00007 	movne	r0, r7
    3e80:	11a0e00f 	movne	lr, pc
    3e84:	112fff13 	bxne	r3
    3e88:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3e8c:	e12fff1e 	bx	lr
    3e90:	00032e88 	.word	0x00032e88

00003e94 <__cs3_premain>:
    3e94:	e92d4008 	push	{r3, lr}
    3e98:	eb000037 	bl	3f7c <__libc_init_array>
    3e9c:	e59f3030 	ldr	r3, [pc, #48]	; 3ed4 <__cs3_premain+0x40>
    3ea0:	e3530000 	cmp	r3, #0
    3ea4:	15930000 	ldrne	r0, [r3]
    3ea8:	01a00003 	moveq	r0, r3
    3eac:	e59f3024 	ldr	r3, [pc, #36]	; 3ed8 <__cs3_premain+0x44>
    3eb0:	e3530000 	cmp	r3, #0
    3eb4:	15931000 	ldrne	r1, [r3]
    3eb8:	01a01003 	moveq	r1, r3
    3ebc:	e3a02000 	mov	r2, #0
    3ec0:	ebfff481 	bl	10cc <main>
    3ec4:	e59f3010 	ldr	r3, [pc, #16]	; 3edc <__cs3_premain+0x48>
    3ec8:	e3530000 	cmp	r3, #0
    3ecc:	1bfffc03 	blne	2ee0 <exit>
    3ed0:	eafffffe 	b	3ed0 <__cs3_premain+0x3c>
	...
    3edc:	00002ee0 	.word	0x00002ee0

00003ee0 <_exit>:
    3ee0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3ee4:	e3a00018 	mov	r0, #24
    3ee8:	e59f1004 	ldr	r1, [pc, #4]	; 3ef4 <_exit+0x14>
    3eec:	ef123456 	svc	0x00123456
    3ef0:	eafffffe 	b	3ef0 <_exit+0x10>
    3ef4:	00020026 	.word	0x00020026

00003ef8 <_sbrk>:
    3ef8:	e92d4008 	push	{r3, lr}
    3efc:	e59f305c 	ldr	r3, [pc, #92]	; 3f60 <_sbrk+0x68>
    3f00:	e59f105c 	ldr	r1, [pc, #92]	; 3f64 <_sbrk+0x6c>
    3f04:	e5932000 	ldr	r2, [r3]
    3f08:	e5913000 	ldr	r3, [r1]
    3f0c:	e3520000 	cmp	r2, #0
    3f10:	e0830000 	add	r0, r3, r0
    3f14:	0a000002 	beq	3f24 <_sbrk+0x2c>
    3f18:	e0602002 	rsb	r2, r0, r2
    3f1c:	e3520000 	cmp	r2, #0
    3f20:	ba000009 	blt	3f4c <_sbrk+0x54>
    3f24:	e04d2003 	sub	r2, sp, r3
    3f28:	e3520000 	cmp	r2, #0
    3f2c:	ba000002 	blt	3f3c <_sbrk+0x44>
    3f30:	e04d2000 	sub	r2, sp, r0
    3f34:	e35200ff 	cmp	r2, #255	; 0xff
    3f38:	da000003 	ble	3f4c <_sbrk+0x54>
    3f3c:	e5810000 	str	r0, [r1]
    3f40:	e1a00003 	mov	r0, r3
    3f44:	e8bd4008 	pop	{r3, lr}
    3f48:	e12fff1e 	bx	lr
    3f4c:	eb000006 	bl	3f6c <__errno>
    3f50:	e3a0300c 	mov	r3, #12
    3f54:	e5803000 	str	r3, [r0]
    3f58:	e3e03000 	mvn	r3, #0
    3f5c:	eafffff7 	b	3f40 <_sbrk+0x48>
    3f60:	000336c8 	.word	0x000336c8
    3f64:	000336cc 	.word	0x000336cc

00003f68 <__cs3_isr_interrupt>:
    3f68:	eafffffe 	b	3f68 <__cs3_isr_interrupt>

00003f6c <__errno>:
    3f6c:	e59f3004 	ldr	r3, [pc, #4]	; 3f78 <__errno+0xc>
    3f70:	e5930000 	ldr	r0, [r3]
    3f74:	e12fff1e 	bx	lr
    3f78:	00032e88 	.word	0x00032e88

00003f7c <__libc_init_array>:
    3f7c:	e92d4070 	push	{r4, r5, r6, lr}
    3f80:	e59f506c 	ldr	r5, [pc, #108]	; 3ff4 <__libc_init_array+0x78>
    3f84:	e59f606c 	ldr	r6, [pc, #108]	; 3ff8 <__libc_init_array+0x7c>
    3f88:	e0656006 	rsb	r6, r5, r6
    3f8c:	e1b06146 	asrs	r6, r6, #2
    3f90:	12455004 	subne	r5, r5, #4
    3f94:	13a04000 	movne	r4, #0
    3f98:	0a000005 	beq	3fb4 <__libc_init_array+0x38>
    3f9c:	e5b53004 	ldr	r3, [r5, #4]!
    3fa0:	e2844001 	add	r4, r4, #1
    3fa4:	e1a0e00f 	mov	lr, pc
    3fa8:	e12fff13 	bx	r3
    3fac:	e1560004 	cmp	r6, r4
    3fb0:	1afffff9 	bne	3f9c <__libc_init_array+0x20>
    3fb4:	e59f5040 	ldr	r5, [pc, #64]	; 3ffc <__libc_init_array+0x80>
    3fb8:	e59f6040 	ldr	r6, [pc, #64]	; 4000 <__libc_init_array+0x84>
    3fbc:	e0656006 	rsb	r6, r5, r6
    3fc0:	eb00001a 	bl	4030 <_init>
    3fc4:	e1b06146 	asrs	r6, r6, #2
    3fc8:	12455004 	subne	r5, r5, #4
    3fcc:	13a04000 	movne	r4, #0
    3fd0:	0a000005 	beq	3fec <__libc_init_array+0x70>
    3fd4:	e5b53004 	ldr	r3, [r5, #4]!
    3fd8:	e2844001 	add	r4, r4, #1
    3fdc:	e1a0e00f 	mov	lr, pc
    3fe0:	e12fff13 	bx	r3
    3fe4:	e1560004 	cmp	r6, r4
    3fe8:	1afffff9 	bne	3fd4 <__libc_init_array+0x58>
    3fec:	e8bd4070 	pop	{r4, r5, r6, lr}
    3ff0:	e12fff1e 	bx	lr
    3ff4:	00004048 	.word	0x00004048
    3ff8:	00004048 	.word	0x00004048
    3ffc:	00004048 	.word	0x00004048
    4000:	00004050 	.word	0x00004050

Disassembly of section .rodata:

00004008 <_global_impure_ptr-0x20>:
    4008:	4302d021 	.word	0x4302d021
    400c:	4312d4fe 	.word	0x4312d4fe
    4010:	4324d062 	.word	0x4324d062
    4014:	432e9d2f 	.word	0x432e9d2f
    4018:	4343ff7d 	.word	0x4343ff7d
    401c:	435c0000 	.word	0x435c0000
    4020:	4376f127 	.word	0x4376f127
    4024:	4382d021 	.word	0x4382d021

00004028 <_global_impure_ptr>:
    4028:	00032e90 00000043                       ....C...

00004030 <_init>:
    4030:	e1a0c00d 	mov	r12, sp
    4034:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4038:	e24cb004 	sub	r11, r12, #4
    403c:	e24bd028 	sub	sp, r11, #40	; 0x28
    4040:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4044:	e12fff1e 	bx	lr

00004048 <__init_array_start>:
    4048:	00003928 	.word	0x00003928

0000404c <__frame_dummy_init_array_entry>:
    404c:	00000208                                ....

00004050 <__libc_fini>:
    4050:	e1a0c00d 	mov	r12, sp
    4054:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4058:	e24cb004 	sub	r11, r12, #4
    405c:	e24bd028 	sub	sp, r11, #40	; 0x28
    4060:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4064:	e12fff1e 	bx	lr

00004068 <__fini_array_start>:
    4068:	000001c4 	.word	0x000001c4

0000406c <__cs3_regions>:
    406c:	00000000 	.word	0x00000000
    4070:	00000040 	.word	0x00000040
    4074:	00000040 	.word	0x00000040
    4078:	00033690 	.word	0x00033690
    407c:	00000058 	.word	0x00000058
