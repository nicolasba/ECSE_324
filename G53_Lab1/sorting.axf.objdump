
D:/uni/5th semester/ecse324/labs/lab1/G53_Lab1/sorting.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start: 	
			LDR R2, FLAG			/* Register R2 holds value of sorted flag (false/true) */
   0:	e59f2050 	ldr	r2, [pc, #80]	; 58 <FLAG>

00000004 <OUTER_LOOP>:
			
OUTER_LOOP:
			CMP R2, #1				/* Compare R2 and 1 (R2 - 1). TRUE=1 - 1 = 0 */
   4:	e3520001 	cmp	r2, #1
			BEQ END					/* End loop if sorted flag is true */
   8:	0a000010 	beq	50 <END>
			ADD R2, R2, #1			/* Set sorted flag to true */		
   c:	e2822001 	add	r2, r2, #1
			LDR R0, =ARRAY			/* Register R0 holds pointer to start of array. */
  10:	e59f0068 	ldr	r0, [pc, #104]	; 80 <ARRAY+0x24>
			LDR R1, N				/* Register R1 holds value N. */
  14:	e59f1038 	ldr	r1, [pc, #56]	; 54 <N>
			B 	INNER_LOOP
  18:	eaffffff 	b	1c <INNER_LOOP>

0000001c <INNER_LOOP>:

INNER_LOOP:
			SUBS R1, R1, #1			/* Decrement the loop counter */
  1c:	e2511001 	subs	r1, r1, #1
			BEQ OUTER_LOOP			/* Go back to outer loop if counter has reached 0. */
  20:	0afffff7 	beq	4 <OUTER_LOOP>
			LDR R3, [R0]			/* Register R2 points to the actual element in the array. */
  24:	e5903000 	ldr	r3, [r0]
			LDR R4, [R0, #4]		/* Register R2 points to the next element in the array. */
  28:	e5904004 	ldr	r4, [r0, #4]
			CMP R3, R4				/* Compare R2 and R3 values (R2 - R3)  */
  2c:	e1530004 	cmp	r3, r4
			BGT SWAP				/* If R2 > R3, swap values because array has to be sorted in ascending order */
  30:	ca000002 	bgt	40 <SWAP>
			B 	NEXT_ELEMENT			
  34:	eaffffff 	b	38 <NEXT_ELEMENT>

00000038 <NEXT_ELEMENT>:

NEXT_ELEMENT:
			ADD R0, R0, #4			/* R0 points to next element in array */
  38:	e2800004 	add	r0, r0, #4
			B INNER_LOOP			/* Restart inner loop */
  3c:	eafffff6 	b	1c <INNER_LOOP>

00000040 <SWAP>:

SWAP: 		
			STR R3, [R0, #4]		//Store R3 (actual element) in following location
  40:	e5803004 	str	r3, [r0, #4]
			STR R4, [R0]			//Store R4 (next element) in present location
  44:	e5804000 	str	r4, [r0]
			LDR R2, FLAG			/* Reset sorted flag to false */
  48:	e59f2008 	ldr	r2, [pc, #8]	; 58 <FLAG>
			B 	NEXT_ELEMENT		/* Shift pointer to array */
  4c:	eafffff9 	b	38 <NEXT_ELEMENT>

00000050 <END>:

END: 		B 	END					/* Infinite loop */
  50:	eafffffe 	b	50 <END>

00000054 <N>:
  54:	00000009 	.word	0x00000009

00000058 <FLAG>:
  58:	00000000 	.word	0x00000000

0000005c <ARRAY>:
  5c:	00000004 	.word	0x00000004
  60:	00000005 	.word	0x00000005
  64:	00000003 	.word	0x00000003
  68:	00000006 	.word	0x00000006
  6c:	00000001 	.word	0x00000001
  70:	00000011 	.word	0x00000011
  74:	00000002 	.word	0x00000002
  78:	ffffffff 	.word	0xffffffff
  7c:	0000000a 	.word	0x0000000a
  80:	0000005c 	.word	0x0000005c
